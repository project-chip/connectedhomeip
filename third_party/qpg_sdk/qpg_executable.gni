# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("${build_root}/toolchain/flashable_executable.gni")
import("${chip_root}/src/platform/device.gni")
import("qpg_sdk.gni")

template("appuc_firmware_packer") {
  forward_variables_from(invoker,
                         [
                           "appuc_output_name",
                           "appuc_options",
                           "deps",
                           "data_deps",
                         ])

  action(target_name) {
    script = "${qpg_sdk_root}/Tools/QorvoPlatformTools/appuc_firmware_packer.py"
    outputs = [ appuc_output_name ]

    args = appuc_options
  }
}

# Run the generator script that takes a .HEX file and adds the OTA header to it.
#
# This requires a Python script, given by ota_header_generator,
# to construct the resulting image containing the OTA header,
# do any optional adjustments (like image compression) and produce
# the end result, given by ota_header_script_name.
#
# As used by qpg_executable(), the generator script requires three arguments,
#   chip_root       - The path to the root tree of Matter
#   in_hex          - The HEX file to be patched with OTA header
#   out_ota         - The out file, containing the OTA header in front
#                     of the original HEX binary data
template("gen_ota_header") {
  forward_variables_from(invoker,
                         [
                           "ota_header_generator",
                           "ota_header_script_name",
                           "ota_header_options",
                           "deps",
                           "data_deps",
                         ])

  action(target_name) {
    outputs = [ ota_header_script_name ]

    args = ota_header_options
    script = ota_header_generator
  }
}
template("hexmerge") {
  forward_variables_from(invoker,
                         [
                           "hexmerge_generator",
                           "hexmerge_output_name",
                           "hexmerge_arguments",
                           "deps",
                           "data_deps",
                         ])

  action(target_name) {
    outputs = [ hexmerge_output_name ]

    args = hexmerge_arguments
    script = hexmerge_generator
  }
}

template("hexfill") {
  forward_variables_from(invoker,
                         [
                           "hexfill_generator",
                           "hexfill_output_name",
                           "hexfill_arguments",
                           "deps",
                           "data_deps",
                         ])

  action(target_name) {
    outputs = [ hexfill_output_name ]

    args = hexfill_arguments
    script = hexfill_generator
  }
}

template("qpg_executable") {
  output_base_name = get_path_info(invoker.output_name, "name")

  qpg_target_name = target_name

  executable_target_name = "${target_name}.out"

  objcopy_image_format = "ihex"
  objcopy = "arm-none-eabi-objcopy"
  objcopy_image_name = invoker.output_name + ".application.hex_"
  app_unsigned_hex = objcopy_image_name
  app_signed_hex = invoker.output_name + ".application.signed.hex_"
  output_merged_hex = invoker.output_name + ".merged.hex_"
  output_hex = invoker.output_name + ".hex"

  defines = []
  if (defined(invoker.defines)) {
    defines += invoker.defines
  }

  if (defined(invoker.app_name)) {
    app_name = invoker.app_name
  } else {
    assert(false, "Unknown App!")
  }

  if (defined(invoker.project_dir)) {
    project_dir = invoker.project_dir
  } else {
    assert(false, "Project path missing!")
  }

  # Copy flashing dependencies to the output directory so that the output
  # is collectively self-contained; this allows flashing to work reliably
  # even if the build and flashing steps take place on different machines
  # or in different containers.

  flashing_runtime_target = target_name + ".flashing_runtime"
  flashing_script_inputs = [
    "${chip_root}/scripts/flashing/firmware_utils.py",
    "${chip_root}/scripts/flashing/qpg_firmware_utils.py",
  ]

  copy(flashing_runtime_target) {
    sources = flashing_script_inputs
    outputs = [ "${root_out_dir}/{{source_file_part}}" ]
  }

  flashing_script_generator =
      "${chip_root}/scripts/flashing/gen_flashing_script.py"
  flashing_script_name = output_base_name + ".flash.py"
  flashing_options = [ "qpg" ]

  flashable_executable(executable_target_name) {
    forward_variables_from(invoker, "*")
    data_deps = [ ":${flashing_runtime_target}" ]
  }

  appuc_firmware_packer(app_signed_hex) {
    appuc_output_name = "${root_out_dir}/${app_signed_hex}"
    out_dir = rebase_path(root_out_dir, root_build_dir)

    appuc_options = [
      "--appuc",
      "1",
      "--version",
      "1",
    ]
    appuc_options += [
      "--input",
      "${out_dir}/${app_unsigned_hex}",
    ]
    appuc_options += [
      "--output",
      "${out_dir}/${app_signed_hex}",
    ]
    appuc_options += [
      "--sign",
      rebase_path(qpg_sdk_root, root_build_dir) +
          "/Tools/SecureBoot/developer_key_private.der",
    ]
    appuc_options += [
      "--cert",
      rebase_path(qpg_sdk_root, root_build_dir) +
          "/Tools/SecureBoot/developer_certificate_signed.cert",
    ]

    deps = [ ":$executable_target_name" ]
  }

  if (qpg_target_ic == "qpg6200") {
    flash_start_addr = "0x10013000"
    flash_app_start_offset = "0x7400"
    nvm_start_addr = "0x1013f800"
    nvm_end_addr = "0x10147800"
  } else {
    assert(false, "Unknown QPG board!")
  }

  # If OTA requestor is enabled, generate OTA image from HEX
  if (chip_enable_ota_requestor) {
    gen_ota_header("$executable_target_name.ota") {
      ota_header_script_name = "${root_out_dir}/${executable_target_name}.ota"
      out_dir = rebase_path(root_out_dir, root_build_dir)
      ota_header_generator = "${qpg_sdk_root}/Tools/Ota/generate_ota_img.py"

      ota_header_options = [
        "--header_version=1",
        "--xp400x",
        "--flash_start=${flash_start_addr}",
        "--flash_app_start_offset=${flash_app_start_offset}",
        "--compression",
        "lzma",
        "--matter",
      ]

      ota_header_options += [
        "--chip_root",
        rebase_path(chip_root, root_build_dir),
        "--chip_config_header",
        rebase_path(project_dir, root_build_dir) +
            "/include/CHIPProjectConfig.h",
      ]

      ota_header_options += [
        "--bl_image_file",
        "${out_dir}/bootloader_${qpg_target_ic}.hex",
        "--se_image_file",
        rebase_path(qpg_sdk_root, root_build_dir) +
            "/Tools/Binaries/se_firmware_release_xp4002_seuc_upgrade.hex",
        "--in_file",
        "${out_dir}/${app_signed_hex}",
        "--out_file",
        "${out_dir}/${invoker.output_name}.ota",
      ]

      ota_header_options += [
        "--developer-key",
        rebase_path(qpg_sdk_root, root_build_dir) +
            "/Tools/SecureBoot/developer_key_private.der",
        "--factory_data_config",
        rebase_path(qpg_sdk_root, root_build_dir) + "/Tools/QorvoPlatformTools/Matter/Credentials/test_${app_name}_qpg6200.factory_data_config",
      ]

      if (matter_ota_test_image) {
        ota_header_options += [ "-tui" ]
      }

      deps = [
        ":$app_signed_hex",
        "${chip_root}/third_party/qpg_sdk:qpg_bootloader",
      ]
    }
  } else {
    print("OTA Requestor disabled for ${app_name} from ${project_dir}")
    print("Unused: ${flash_start_addr} and ${flash_app_start_offset}")
  }

  hexmerge("$output_merged_hex") {
    out_dir = rebase_path(root_out_dir, root_build_dir)
    hexmerge_output_name = "${root_out_dir}/gen/$output_merged_hex"
    hexmerge_generator = "${qpg_sdk_root}/Tools/Hex/hexmerge.py"
    hexmerge_arguments = [
      "${out_dir}/${output_merged_hex}",
      "${out_dir}/${app_signed_hex}",
      "${out_dir}/bootloader_${qpg_target_ic}.hex",
      "${out_dir}/${output_base_name}.factorydata.hex",
      "--ignore_start_execution_addr",
    ]
    deps = [
      ":$app_signed_hex",
      "${chip_root}/third_party/qpg_sdk:qpg_bootloader",
    ]
  }

  hexfill("${output_hex}") {
    out_dir = rebase_path(root_out_dir, root_build_dir)
    hexfill_output_name = "${root_out_dir}/${output_hex}"
    hexfill_generator = "${qpg_sdk_root}/Tools/Hex/hexfill.py"
    hexfill_arguments = [
      "${out_dir}/${output_merged_hex}",
      "${out_dir}/${output_hex}",
      "--endex",
      "${nvm_end_addr}",
      "--start",
      "${nvm_start_addr}",
      "--value",
      "0x0",
      "--ignore_start_execution_addr",
    ]

    deps = [ ":$output_merged_hex" ]
  }

  group(qpg_target_name) {
    data_deps = [ ":${invoker.output_name}.hex" ]
    if (chip_enable_ota_requestor) {
      data_deps += [ ":$executable_target_name.ota" ]
    }

    if (defined(invoker.data_deps)) {
      data_deps += invoker.data_deps
    }
  }
}
