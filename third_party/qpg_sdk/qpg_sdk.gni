# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/openthread.gni")
import("//build_overrides/qpg_sdk.gni")
import("qpg_platform.gni")

declare_args() {
  # Location of the QPG SDK.
  qpg_sdk_root = "${chip_root}/third_party/qpg_sdk/repo"

  # Subdirectory in qpg_sdk_root where the binary library builds (.a) are to be found
  qpg_sdk_lib_dir = "Work"

  # An option to disable referencing qorvo object archive files (*.a)
  qpg_sdk_include_platform_libs = true

  # Enable Sleepy end device
  enable_sleepy_device = false

  # OTA parameters
  matter_device_vid = ""
  matter_device_pid = ""
  matter_ota_test_image = false
}

declare_args() {
  # Root directory for FreeRTOS
  freertos_root = "${qpg_sdk_root}/Components/ThirdParty/FreeRTOS"
}

template("qpg_sdk") {
  assert(qpg_sdk_root != "", "qpg_sdk_root must be specified")
  assert(qpg_target_ic != "", "qpg_target_ic must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    defines = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    include_dirs += [
      "${qpg_sdk_root}/Components/Qorvo/Matter/qvCHIP/inc",
      "${qpg_sdk_root}/Components/ThirdParty/ARM/mbedtls/v3.3.0/include",
      "${qpg_sdk_root}/Libraries/Qorvo/mbedtls_alt/inc",
      "${qpg_sdk_root}/Components/Qorvo/BSP/qPinCfg/inc",
      "${qpg_sdk_root}/Components/Qorvo/BSP/qPinCfg/inc/boards",
      "${qpg_sdk_root}/Components/Qorvo/BSP/qPinCfg/inc/qpg6200",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpPeripheral/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpPeripheral/xp400x/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpPeripheral/xp4002/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpRegMap/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpRegMap/xp4002/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/halCortexM4/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/halCortexM4/xp4002/inc",
      "${qpg_sdk_root}/Components/ThirdParty/mera/sw/appuc",
      "${qpg_sdk_root}/Components/ThirdParty/mera/sw/sys_regmap",
      "${qpg_sdk_root}/Components/ThirdParty/mera/sw/regmap",
      "${qpg_sdk_root}/Components/ThirdParty/CMSIS_5/CMSIS/Core/Include",
      "${qpg_sdk_root}/Components/Qorvo/BSP/gpBsp/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/halPlatform/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/halPlatform/xp4002/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_RF/gphal/inc",
      "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/gpRap/xp4002/inc",
      "${qpg_sdk_root}/Components/Qorvo/BaseUtils/gpBatteryMonitor/inc",
    ]

    lib_dirs = []

    #MBed TLS built from third_party/mbedtls tree - OT config not used
    defines = [ "MBEDTLS_CONFIG_FILE=\"${qpg_target_ic}-mbedtls-config.h\"" ]

    # Overrule CHIPProjectConfig.h settings
    if (matter_device_vid != "") {
      defines += [ "CHIP_DEVICE_CONFIG_DEVICE_VENDOR_ID=${matter_device_vid}" ]
    }
    if (matter_device_pid != "") {
      defines += [ "CHIP_DEVICE_CONFIG_DEVICE_PRODUCT_ID=${matter_device_pid}" ]
    }
    if (matter_ota_test_image) {
      defines += [ "OTA_TEST_IMAGE" ]
    }

    if (qpg_target_ic == "qpg6200") {
      defines += [
        "QPG6200",
        "QPINCFG_BOARD_FILENAME=\"qPinCfg_IoTCarrierBoard_qpg6200.h\"",
        "GP_COMPONENT_ID_HALCORTEXM4",
        "GP_COMPONENT_ID_APP=1",
        "Q_DRV_IRQ_PRIO_HIGH=configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY",
      ]

      defines += [
        "CRYPTO",
        "ESEC_AUTH_ALGO=ESEC_AUTH_ALGO_ECDSA_P256",
        "ESEC_PUBKEY_HASH_ALGO=ESEC_HASH_ALGO_SHA256",
        "HOST_VERSION=0",
      ]
      include_dirs += [
        "${qpg_sdk_root}/Components/ThirdParty/secure_element/software/host/libs/mbedtls_alt/inc",
        "${qpg_sdk_root}/Components/ThirdParty/secure_element/software/host/libs/esecure/include/",
      ]
      if (chip_crypto == "psa") {
        # activate the right headers (*_se.h) for crypto hw accel
        defines += [ "PSA_CRYPTO_IMPLEMENTED" ]
      }
    } else {
      include_dirs += [ "${qpg_sdk_root}/Components/ThirdParty/Silex/cryptosoc/mbedtls_alt_3.3.0" ]
    }

    if (mbedtls_alt_enabled) {
      defines += [ "QORVO_CRYPTO_ENGINE" ]
    } else {
      defines += [ "MBEDTLS_SW_ONLY" ]
    }

    #Wundef fix - to be updated in SDK
    defines += [ "GP_SCHED_NR_OF_IDLE_CALLBACKS=0" ]

    cflags = [ "-Wundef" ]

    # Allow warning due to mbedtls
    cflags += [
      "-Wno-maybe-uninitialized",
      "-Wno-shadow",
    ]

    # Inherit defines from invoker (i.e. examples app)
    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    if (defined(invoker.enable_sleepy_device)) {
      if (invoker.enable_sleepy_device) {
        defines += [ "CHIP_DEVICE_CONFIG_ENABLE_SED=1" ]
      } else {
        defines += [ "CHIP_DEVICE_CONFIG_ENABLE_SED=0" ]
        if (invoker.chip_openthread_ftd) {
          defines += [ "CHIP_DEVICE_CONFIG_THREAD_FTD=1" ]
        } else {
          defines += [ "CHIP_DEVICE_CONFIG_THREAD_FTD=0" ]
        }
      }
    }
  }

  source_set(sdk_target_name) {
    public_configs = [
      ":${sdk_target_name}_config",
      "${chip_root}/third_party/qpg_sdk:qpg_freertos_config",
    ]
    public_deps = []
    if (qpg_sdk_include_platform_libs) {
      public_deps += [
        "${chip_root}/third_party/qpg_sdk:qpg_bootloader",
        "${chip_root}/third_party/qpg_sdk:qpg_glue_lib",
        "${chip_root}/third_party/qpg_sdk:qpg_openthread_glue_lib",
        "${chip_root}/third_party/qpg_sdk:qpg_stack_lib",
      ]

      if (mbedtls_alt_enabled) {
        public_deps +=
            [ "${chip_root}/third_party/qpg_sdk:qpg_mbedtls_alt_lib" ]
      }
    }
  }
}
