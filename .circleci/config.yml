### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
version: 2
jobs:
  Run Tests [docker-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: docker-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-docker-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build mbedtls-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build ubuntu-16-lts" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
  Run Tests [mbedtls-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: mbedtls-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-mbedtls-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build mbedtls-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build ubuntu-16-lts" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
  Build Examples [nRF]:
    docker:
    - image: connectedhomeip/chip-build-nrf-platform:0.2.11
    environment:
    - BUILD_TYPE: nrf-build
    steps:
    - checkout
    - run:
        command: scripts/examples/nrf_lock_app.sh
        name: Build example nRF5 Lock App
  Deploy [docker-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: docker-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-docker-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/build/distribution_check.sh
        name: Deployment Check
  Code Coverage [docker-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: docker-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-docker-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-docker-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/codecoverage.sh
        name: Run Code Coverage
    - run:
        command: bash <(curl -s https://codecov.io/bash)
        name: Upload Code Coverage
  Build CHIP [mbedtls-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: mbedtls-build
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-mbedtls-build-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
        paths:
        - build/downloads
  Build CHIP [ubuntu-16-lts]:
    machine:
      image: ubuntu-1604:202004-01
    environment:
    - BUILD_TYPE: ubuntu-16-lts
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-ubuntu-16-lts-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-ubuntu-16-lts-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-ubuntu-16-lts-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-ubuntu-16-lts-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-ubuntu-16-lts-built
        paths:
        - build/downloads
  Build Examples [ESP32]:
    docker:
    - image: connectedhomeip/chip-build-esp32:0.2.11
    environment:
    - BUILD_TYPE: esp32-build
    steps:
    - checkout
    - run:
        command: scripts/examples/esp_echo_app.sh
        name: Build example Echo App
  Run Tests [ubuntu-16-lts]:
    machine:
      image: ubuntu-1604:202004-01
    environment:
    - BUILD_TYPE: ubuntu-16-lts
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-ubuntu-16-lts-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-ubuntu-16-lts-built
    - restore_cache:
        key: build-environment-{{ arch }}-ubuntu-16-lts-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build mbedtls-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build ubuntu-16-lts" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "docker-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
  Build CHIP [docker-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: docker-build
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-docker-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-docker-build-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-docker-build-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-docker-build-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-docker-build-built
        paths:
        - build/downloads
workflows:
  Main:
    jobs:
    - Build CHIP [docker-build]
    - Build CHIP [mbedtls-build]
    - Build CHIP [ubuntu-16-lts]
    - Run Tests [docker-build]:
        requires:
        - Build CHIP [docker-build]
    - Run Tests [mbedtls-build]:
        requires:
        - Build CHIP [mbedtls-build]
    - Run Tests [ubuntu-16-lts]:
        requires:
        - Build CHIP [ubuntu-16-lts]
    - Code Coverage [docker-build]:
        requires:
        - Build CHIP [docker-build]
    - Deploy [docker-build]:
        requires:
        - Run Tests [docker-build]
    - Build Examples [nRF]
    - Build Examples [ESP32]
  version: 2

# Original config.yml file:
# commands:
#   bootstrap:
#     description: Bootstrap the source tree
#     steps:
#     - run:
#         command: scripts/build/bootstrap.sh
#         name: Bootstrap
#   load-bootstrapped-tree:
#     description: Load the bootstrapped tree
#     parameters:
#       builder:
#         type: string
#     steps:
#     - restore_cache:
#         key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1
#           }}-<< parameters.builder>>-built
#   load-build-environment:
#     description: Load the build environment
#     parameters:
#       builder:
#         type: string
#     steps:
#     - restore_cache:
#         key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1
#           }}-<< parameters.builder>>-built
#   load-built-tree:
#     description: Load the built tree
#     parameters:
#       builder:
#         type: string
#     steps:
#     - restore_cache:
#         key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-<< parameters.builder>>-built
#   load-persistent-ci-cache:
#     description: Load persistent CI Cache
#     parameters:
#       builder:
#         type: string
#     steps:
#     - restore_cache:
#         key: build-environment-{{ arch }}-<<parameters.builder>>-persistent-cache
#   save-bootstrapped-tree:
#     description: Save the bootstrapped tree
#     parameters:
#       builder:
#         type: string
#     steps:
#     - save_cache:
#         key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1
#           }}-<< parameters.builder>>-built
#         paths:
#         - .
#   save-build-environment:
#     description: Save the build environment
#     parameters:
#       builder:
#         type: string
#     steps:
#     - save_cache:
#         key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1
#           }}-<< parameters.builder>>-built
#         paths:
#         - build/downloads
#   save-built-tree:
#     description: Save the built tree
#     parameters:
#       builder:
#         type: string
#     steps:
#     - save_cache:
#         key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-<< parameters.builder>>-built
#         paths:
#         - .
#   save-persistent-ci-cache:
#     description: Save persistent CI Cache
#     parameters:
#       builder:
#         type: string
#     steps:
#     - save_cache:
#         key: build-environment-{{ arch }}-<<parameters.builder>>-persistent-cache
#         paths:
#         - ./ci-cache-persistent
#   setup-environment:
#     description: Setup Environment
#     parameters:
#       builder:
#         type: string
#     steps:
#     - run:
#         command: scripts/tools/run_if.sh \"ubuntu-16-lts\" \"$BUILD_TYPE\" sudo scripts/setup/linux/install_packages.sh
#         name: Setup Environment
# executors:
#   docker-build:
#     docker:
#     - image: connectedhomeip/chip-build:0.2.11
#   esp32-build:
#     docker:
#     - image: connectedhomeip/chip-build-esp32:0.2.11
#   mbedtls-build:
#     docker:
#     - image: connectedhomeip/chip-build:0.2.11
#   nrf-build:
#     docker:
#     - image: connectedhomeip/chip-build-nrf-platform:0.2.11
#   ubuntu-16-lts:
#     machine:
#       image: ubuntu-1604:202004-01
# jobs:
#   build:
#     environment:
#       BUILD_TYPE: << parameters.builder >>
#     executor: << parameters.builder >>
#     parameters:
#       builder:
#         type: string
#     steps:
#     - checkout
#     - load-persistent-ci-cache:
#         builder: << parameters.builder >>
#     - setup-environment:
#         builder: << parameters.builder >>
#     - save-persistent-ci-cache:
#         builder: << parameters.builder >>
#     - bootstrap
#     - save-bootstrapped-tree:
#         builder: << parameters.builder >>
#     - run:
#         command: scripts/build/default.sh
#         name: Build
#     - save-built-tree:
#         builder: << parameters.builder >>
#     - save-build-environment:
#         builder: << parameters.builder >>
#   code-coverage:
#     environment:
#       BUILD_TYPE: << parameters.builder >>
#     executor: << parameters.builder >>
#     parameters:
#       builder:
#         type: string
#     steps:
#     - load-built-tree:
#         builder: << parameters.builder >>
#     - load-build-environment:
#         builder: << parameters.builder >>
#     - load-persistent-ci-cache:
#         builder: << parameters.builder >>
#     - setup-environment:
#         builder: << parameters.builder >>
#     - run:
#         command: scripts/tools/codecoverage.sh
#         name: Run Code Coverage
#     - run:
#         command: bash <(curl -s https://codecov.io/bash)
#         name: Upload Code Coverage
#   deploy:
#     environment:
#       BUILD_TYPE: << parameters.builder >>
#     executor: << parameters.builder >>
#     parameters:
#       builder:
#         type: string
#     steps:
#     - load-built-tree:
#         builder: << parameters.builder >>
#     - load-build-environment:
#         builder: << parameters.builder >>
#     - load-persistent-ci-cache:
#         builder: << parameters.builder >>
#     - setup-environment:
#         builder: << parameters.builder >>
#     - run:
#         command: scripts/build/distribution_check.sh
#         name: Deployment Check
#   examples_esp32:
#     environment:
#       BUILD_TYPE: esp32-build
#     executor: esp32-build
#     steps:
#     - checkout
#     - run:
#         command: scripts/examples/esp_echo_app.sh
#         name: Build example Echo App
#   examples_nrf:
#     environment:
#       BUILD_TYPE: nrf-build
#     executor: nrf-build
#     steps:
#     - checkout
#     - run:
#         command: scripts/examples/nrf_lock_app.sh
#         name: Build example nRF5 Lock App
#   test:
#     environment:
#       BUILD_TYPE: << parameters.builder >>
#     executor: << parameters.builder >>
#     parameters:
#       builder:
#         type: string
#       run_setup_payload_tests:
#         default: true
#         type: boolean
#     steps:
#     - load-built-tree:
#         builder: << parameters.builder >>
#     - load-build-environment:
#         builder: << parameters.builder >>
#     - load-persistent-ci-cache:
#         builder: << parameters.builder >>
#     - setup-environment:
#         builder: << parameters.builder >>
#     - run:
#         command: scripts/tools/run_if.sh \"mbedtls-build\" \"$BUILD_TYPE\" scripts/tests/mbedtls_tests.sh
#         name: Run mbedTLS Tests
#     - run:
#         command: scripts/tools/run_if.sh \"docker-build mbedtls-build\" \"$BUILD_TYPE\"
#           scripts/tests/crypto_tests.sh
#         name: Run Crypto Tests
#     - run:
#         command: scripts/tools/run_if.sh \"docker-build ubuntu-16-lts\" \"$BUILD_TYPE\"
#           scripts/tests/setup_payload_tests.sh
#         name: Run Setup Payload Tests
#     - run:
#         command: scripts/tools/run_if.sh \"docker-build\" \"$BUILD_TYPE\" scripts/tests/openssl_tests.sh
#         name: OpenSSL Tests
#     - run:
#         command: scripts/tools/run_if.sh \"docker-build\" \"$BUILD_TYPE\" scripts/tests/all_tests.sh
#         name: Run All Unit & Functional Tests
# version: 2.1
# workflows:
#   Main:
#     jobs:
#     - build:
#         matrix:
#           parameters:
#             builder:
#             - docker-build
#             - mbedtls-build
#             - ubuntu-16-lts
#         name: Build CHIP [<< matrix.builder >>]
#     - test:
#         matrix:
#           parameters:
#             builder:
#             - docker-build
#             - mbedtls-build
#             - ubuntu-16-lts
#         name: Run Tests [<< matrix.builder >>]
#         requires:
#         - Build CHIP [<< matrix.builder >>]
#     - code-coverage:
#         matrix:
#           parameters:
#             builder:
#             - docker-build
#         name: Code Coverage [<< matrix.builder >>]
#         requires:
#         - Build CHIP [<< matrix.builder >>]
#     - deploy:
#         matrix:
#           parameters:
#             builder:
#             - docker-build
#         name: Deploy [<< matrix.builder >>]
#         requires:
#         - Run Tests [<< matrix.builder >>]
#     - examples_nrf:
#         name: Build Examples [nRF]
#     - examples_esp32:
#         name: Build Examples [ESP32]