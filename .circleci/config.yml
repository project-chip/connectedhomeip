### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
version: 2
jobs:
  Run Tests [mbedtls-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' --with-crypto=mbedtls'
    - BUILD_TYPE: mbedtls-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-mbedtls-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "main-build mbedtls-build clang-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "main-build ubuntu-16-lts clang-build" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "linux-embedded" "$BUILD_TYPE" make -C build/default/src/platform check
        name: Run Platform Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
    - run:
        command: scripts/tests/save_logs.sh /tmp/test_logs
        name: Save test log files
        when: on_fail
    - store_artifacts:
        path: /tmp/test_logs
  Build Examples [nRF]:
    docker:
    - image: connectedhomeip/chip-build-nrf-platform:0.2.11
    environment:
    - BUILD_TYPE: nrf-build
    steps:
    - checkout
    - run:
        command: scripts/examples/nrf_lock_app.sh
        name: Build example nRF5 Lock App
    - run:
        command: |
          mkdir -p example_binaries/nrf-build
          cp examples/lock-app/nrf5/build/chip-nrf52840-lock-example.out \
             example_binaries/nrf-build/chip-nrf52840-lock-example.out
        name: Preserve artifacts
    - store_artifacts:
        path: example_binaries/nrf-build
  Deploy [main-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: main-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-main-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/build/distribution_check.sh
        name: Deployment Check
  Build Examples [main-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: main-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-main-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/examples/standalone_echo_client.sh
        name: Build example Standalone Echo Client
    - run:
        command: |
          mkdir -p example_binaries/main-build
          cp examples/chip-tool/build/chip-standalone-demo.out \
             example_binaries/main-build/chip-standalone-demo.out
        name: Preserve artifacts
    - store_artifacts:
        path: example_binaries/main-build
  Run Tests [ESP32-QEMU]:
    docker:
    - image: connectedhomeip/chip-build-esp32-qemu:0.2.11
    environment:
    - BUILD_TYPE: esp32-qemu-build
    steps:
    - checkout
    - run:
        command: scripts/tests/esp32_qemu_tests.sh
        name: Build ESP32 QEMU and Run Tests
  Build CHIP [mbedtls-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' --with-crypto=mbedtls'
    - BUILD_TYPE: mbedtls-build
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-mbedtls-build-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh $BOOTSTRAP_ARGUMENTS
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-mbedtls-build-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-mbedtls-build-built
        paths:
        - build/downloads
  Run Tests [linux-embedded]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' --with-device-layer=linux'
    - BUILD_TYPE: linux-embedded
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-linux-embedded-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-linux-embedded-built
    - restore_cache:
        key: build-environment-{{ arch }}-linux-embedded-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "main-build mbedtls-build clang-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "main-build ubuntu-16-lts clang-build" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "linux-embedded" "$BUILD_TYPE" make -C build/default/src/platform check
        name: Run Platform Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
    - run:
        command: scripts/tests/save_logs.sh /tmp/test_logs
        name: Save test log files
        when: on_fail
    - store_artifacts:
        path: /tmp/test_logs
  Build CHIP [linux-embedded]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' --with-device-layer=linux'
    - BUILD_TYPE: linux-embedded
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-linux-embedded-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-linux-embedded-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh $BOOTSTRAP_ARGUMENTS
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-linux-embedded-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-linux-embedded-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-linux-embedded-built
        paths:
        - build/downloads
  Build CHIP [main-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: main-build
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-main-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-main-build-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh $BOOTSTRAP_ARGUMENTS
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-main-build-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-main-build-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-main-build-built
        paths:
        - build/downloads
  Build Examples [ESP32]:
    docker:
    - image: connectedhomeip/chip-build-esp32:0.2.11
    environment:
    - BUILD_TYPE: esp32-build
    steps:
    - checkout
    - run:
        command: scripts/examples/esp_echo_app.sh
        name: Build example Echo App
    - run:
        command: |
          mkdir -p example_binaries/esp32-build
          cp examples/wifi-echo/server/esp32/build/chip-wifi-echo.elf \
             example_binaries/esp32-build/chip-wifi-echo.elf
        name: Preserve artifacts
    - store_artifacts:
        path: example_binaries/esp32-build
  Run Tests [clang-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' CC=clang-9 CXX=clang++-9'
    - BUILD_TYPE: clang-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-clang-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-clang-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-clang-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "main-build mbedtls-build clang-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "main-build ubuntu-16-lts clang-build" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "linux-embedded" "$BUILD_TYPE" make -C build/default/src/platform check
        name: Run Platform Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
    - run:
        command: scripts/tests/save_logs.sh /tmp/test_logs
        name: Save test log files
        when: on_fail
    - store_artifacts:
        path: /tmp/test_logs
  Build CHIP [clang-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BOOTSTRAP_ARGUMENTS: ' CC=clang-9 CXX=clang++-9'
    - BUILD_TYPE: clang-build
    steps:
    - checkout
    - restore_cache:
        key: build-environment-{{ arch }}-clang-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - save_cache:
        key: build-environment-{{ arch }}-clang-build-persistent-cache
        paths:
        - ./ci-cache-persistent
    - run:
        command: scripts/build/bootstrap.sh $BOOTSTRAP_ARGUMENTS
        name: Bootstrap
    - save_cache:
        key: bootstrapped-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-clang-build-built
        paths:
        - .
    - run:
        command: scripts/build/default.sh
        name: Build
    - save_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-clang-build-built
        paths:
        - .
    - save_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-clang-build-built
        paths:
        - build/downloads
  Run Tests [main-build]:
    docker:
    - image: connectedhomeip/chip-build:0.2.11
    environment:
    - BUILD_TYPE: main-build
    steps:
    - restore_cache:
        key: built-tree-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1}}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-{{ .Branch}}-{{.Environment.CIRCLE_SHA1 }}-main-build-built
    - restore_cache:
        key: build-environment-{{ arch }}-main-build-persistent-cache
    - run:
        command: scripts/tools/run_if.sh "ubuntu-16-lts" "$BUILD_TYPE" sudo scripts/setup/linux/install_packages.sh
        name: Setup Environment
    - run:
        command: scripts/tools/run_if.sh "mbedtls-build" "$BUILD_TYPE" scripts/tests/mbedtls_tests.sh
        name: Run mbedTLS Tests
    - run:
        command: scripts/tools/run_if.sh "main-build mbedtls-build clang-build" "$BUILD_TYPE" scripts/tests/crypto_tests.sh
        name: Run Crypto Tests
    - run:
        command: scripts/tools/run_if.sh "main-build ubuntu-16-lts clang-build" "$BUILD_TYPE" scripts/tests/setup_payload_tests.sh
        name: Run Setup Payload Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/openssl_tests.sh
        name: OpenSSL Tests
    - run:
        command: scripts/tools/run_if.sh "linux-embedded" "$BUILD_TYPE" make -C build/default/src/platform check
        name: Run Platform Tests
    - run:
        command: scripts/tools/run_if.sh "main-build clang-build" "$BUILD_TYPE" scripts/tests/all_tests.sh
        name: Run All Unit & Functional Tests
    - run:
        command: scripts/tests/save_logs.sh /tmp/test_logs
        name: Save test log files
        when: on_fail
    - store_artifacts:
        path: /tmp/test_logs
workflows:
  Main:
    jobs:
    - Build CHIP [main-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Build CHIP [mbedtls-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Build CHIP [clang-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Build CHIP [linux-embedded]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Run Tests [main-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Build CHIP [main-build]
    - Run Tests [mbedtls-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Build CHIP [mbedtls-build]
    - Run Tests [clang-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Build CHIP [clang-build]
    - Run Tests [linux-embedded]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Build CHIP [linux-embedded]
    - Run Tests [ESP32-QEMU]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Deploy [main-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Run Tests [main-build]
    - Build Examples [nRF]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Build Examples [ESP32]:
        filters:
          branches:
            ignore:
            - /restyled.*/
    - Build Examples [main-build]:
        filters:
          branches:
            ignore:
            - /restyled.*/
        requires:
        - Build CHIP [main-build]
  version: 2
