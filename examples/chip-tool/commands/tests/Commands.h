/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once

#include "TestCommand.h"

class TestCluster : public TestCommand
{
public:
    TestCluster() : TestCommand("TestCluster") {}

    /////////// TestCommand Interface /////////
    CHIP_ERROR NextTest() override
    {
        CHIP_ERROR err = CHIP_NO_ERROR;

        if (mTestCount == mTestIndex)
        {
            ChipLogProgress(chipTool, "TestCluster: Test complete");
            SetCommandExitStatus(true);
        }

        switch (mTestIndex)
        {
        case 0:
            err = TestSendClusterTestClusterCommandTest_0();
            break;
        case 1:
            err = TestSendClusterTestClusterCommandTestNotHandled_1();
            break;
        case 2:
            err = TestSendClusterTestClusterCommandTestSpecific_2();
            break;
        case 3:
            err = TestSendClusterTestClusterCommandWriteAttribute_3();
            break;
        case 4:
            err = TestSendClusterTestClusterCommandReadAttribute_4();
            break;
        }
        mTestIndex++;

        if (CHIP_NO_ERROR != err)
        {
            ChipLogProgress(chipTool, "TestCluster: %s", chip::ErrorStr(err));
            SetCommandExitStatus(false);
        }

        return err;
    }

private:
    uint16_t mTestIndex = 0;
    uint16_t mTestCount = 5;

    //
    // Tests methods
    //

    // Test Send Test Command
    typedef void (*SuccessCallback_0)(void * context);
    chip::Callback::Callback<SuccessCallback_0> * mOnSuccessCallback_0      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_0 = nullptr;
    bool mIsFailureExpected_0                                               = 0;

    CHIP_ERROR TestSendClusterTestClusterCommandTest_0()
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Command: Sending command...");

        mOnFailureCallback_0 =
            new chip::Callback::Callback<DefaultFailureCallback>(OnTestSendClusterTestClusterCommandTest_0_FailureResponse, this);
        mOnSuccessCallback_0 =
            new chip::Callback::Callback<SuccessCallback_0>(OnTestSendClusterTestClusterCommandTest_0_SuccessResponse, this);

        chip::Controller::TestClusterCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.Test(mOnSuccessCallback_0->Cancel(), mOnFailureCallback_0->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_0;
            delete mOnSuccessCallback_0;
        }

        return err;
    }

    static void OnTestSendClusterTestClusterCommandTest_0_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Command: Failure Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_0;
        delete runner->mOnSuccessCallback_0;

        if (runner->mIsFailureExpected_0 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterTestClusterCommandTest_0_SuccessResponse(void * context)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Command: Success Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_0;
        delete runner->mOnSuccessCallback_0;

        if (runner->mIsFailureExpected_0 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Send Test Not Handled Command
    typedef void (*SuccessCallback_1)(void * context);
    chip::Callback::Callback<SuccessCallback_1> * mOnSuccessCallback_1      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_1 = nullptr;
    bool mIsFailureExpected_1                                               = 1;

    CHIP_ERROR TestSendClusterTestClusterCommandTestNotHandled_1()
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Not Handled Command: Sending command...");

        mOnFailureCallback_1 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterTestClusterCommandTestNotHandled_1_FailureResponse, this);
        mOnSuccessCallback_1 = new chip::Callback::Callback<SuccessCallback_1>(
            OnTestSendClusterTestClusterCommandTestNotHandled_1_SuccessResponse, this);

        chip::Controller::TestClusterCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.TestNotHandled(mOnSuccessCallback_1->Cancel(), mOnFailureCallback_1->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_1;
            delete mOnSuccessCallback_1;
        }

        return err;
    }

    static void OnTestSendClusterTestClusterCommandTestNotHandled_1_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Not Handled Command: Failure Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_1;
        delete runner->mOnSuccessCallback_1;

        if (runner->mIsFailureExpected_1 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterTestClusterCommandTestNotHandled_1_SuccessResponse(void * context)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Not Handled Command: Success Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_1;
        delete runner->mOnSuccessCallback_1;

        if (runner->mIsFailureExpected_1 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Send Test Specific Command
    typedef void (*SuccessCallback_2)(void * context, uint8_t returnValue);
    chip::Callback::Callback<SuccessCallback_2> * mOnSuccessCallback_2      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_2 = nullptr;
    bool mIsFailureExpected_2                                               = 0;

    CHIP_ERROR TestSendClusterTestClusterCommandTestSpecific_2()
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Specific Command: Sending command...");

        mOnFailureCallback_2 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterTestClusterCommandTestSpecific_2_FailureResponse, this);
        mOnSuccessCallback_2 = new chip::Callback::Callback<SuccessCallback_2>(
            OnTestSendClusterTestClusterCommandTestSpecific_2_SuccessResponse, this);

        chip::Controller::TestClusterCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.TestSpecific(mOnSuccessCallback_2->Cancel(), mOnFailureCallback_2->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_2;
            delete mOnSuccessCallback_2;
        }

        return err;
    }

    static void OnTestSendClusterTestClusterCommandTestSpecific_2_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Specific Command: Failure Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_2;
        delete runner->mOnSuccessCallback_2;

        if (runner->mIsFailureExpected_2 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterTestClusterCommandTestSpecific_2_SuccessResponse(void * context, uint8_t returnValue)
    {
        ChipLogProgress(chipTool, "Test Cluster - Send Test Specific Command: Success Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_2;
        delete runner->mOnSuccessCallback_2;

        if (runner->mIsFailureExpected_2 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        if (returnValue != 7)
        {
            ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "7");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Write attribute BOOLEAN
    typedef void (*SuccessCallback_3)(void * context, uint8_t boolean);
    chip::Callback::Callback<SuccessCallback_3> * mOnSuccessCallback_3      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_3 = nullptr;
    bool mIsFailureExpected_3                                               = 0;

    CHIP_ERROR TestSendClusterTestClusterCommandWriteAttribute_3()
    {
        ChipLogProgress(chipTool, "Test Cluster - Write attribute BOOLEAN: Sending command...");

        mOnFailureCallback_3 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterTestClusterCommandWriteAttribute_3_FailureResponse, this);
        mOnSuccessCallback_3 = new chip::Callback::Callback<SuccessCallback_3>(
            OnTestSendClusterTestClusterCommandWriteAttribute_3_SuccessResponse, this);

        chip::Controller::TestClusterCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.WriteAttributeBoolean(mOnSuccessCallback_3->Cancel(), mOnFailureCallback_3->Cancel(), 1);

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_3;
            delete mOnSuccessCallback_3;
        }

        return err;
    }

    static void OnTestSendClusterTestClusterCommandWriteAttribute_3_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "Test Cluster - Write attribute BOOLEAN: Failure Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_3;
        delete runner->mOnSuccessCallback_3;

        if (runner->mIsFailureExpected_3 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterTestClusterCommandWriteAttribute_3_SuccessResponse(void * context, uint8_t boolean)
    {
        ChipLogProgress(chipTool, "Test Cluster - Write attribute BOOLEAN: Success Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_3;
        delete runner->mOnSuccessCallback_3;

        if (runner->mIsFailureExpected_3 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Read attribute BOOLEAN
    typedef void (*SuccessCallback_4)(void * context, uint8_t boolean);
    chip::Callback::Callback<SuccessCallback_4> * mOnSuccessCallback_4      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_4 = nullptr;
    bool mIsFailureExpected_4                                               = 0;

    CHIP_ERROR TestSendClusterTestClusterCommandReadAttribute_4()
    {
        ChipLogProgress(chipTool, "Test Cluster - Read attribute BOOLEAN: Sending command...");

        mOnFailureCallback_4 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterTestClusterCommandReadAttribute_4_FailureResponse, this);
        mOnSuccessCallback_4 = new chip::Callback::Callback<SuccessCallback_4>(
            OnTestSendClusterTestClusterCommandReadAttribute_4_SuccessResponse, this);

        chip::Controller::TestClusterCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.ReadAttributeBoolean(mOnSuccessCallback_4->Cancel(), mOnFailureCallback_4->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_4;
            delete mOnSuccessCallback_4;
        }

        return err;
    }

    static void OnTestSendClusterTestClusterCommandReadAttribute_4_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "Test Cluster - Read attribute BOOLEAN: Failure Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_4;
        delete runner->mOnSuccessCallback_4;

        if (runner->mIsFailureExpected_4 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterTestClusterCommandReadAttribute_4_SuccessResponse(void * context, uint8_t boolean)
    {
        ChipLogProgress(chipTool, "Test Cluster - Read attribute BOOLEAN: Success Response");

        TestCluster * runner = reinterpret_cast<TestCluster *>(context);

        delete runner->mOnFailureCallback_4;
        delete runner->mOnSuccessCallback_4;

        if (runner->mIsFailureExpected_4 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        if (boolean != 1)
        {
            ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "1");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }
};

class OnOffCluster : public TestCommand
{
public:
    OnOffCluster() : TestCommand("OnOffCluster") {}

    /////////// TestCommand Interface /////////
    CHIP_ERROR NextTest() override
    {
        CHIP_ERROR err = CHIP_NO_ERROR;

        if (mTestCount == mTestIndex)
        {
            ChipLogProgress(chipTool, "OnOffCluster: Test complete");
            SetCommandExitStatus(true);
        }

        switch (mTestIndex)
        {
        case 0:
            err = TestSendClusterOnOffCommandReadAttribute_0();
            break;
        case 1:
            err = TestSendClusterOnOffCommandOn_1();
            break;
        case 2:
            err = TestSendClusterOnOffCommandReadAttribute_2();
            break;
        case 3:
            err = TestSendClusterOnOffCommandOff_3();
            break;
        case 4:
            err = TestSendClusterOnOffCommandReadAttribute_4();
            break;
        }
        mTestIndex++;

        if (CHIP_NO_ERROR != err)
        {
            ChipLogProgress(chipTool, "OnOffCluster: %s", chip::ErrorStr(err));
            SetCommandExitStatus(false);
        }

        return err;
    }

private:
    uint16_t mTestIndex = 0;
    uint16_t mTestCount = 5;

    //
    // Tests methods
    //

    // Test Check on/off attribute value is false when starting
    typedef void (*SuccessCallback_0)(void * context, uint8_t onOff);
    chip::Callback::Callback<SuccessCallback_0> * mOnSuccessCallback_0      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_0 = nullptr;
    bool mIsFailureExpected_0                                               = 0;

    CHIP_ERROR TestSendClusterOnOffCommandReadAttribute_0()
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false when starting: Sending command...");

        mOnFailureCallback_0 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterOnOffCommandReadAttribute_0_FailureResponse, this);
        mOnSuccessCallback_0 =
            new chip::Callback::Callback<SuccessCallback_0>(OnTestSendClusterOnOffCommandReadAttribute_0_SuccessResponse, this);

        chip::Controller::OnOffCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.ReadAttributeOnOff(mOnSuccessCallback_0->Cancel(), mOnFailureCallback_0->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_0;
            delete mOnSuccessCallback_0;
        }

        return err;
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_0_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false when starting: Failure Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_0;
        delete runner->mOnSuccessCallback_0;

        if (runner->mIsFailureExpected_0 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_0_SuccessResponse(void * context, uint8_t onOff)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false when starting: Success Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_0;
        delete runner->mOnSuccessCallback_0;

        if (runner->mIsFailureExpected_0 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        if (onOff != 0)
        {
            ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "0");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Send On Command
    typedef void (*SuccessCallback_1)(void * context);
    chip::Callback::Callback<SuccessCallback_1> * mOnSuccessCallback_1      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_1 = nullptr;
    bool mIsFailureExpected_1                                               = 0;

    CHIP_ERROR TestSendClusterOnOffCommandOn_1()
    {
        ChipLogProgress(chipTool, "On/Off - Send On Command: Sending command...");

        mOnFailureCallback_1 =
            new chip::Callback::Callback<DefaultFailureCallback>(OnTestSendClusterOnOffCommandOn_1_FailureResponse, this);
        mOnSuccessCallback_1 =
            new chip::Callback::Callback<SuccessCallback_1>(OnTestSendClusterOnOffCommandOn_1_SuccessResponse, this);

        chip::Controller::OnOffCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.On(mOnSuccessCallback_1->Cancel(), mOnFailureCallback_1->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_1;
            delete mOnSuccessCallback_1;
        }

        return err;
    }

    static void OnTestSendClusterOnOffCommandOn_1_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "On/Off - Send On Command: Failure Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_1;
        delete runner->mOnSuccessCallback_1;

        if (runner->mIsFailureExpected_1 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterOnOffCommandOn_1_SuccessResponse(void * context)
    {
        ChipLogProgress(chipTool, "On/Off - Send On Command: Success Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_1;
        delete runner->mOnSuccessCallback_1;

        if (runner->mIsFailureExpected_1 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Check on/off attribute value is true after on command
    typedef void (*SuccessCallback_2)(void * context, uint8_t onOff);
    chip::Callback::Callback<SuccessCallback_2> * mOnSuccessCallback_2      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_2 = nullptr;
    bool mIsFailureExpected_2                                               = 0;

    CHIP_ERROR TestSendClusterOnOffCommandReadAttribute_2()
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is true after on command: Sending command...");

        mOnFailureCallback_2 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterOnOffCommandReadAttribute_2_FailureResponse, this);
        mOnSuccessCallback_2 =
            new chip::Callback::Callback<SuccessCallback_2>(OnTestSendClusterOnOffCommandReadAttribute_2_SuccessResponse, this);

        chip::Controller::OnOffCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.ReadAttributeOnOff(mOnSuccessCallback_2->Cancel(), mOnFailureCallback_2->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_2;
            delete mOnSuccessCallback_2;
        }

        return err;
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_2_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is true after on command: Failure Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_2;
        delete runner->mOnSuccessCallback_2;

        if (runner->mIsFailureExpected_2 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_2_SuccessResponse(void * context, uint8_t onOff)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is true after on command: Success Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_2;
        delete runner->mOnSuccessCallback_2;

        if (runner->mIsFailureExpected_2 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        if (onOff != 1)
        {
            ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "1");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Send Off Command
    typedef void (*SuccessCallback_3)(void * context);
    chip::Callback::Callback<SuccessCallback_3> * mOnSuccessCallback_3      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_3 = nullptr;
    bool mIsFailureExpected_3                                               = 0;

    CHIP_ERROR TestSendClusterOnOffCommandOff_3()
    {
        ChipLogProgress(chipTool, "On/Off - Send Off Command: Sending command...");

        mOnFailureCallback_3 =
            new chip::Callback::Callback<DefaultFailureCallback>(OnTestSendClusterOnOffCommandOff_3_FailureResponse, this);
        mOnSuccessCallback_3 =
            new chip::Callback::Callback<SuccessCallback_3>(OnTestSendClusterOnOffCommandOff_3_SuccessResponse, this);

        chip::Controller::OnOffCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.Off(mOnSuccessCallback_3->Cancel(), mOnFailureCallback_3->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_3;
            delete mOnSuccessCallback_3;
        }

        return err;
    }

    static void OnTestSendClusterOnOffCommandOff_3_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "On/Off - Send Off Command: Failure Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_3;
        delete runner->mOnSuccessCallback_3;

        if (runner->mIsFailureExpected_3 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterOnOffCommandOff_3_SuccessResponse(void * context)
    {
        ChipLogProgress(chipTool, "On/Off - Send Off Command: Success Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_3;
        delete runner->mOnSuccessCallback_3;

        if (runner->mIsFailureExpected_3 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    // Test Check on/off attribute value is false after off command
    typedef void (*SuccessCallback_4)(void * context, uint8_t onOff);
    chip::Callback::Callback<SuccessCallback_4> * mOnSuccessCallback_4      = nullptr;
    chip::Callback::Callback<DefaultFailureCallback> * mOnFailureCallback_4 = nullptr;
    bool mIsFailureExpected_4                                               = 0;

    CHIP_ERROR TestSendClusterOnOffCommandReadAttribute_4()
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false after off command: Sending command...");

        mOnFailureCallback_4 = new chip::Callback::Callback<DefaultFailureCallback>(
            OnTestSendClusterOnOffCommandReadAttribute_4_FailureResponse, this);
        mOnSuccessCallback_4 =
            new chip::Callback::Callback<SuccessCallback_4>(OnTestSendClusterOnOffCommandReadAttribute_4_SuccessResponse, this);

        chip::Controller::OnOffCluster cluster;
        cluster.Associate(mDevice, 1);

        CHIP_ERROR err = CHIP_NO_ERROR;

        err = cluster.ReadAttributeOnOff(mOnSuccessCallback_4->Cancel(), mOnFailureCallback_4->Cancel());

        if (CHIP_NO_ERROR != err)
        {
            delete mOnFailureCallback_4;
            delete mOnSuccessCallback_4;
        }

        return err;
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_4_FailureResponse(void * context, uint8_t status)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false after off command: Failure Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_4;
        delete runner->mOnSuccessCallback_4;

        if (runner->mIsFailureExpected_4 == false)
        {
            ChipLogError(chipTool, "Error: The test was expecting a success callback. Got failure callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }

    static void OnTestSendClusterOnOffCommandReadAttribute_4_SuccessResponse(void * context, uint8_t onOff)
    {
        ChipLogProgress(chipTool, "On/Off - Check on/off attribute value is false after off command: Success Response");

        OnOffCluster * runner = reinterpret_cast<OnOffCluster *>(context);

        delete runner->mOnFailureCallback_4;
        delete runner->mOnSuccessCallback_4;

        if (runner->mIsFailureExpected_4 == true)
        {
            ChipLogError(chipTool, "Error: The test was expecting a failure callback. Got success callback");
            runner->SetCommandExitStatus(false);
            return;
        }

        if (onOff != 0)
        {
            ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "0");
            runner->SetCommandExitStatus(false);
            return;
        }

        runner->NextTest();
    }
};

void registerCommandsTests(Commands & commands)
{
    const char * clusterName = "Tests";

    commands_list clusterCommands = {
        make_unique<TestCluster>(),
        make_unique<OnOffCluster>(),
    };

    commands.Register(clusterName, clusterCommands);
}
