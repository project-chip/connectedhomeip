{{> header}}

#pragma once

#include <cstdint>

#include "ModelCommand.h"
#include "gen/CHIPClientCallbacks.h"
#include "gen/CHIPClusters.h"
#include <lib/core/CHIPSafeCasts.h>

static void OnDefaultSuccessResponse(void * context)
{
    ChipLogProgress(chipTool, "Default Success Response");

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnDefaultFailureResponse(void * context, uint8_t status)
{
    ChipLogProgress(chipTool, "Default Failure Response: 0x%02x", status);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(false);
}

static void OnBooleanAttributeResponse(void * context, bool value)
{
    ChipLogProgress(chipTool, "Boolean attribute Response: %d", value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt8uAttributeResponse(void * context, uint8_t value)
{
    ChipLogProgress(chipTool, "Int8u attribute Response: %" PRIu8, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt16uAttributeResponse(void * context, uint16_t value)
{
    ChipLogProgress(chipTool, "Int16u attribute Response: %" PRIu16, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt32uAttributeResponse(void * context, uint32_t value)
{
    ChipLogProgress(chipTool, "Int32u attribute Response: %" PRIu32, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt64uAttributeResponse(void * context, uint64_t value)
{
    ChipLogProgress(chipTool, "Int64u attribute Response: %" PRIu64, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt8sAttributeResponse(void * context, int8_t value)
{
    ChipLogProgress(chipTool, "Int8s attribute Response: %" PRId8, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt16sAttributeResponse(void * context, int16_t value)
{
    ChipLogProgress(chipTool, "Int16s attribute Response: %" PRId16, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt32sAttributeResponse(void * context, int32_t value)
{
    ChipLogProgress(chipTool, "Int32s attribute Response: %" PRId32, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnInt64sAttributeResponse(void * context, int64_t value)
{
    ChipLogProgress(chipTool, "Int64s attribute Response: %" PRId64, value);

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

static void OnStringAttributeResponse(void * context, const chip::ByteSpan value)
{
    ChipLogProgress(chipTool, "String attribute Response: %zu", value.size());

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

{{#chip_client_clusters}}
{{#if (user_cluster_has_enabled_command name side)}}
{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
{{#if (isStrEndsWith name "Response")}}
static void On{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}(void * context{{#zcl_command_arguments}}{{#unless (isStrEqual label "status")}}, {{#if (isOctetString type)}}chip::ByteSpan{{else}}{{asUnderlyingZclType type}}{{/if}} {{asSymbol label}}{{/unless}}{{/zcl_command_arguments}})
{
    ChipLogProgress(chipTool, "{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}");

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

{{/if}}
{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{/if}}
{{/chip_client_clusters}}

{{#chip_client_clusters}}
{{#chip_server_cluster_attributes}}
{{#if isList}}
static void On{{asCamelCased parent.name false}}{{asCamelCased name false}}ListAttributeResponse(void * context, uint16_t count, {{chipType}} * entries)
{
    ChipLogProgress(chipTool, "On{{asCamelCased parent.name false}}{{asCamelCased name false}}ListAttributeResponse: %lu entries", count);

    for (uint16_t i = 0; i < count; i++)
    {
        {{#if isStruct}}
        ChipLogProgress(chipTool, "{{type}}[%lu]:", i);
        {{#chip_attribute_list_entryTypes}}
        {{#if (isOctetString type)}}
        ChipLogProgress(Zcl, "  {{asSymbol label}}: %zu", entries[i].{{name}}.size());
        {{else if (isCharString type)}}
        // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits chip::ByteSpan
        // ChipLogProgress(Zcl, "  {{asSymbol label}}: %.*s", entries[i].{{name}}.size(), entries[i].{{name}}.data());
        {{else}}
        ChipLogProgress(chipTool, "  {{name}}: {{asPrintFormat type}}", entries[i].{{name}});
        {{/if}}
        {{/chip_attribute_list_entryTypes}}
        {{else}}
        {{#if (isOctetString type)}}
        ChipLogProgress(Zcl, "  {{asSymbol label}}: %zu", entries[i].size());
        {{else if (isCharString type)}}
        ChipLogProgress(Zcl, "  {{asSymbol label}}: %.*s", entries[i].size(), entries[i].data());
        {{else}}
        ChipLogProgress(chipTool, "{{type}}[%lu]: {{asPrintFormat type}}", i, entries[i]);
        {{/if}}
        {{/if}}
    }

    ModelCommand * command = reinterpret_cast<ModelCommand *>(context);
    command->SetCommandExitStatus(true);
}

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}

{{> clusters_header}}

{{#chip_client_clusters}}
constexpr chip::ClusterId k{{asCamelCased name false}}ClusterId = {{asHex code 4}};
{{/chip_client_clusters}}

{{#chip_client_clusters}}
{{> cluster_header}}

{{#chip_server_cluster_commands}}
/*
 * Command {{asCamelCased name false}}
 */
class {{asCamelCased clusterName false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    {{asCamelCased clusterName false}}{{asCamelCased name false}}(): ModelCommand("{{asDelimitedCommand name}}")
    {
        {{#chip_server_cluster_command_arguments}}
        {{#if (isString type)}}
        AddArgument("{{asCamelCased label}}", &m{{asCamelCased label false}});
        {{else}}
        AddArgument("{{asCamelCased label}}", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &m{{asCamelCased label false}});
        {{/if}}
        {{/chip_server_cluster_command_arguments}}
        ModelCommand::AddArguments();
    }
    ~{{asCamelCased clusterName false}}{{asCamelCased name false}}()
    {
      delete onSuccessCallback;
      delete onFailureCallback;
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command ({{asHex code 2}}) on endpoint %" PRIu16, endpointId);

        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.{{asCamelCased name false}}(onSuccessCallback->Cancel(), onFailureCallback->Cancel(){{#chip_server_cluster_command_arguments}}, {{#if (isString type)}} chip::ByteSpan(chip::Uint8::from_char(m{{asCamelCased label false}}), strlen(m{{asCamelCased label false}})){{else}}m{{asCamelCased label false}}{{/if}}{{/chip_server_cluster_command_arguments}});
    }

private:
    {{#if hasSpecificResponse}}
    chip::Callback::Callback<{{asCamelCased parent.name false}}Cluster{{asCamelCased responseName false}}Callback> * onSuccessCallback = new chip::Callback::Callback<{{asCamelCased parent.name false}}Cluster{{asCamelCased responseName false}}Callback>(On{{asCamelCased parent.name false}}Cluster{{asCamelCased responseName false}}, this);
    {{else}}
    chip::Callback::Callback<DefaultSuccessCallback> * onSuccessCallback = new chip::Callback::Callback<DefaultSuccessCallback>(OnDefaultSuccessResponse, this);
    {{/if}}
    chip::Callback::Callback<DefaultFailureCallback> * onFailureCallback = new chip::Callback::Callback<DefaultFailureCallback>(OnDefaultFailureResponse, this);
    {{#chip_server_cluster_command_arguments}}
    {{#if (isString type)}}
    char * m{{asCamelCased label false}};
    {{else}}
    {{chipType}} m{{asCamelCased label false}};
    {{/if}}
    {{/chip_server_cluster_command_arguments}}
};

{{/chip_server_cluster_commands}}

/*
 * Discover Attributes
 */
class Discover{{asCamelCased name false}}Attributes: public ModelCommand
{
public:
    Discover{{asCamelCased name false}}Attributes(): ModelCommand("discover")
    {
        ModelCommand::AddArguments();
    }

    ~Discover{{asCamelCased name false}}Attributes()
    {
      delete onSuccessCallback;
      delete onFailureCallback;
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x0C) on endpoint %" PRIu16, endpointId);

        chip::Controller::{{asCamelCased name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.DiscoverAttributes(onSuccessCallback->Cancel(), onFailureCallback->Cancel());
    }

private:
    chip::Callback::Callback<DefaultSuccessCallback> * onSuccessCallback = new chip::Callback::Callback<DefaultSuccessCallback>(OnDefaultSuccessResponse, this);
    chip::Callback::Callback<DefaultFailureCallback> * onFailureCallback = new chip::Callback::Callback<DefaultFailureCallback>(OnDefaultFailureResponse, this);
};

{{#chip_server_cluster_attributes}}
/*
 * Attribute {{asCamelCased name false}}
 */
class Read{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Read{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("read")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        ModelCommand::AddArguments();
    }

    ~Read{{asCamelCased parent.name false}}{{asCamelCased name false}}()
    {
      delete onSuccessCallback;
      delete onFailureCallback;
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x00) on endpoint %" PRIu16, endpointId);

        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.ReadAttribute{{asCamelCased name false}}(onSuccessCallback->Cancel(), onFailureCallback->Cancel());
    }

private:
{{#if isList}}
    chip::Callback::Callback<{{asCamelCased parent.name false}}{{asCamelCased name false}}ListAttributeCallback> * onSuccessCallback = new chip::Callback::Callback<{{asCamelCased parent.name false}}{{asCamelCased name false}}ListAttributeCallback>(On{{asCamelCased parent.name false}}{{asCamelCased name false}}ListAttributeResponse, this);
{{else}}
    chip::Callback::Callback<{{asCallbackAttributeType atomicTypeId}}AttributeCallback> * onSuccessCallback = new chip::Callback::Callback<{{asCallbackAttributeType atomicTypeId}}AttributeCallback>(On{{asCallbackAttributeType atomicTypeId}}AttributeResponse, this);
{{/if}}
    chip::Callback::Callback<DefaultFailureCallback> * onFailureCallback = new chip::Callback::Callback<DefaultFailureCallback>(OnDefaultFailureResponse, this);
};

{{#if (isWritableAttribute)}}
class Write{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Write{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("write")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        {{#if (isString type)}}
        AddArgument("attr-value", &mValue);
        {{else}}
        AddArgument("attr-value", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &mValue);
        {{/if}}
        ModelCommand::AddArguments();
    }

    ~Write{{asCamelCased parent.name false}}{{asCamelCased name false}}()
    {
      delete onSuccessCallback;
      delete onFailureCallback;
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x01) on endpoint %" PRIu16, endpointId);

        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.WriteAttribute{{asCamelCased name false}}(onSuccessCallback->Cancel(), onFailureCallback->Cancel(), {{#if (isString type)}} chip::ByteSpan(chip::Uint8::from_char(mValue), strlen(mValue)){{else}}mValue{{/if}});
    }

private:
    chip::Callback::Callback<DefaultSuccessCallback> * onSuccessCallback = new chip::Callback::Callback<DefaultSuccessCallback>(OnDefaultSuccessResponse, this);
    chip::Callback::Callback<DefaultFailureCallback> * onFailureCallback = new chip::Callback::Callback<DefaultFailureCallback>(OnDefaultFailureResponse, this);
    {{#if (isString type)}}
    char * mValue;
    {{else}}
    {{chipType}} mValue;
    {{/if}}
};

{{/if}}
{{#if (isReportableAttribute)}}
class Report{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Report{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("report")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        AddArgument("min-interval", 0, UINT16_MAX, &mMinInterval);
        AddArgument("max-interval", 0, UINT16_MAX, &mMaxInterval);
        {{#unless (isDiscreteType)}}
        {{#unless (isString type)}}
        AddArgument("change", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &mChange);
        {{/unless}}
        {{/unless}}
        ModelCommand::AddArguments();
    }

    ~Report{{asCamelCased parent.name false}}{{asCamelCased name false}}()
    {
      delete onSuccessCallback;
      delete onFailureCallback;
      delete onReportCallback;
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x06) on endpoint %" PRIu16, endpointId);

        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);

        CHIP_ERROR err = cluster.ReportAttribute{{asCamelCased name false}}(onReportCallback->Cancel());
        if (err != CHIP_NO_ERROR)
        {
            return err;
        }

        return cluster.ConfigureAttribute{{asCamelCased name false}}(onSuccessCallback->Cancel(), onFailureCallback->Cancel(), mMinInterval, mMaxInterval{{#unless (isDiscreteType)}}, mChange{{/unless}});
    }

private:
    chip::Callback::Callback<DefaultSuccessCallback> * onSuccessCallback = new chip::Callback::Callback<DefaultSuccessCallback>(OnDefaultSuccessResponse, this);
    chip::Callback::Callback<DefaultFailureCallback> * onFailureCallback = new chip::Callback::Callback<DefaultFailureCallback>(OnDefaultFailureResponse, this);
    chip::Callback::Callback<{{asCallbackAttributeType atomicTypeId}}AttributeCallback> * onReportCallback = new chip::Callback::Callback<{{asCallbackAttributeType atomicTypeId}}AttributeCallback>(On{{asCallbackAttributeType atomicTypeId}}AttributeResponse, this);
    uint16_t mMinInterval;
    uint16_t mMaxInterval;
    {{#unless (isDiscreteType)}}
    {{#unless (isString type)}}
    {{chipType}} mChange;
    {{/unless}}
    {{/unless}}
};

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}

/*----------------------------------------------------------------------------*\
| Register all Clusters commands                                               |
\*----------------------------------------------------------------------------*/
{{#chip_client_clusters}}
void registerCluster{{asCamelCased name false}}(Commands & commands)
{
    const char * clusterName = "{{asCamelCased name false}}";

    commands_list clusterCommands = {
        {{#chip_server_cluster_commands}}
        make_unique<{{asCamelCased clusterName false}}{{asCamelCased name false}}>(),
        {{/chip_server_cluster_commands}}
        make_unique<Discover{{asCamelCased name false}}Attributes>(),
        {{#chip_server_cluster_attributes}}
        make_unique<Read{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{#if (isWritableAttribute)}}
        make_unique<Write{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{/if}}
        {{#if (isReportableAttribute)}}
        make_unique<Report{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{/if}}
        {{/chip_server_cluster_attributes}}
    };

    commands.Register(clusterName, clusterCommands);
}
{{/chip_client_clusters}}

void registerClusters(Commands & commands)
{
{{#chip_client_clusters}}
    registerCluster{{asCamelCased name false}}(commands);
{{/chip_client_clusters}}
}
