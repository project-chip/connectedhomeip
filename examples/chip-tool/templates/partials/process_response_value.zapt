{{#chip_tests_item_response_parameters}}
{{#if hasExpectedValue}}
{{#if isList}}
if (count != {{expectedValue.length}})
{
    ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "{{expectedValue}}");
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
}
{{else}}
{{#if (isString type)}}
{{chipType}} {{asLowerCamelCase name}}Argument = chip::ByteSpan(chip::Uint8::from_const_char("{{expectedValue}}"), strlen("{{expectedValue}}"));
if (!{{asLowerCamelCase name}}.data_equal({{asLowerCamelCase name}}Argument))
{{else}}
if ({{asLowerCamelCase name}} != {{expectedValue}}{{asTypeLiteralSuffix chipType}})
{{/if}}
{
    ChipLogError(chipTool, "Error: Value mismatch. Expected: '%s'", "{{expectedValue}}");
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
}
{{/if}}
{{/if}}
{{#if hasExpectedConstraints}}
{{#if expectedConstraints.type}}
ChipLogError(chipTool, "Warning: {{asLowerCamelCase name}} type checking is not implemented yet. Expected type: '%s'", "{{expectedConstraints.type}}");
{{/if}}

{{#if expectedConstraints.format}}
ChipLogError(chipTool, "Warning: {{asLowerCamelCase name}} format checking is not implemented yet. Expected format: '%s'", "{{expectedConstraints.format}}");
{{/if}}

{{#if expectedConstraints.minLength}}
  if ({{asLowerCamelCase name}}.size() < {{expectedConstraints.minLength}})
  {
    ChipLogError(chipTool, "Error: {{asLowerCamelCase name}} is too short. Min size is {{expectedConstraints.minLength}} but got '%zu'", {{asLowerCamelCase name}}.size());
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
  }
{{/if}}

{{#if expectedConstraints.maxLength}}
  if ({{asLowerCamelCase name}}.size() > {{expectedConstraints.maxLength}})
  {
    ChipLogError(chipTool, "Error: {{asLowerCamelCase name}} is too long. Max size is {{expectedConstraints.maxLength}} but got '%zu'", {{asLowerCamelCase name}}.size());
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
  }
{{/if}}

{{#if expectedConstraints.minValue}}
  if ({{asLowerCamelCase name}} < {{expectedConstraints.minValue}})
  {
    ChipLogError(chipTool, "Error: {{asLowerCamelCase name}} is lower than expected. Min value is {{expectedConstraints.minValue}} but got '%d'", {{asLowerCamelCase name}});
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
  }
{{/if}}

{{#if expectedConstraints.maxValue}}
  if ({{asLowerCamelCase name}} > {{expectedConstraints.maxValue}})
  {
    ChipLogError(chipTool, "Error: {{asLowerCamelCase name}} is higher than expected. Max value is {{expectedConstraints.maxValue}} but got '%d'", {{asLowerCamelCase name}});
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
  }
{{/if}}

{{#if expectedConstraints.notValue}}
  if ({{asLowerCamelCase name}} == {{expectedConstraints.notValue}})
  {
    ChipLogError(chipTool, "Error: {{asLowerCamelCase name}} was not expected to be '{{expectedConstraints.notValue}}' due to notValue constraint");
    runner->SetCommandExitStatus(CHIP_ERROR_INTERNAL);
    return;
  }
{{/if}}
{{/if}}
{{/chip_tests_item_response_parameters}}
