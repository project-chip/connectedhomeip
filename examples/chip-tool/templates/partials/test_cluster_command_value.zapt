{{#if isOptional}}
  {{container}}.Emplace();
  {{>commandValue ns=ns container=(concat container ".Value()") definedValue=definedValue type=type isOptional=false depth=(incrementDepth depth)}}
{{else if isNullable}}
  {{#if (isLiteralNull definedValue)}}
    {{container}}.SetNull();
  {{else}}
    {{container}}.SetNonNull();
    {{>commandValue ns=ns container=(concat container ".Value()") definedValue=definedValue type=type isNullable=false depth=(incrementDepth depth)}}
  {{/if}}
{{else if isArray}}

  {{! forceNotList=true because we really want the type of a single item here.
      Similarly, forceNotOptional=true and forceNotNullable=true because we
      have accounted for those already. }}
  {{#if definedValue.length}}
  {{! This should really do heap-allocation with a function-scope-wide
      auto-free setup, so we could guarantee no name collisions. }}
  {{zapTypeToEncodableClusterObjectType type ns=ns forceNotList=true forceNotNullable=true forceNotOptional=true}} {{asLowerCamelCase label}}List_{{depth}}[{{definedValue.length}}];
  {{#each definedValue}}
  {{>commandValue ns=../ns container=(concat (asLowerCamelCase ../label) "List_" ../depth "[" @index "]") definedValue=. type=../type depth=(incrementDepth ../depth) parent=../parent}}
  {{/each}}
  {{container}} = {{asLowerCamelCase label}}List_{{depth}};
  {{else}}
  {{container}} = chip::app::DataModel::List<{{zapTypeToEncodableClusterObjectType type ns=ns forceNotList=true forceNotNullable=true forceNotOptional=true}}>();
  {{/if}}
{{else}}
  {{#if_is_struct type}}

    {{#zcl_struct_items_by_struct_name type}}
      {{#if_include_struct_item_value ../definedValue name}}
        {{>commandValue ns=parent.ns container=(concat parent.container "." (asLowerCamelCase label)) definedValue=(lookup ../definedValue name) depth=(incrementDepth ../depth)}}
      {{/if_include_struct_item_value}}
    {{/zcl_struct_items_by_struct_name}}

  {{else}}
    {{container}} =
    {{~#if (chip_tests_variables_has definedValue)~}}
    {{definedValue}};
    {{else~}}
    {{~#if_chip_enum type~}}
      static_cast<{{zapTypeToEncodableClusterObjectType type ns=ns}}>({{definedValue}});
    {{else if (isCharString type)}}
      chip::Span<const char>("{{definedValue}}garbage: not in length on purpose", {{utf8StringLength definedValue}});
    {{else if (isOctetString type)}}
      chip::ByteSpan(chip::Uint8::from_const_char("{{octetStringEscapedForCLiteral definedValue}}garbage: not in length on purpose"), {{definedValue.length}});
    {{else}}
      {{#if_is_bitmap type}}
      static_cast<{{zapTypeToEncodableClusterObjectType type ns=ns}}>({{definedValue}});
      {{else if (chip_tests_config_has definedValue)}}
      m{{asUpperCamelCase definedValue}}.HasValue() ? m{{asUpperCamelCase definedValue}}.Value() : {{asTypedLiteral (chip_tests_config_get_default_value definedValue) (chip_tests_config_get_type definedValue)}};
      {{else}}
      {{asTypedLiteral definedValue type}};
      {{/if_is_bitmap}}
    {{/if_chip_enum~}}
    {{~/if~}}
    
  {{/if_is_struct}}
{{/if}}
