{{#chip_tests tests}}
class {{filename}}: public TestCommand
{
  public:
    {{filename}}(): TestCommand("{{filename}}"), mTestIndex(0) {}

    /////////// TestCommand Interface /////////
    void NextTest() override
    {
      CHIP_ERROR err = CHIP_NO_ERROR;

      if (0 == mTestIndex)
      {
          ChipLogProgress(chipTool, " **** Test Start: {{filename}}\n");
      }

      if (mTestCount == mTestIndex)
      {
          ChipLogProgress(chipTool, " **** Test Complete: {{filename}}\n");
          SetCommandExitStatus(CHIP_NO_ERROR);
          return;
      }

      Wait();

      // Ensure we increment mTestIndex before we start running the relevant
      // command.  That way if we lose the timeslice after we send the message
      // but before our function call returns, we won't end up with an
      // incorrect mTestIndex value observed when we get the response.
      switch (mTestIndex++)
      {
        {{#chip_tests_items}}
        case {{index}}:
          ChipLogProgress(chipTool, " ***** Test Step {{index}} : {{label}}\n");
          err = {{#if PICS}}ShouldSkip("{{PICS}}") ? CHIP_NO_ERROR : {{/if}}Test{{asUpperCamelCase label}}_{{index}}();
          break;
        {{/chip_tests_items}}
      }

      if (CHIP_NO_ERROR != err)
      {
          ChipLogError(chipTool, " ***** Test Failure: %s\n", chip::ErrorStr(err));
          SetCommandExitStatus(err);
      }
    }

  {{#if timeout}}
    chip::System::Clock::Timeout GetWaitDuration() const override { return chip::System::Clock::Seconds16(mTimeout.HasValue() : mTimeout.Value() : {{timeout}}); }
  {{/if}}

  private:
    std::atomic_uint16_t mTestIndex;
    const uint16_t mTestCount = {{totalTests}};

    {{#chip_tests_items}}
    {{#chip_tests_item_response_parameters}}
    {{#if saveAs}}
    {{chipType}} {{saveAs}};
    {{/if}}
    {{/chip_tests_item_response_parameters}}
    {{/chip_tests_items}}

    {{#*inline "failureCallback"}}mOnFailureCallback_{{index}}{{/inline}}
    {{#*inline "successCallback"}}mOnSuccessCallback_{{index}}{{/inline}}
    
    {{#if isGroupCommand}}
    {{#*inline "doneCallback"}}mOnDoneCallback_{{index}}{{/inline}}
    {{/if}}

    {{#*inline "failureResponse"}}OnFailureCallback_{{index}}{{/inline}}
    {{#*inline "successResponse"}}OnSuccessCallback_{{index}}{{/inline}}

    {{#*inline "doneResponse"}}OnDoneCallback_{{index}}{{/inline}}

    {{#*inline "successArguments"}}void * context{{#chip_tests_item_response_parameters}}, {{zapTypeToDecodableClusterObjectType type ns=parent.cluster isArgument=true}} {{asLowerCamelCase name}}{{/chip_tests_item_response_parameters}}{{/inline}}
    {{#*inline "failureArguments"}}void * context, uint8_t status{{/inline}}

    {{#if isGroupCommand}}
    {{#*inline "doneArguments"}}void * context{{/inline}}
    {{/if}}

    {{#chip_tests_items}}
    {{#unless (isTestOnlyCluster cluster)}}
    {{#unless isWait}}
    {{#unless isCommand}}
    {{#unless isWriteAttribute}}
    {{#unless isReadAttribute}}
    chip::Callback::Callback<void (*) ({{>failureArguments}})> {{>failureCallback}} { {{>failureResponse}}, this };
    chip::Callback::Callback<void (*) ({{>successArguments}})> {{>successCallback}} { {{>successResponse}}, this };
    {{/unless}}
    {{/unless}}
    {{/unless}}
    {{/unless}}
    {{/unless}}
    {{/chip_tests_items}}

    {{#chip_tests_items}}
    {{#unless (isTestOnlyCluster cluster)}}
    {{#unless isWait}}
    {{#unless isCommand}}
    {{#if isWriteAttribute}}
    static void {{>failureResponse}}(void * context, EmberAfStatus status)
    {
        (static_cast<{{filename}} *>(context))->OnFailureResponse_{{index}}(chip::to_underlying(status));
    }

    {{#if isGroupCommand}}
    static void {{>doneResponse}}(void * context)
    {
        (static_cast<{{filename}} *>(context))->OnDoneResponse_{{index}}();

    }
    {{/if}}

    {{else if isReadAttribute}}
    static void {{>failureResponse}}(void * context, EmberAfStatus status)
    {
        (static_cast<{{filename}} *>(context))->OnFailureResponse_{{index}}(chip::to_underlying(status));
    }
    {{else}}
    static void {{>failureResponse}}({{> failureArguments}})
    {
        (static_cast<{{filename}} *>(context))->OnFailureResponse_{{index}}(status);
    }
    {{/if}}


    static void {{>successResponse}}({{> successArguments}})
    {
        (static_cast<{{filename}} *>(context))->OnSuccessResponse_{{index}}({{#chip_tests_item_response_parameters}}{{#not_first}}, {{/not_first}}{{asLowerCamelCase name}}{{/chip_tests_item_response_parameters}});
    }

    {{! "isWaitForReport" can be replaced by "async" if there is a mechanism to remove the report handler}}
    {{#if isWaitForReport}}
    bool mReceivedReport_{{index}} = false;
    {{/if}}

    {{/unless}}
    {{/unless}}
    {{/unless}}
    {{/chip_tests_items}}

    //
    // Tests methods
    //

    {{#chip_tests_items}}
    {{#*inline "testCommand"}}Test{{asUpperCamelCase label}}_{{index}}{{/inline}}
    {{#if (isTestOnlyCluster cluster)}}
    CHIP_ERROR {{>testCommand}}()
    {
        return {{command}}({{#chip_tests_item_parameters}}{{#not_first}}, {{/not_first}}{{#if (isString type)}}"{{/if}}{{definedValue}}{{#if (isString type)}}"{{/if}}{{/chip_tests_item_parameters}});
    }
    {{else if isWait}}
    CHIP_ERROR {{>testCommand}}()
    {
      const chip::EndpointId endpoint = mEndpointId.HasValue() ? mEndpointId.Value() : {{endpoint}};
      ChipLogError(chipTool, "[Endpoint: 0x%08x Cluster: {{cluster}} {{#if isAttribute}}Attribute: {{attribute}}{{else}}Command: {{wait}}{{/if}}] {{label}}", endpoint);
      {{#*inline "waitForTypeName"}}{{#if isAttribute}}Attribute{{else}}Command{{/if}}{{/inline}}
      {{#*inline "waitForTypeId"}}chip::app::Clusters::{{asUpperCamelCase cluster}}::{{#if isAttribute}}Attributes::{{attribute}}{{else}}Commands::{{wait}}{{/if}}::Id{{/inline}}
      ClearAttributeAndCommandPaths();
      m{{>waitForTypeName}}Path = chip::app::Concrete{{>waitForTypeName}}Path(endpoint, chip::app::Clusters::{{asUpperCamelCase cluster}}::Id, {{>waitForTypeId}});
      return CHIP_NO_ERROR;
    }
    {{else}}
    {{#*inline "failureResponse"}}OnFailureResponse_{{index}}{{/inline}}
    {{#*inline "successResponse"}}OnSuccessResponse_{{index}}{{/inline}}
    {{#*inline "doneResponse"}}OnDoneResponse_{{index}}{{/inline}}

    {{#*inline "failureArguments"}}uint8_t status{{/inline}}
    {{#*inline "successArguments"}}{{#chip_tests_item_response_parameters}}{{#not_first}}, {{/not_first}}{{zapTypeToDecodableClusterObjectType type ns=parent.cluster isArgument=true}} {{asLowerCamelCase name}}{{/chip_tests_item_response_parameters}}{{/inline}}
    {{#*inline "doneArguments"}}{{/inline}}

    CHIP_ERROR {{>testCommand}}()
    {
        {{#if isGroupCommand}}
        const chip::GroupId groupId = {{groupId}};
        {{else}}
        const chip::EndpointId endpoint = mEndpointId.HasValue() ? mEndpointId.Value() : {{endpoint}};
        {{/if}}
        {{#if isCommand}}
        using RequestType = chip::app::Clusters::{{asUpperCamelCase cluster}}::Commands::{{asUpperCamelCase command}}::Type;

        RequestType request;
        {{#chip_tests_item_parameters}}
        {{>commandValue ns=parent.cluster container=(concat "request." (asLowerCamelCase label)) definedValue=definedValue}}
        {{/chip_tests_item_parameters}}

        auto success = [](void * context, const typename RequestType::ResponseType & data) {
            (static_cast<{{filename}} *>(context))->OnSuccessResponse_{{index}}({{#chip_tests_item_response_parameters}}{{#not_first}}, {{/not_first}}data.{{asLowerCamelCase name}}{{/chip_tests_item_response_parameters}});
        };

        auto failure = [](void * context, EmberAfStatus status) {
            (static_cast<{{filename}} *>(context))->OnFailureResponse_{{index}}(status);
        };

        ReturnErrorOnFailure(chip::Controller::{{#if isGroupCommand}}InvokeGroupCommand{{else}}InvokeCommand{{/if}}(mDevice, this, success, failure, {{#if isGroupCommand}}groupId{{else}}endpoint{{/if}}, request));
        {{#unless async}}return CHIP_NO_ERROR;{{/unless}}
        {{else}}
        chip::Controller::{{asUpperCamelCase cluster}}ClusterTest cluster;
        {{#if isGroupCommand}}
        cluster.AssociateWithGroup(mDevice, groupId);
        {{else}}
        cluster.Associate(mDevice, endpoint);
        {{/if}}

        {{#chip_tests_item_parameters}}
        {{zapTypeToEncodableClusterObjectType type ns=parent.cluster}} {{asLowerCamelCase name}}Argument;
        {{>commandValue ns=parent.cluster container=(concat (asLowerCamelCase name) "Argument") definedValue=definedValue}}
        {{/chip_tests_item_parameters}}

        {{#if isWriteAttribute}}
          {{#*inline "failureResponse"}}OnFailureCallback_{{index}}{{/inline}}
          {{#*inline "successResponse"}}OnSuccessCallback_{{index}}{{/inline}}
          {{#*inline "doneResponse"}}OnDoneCallback_{{index}}{{/inline}}
          {{#if async}}ReturnErrorOnFailure({{else}}return {{/if}}cluster.WriteAttribute<chip::app::Clusters::{{asUpperCamelCase cluster}}::Attributes::{{asUpperCamelCase attribute}}::TypeInfo>({{#chip_tests_item_parameters}}{{asLowerCamelCase name}}Argument, {{/chip_tests_item_parameters}}this, {{>successResponse}}, {{>failureResponse}}{{#if isGroupCommand}}, {{>doneResponse}}{{/if}}){{#if async}}){{/if}};
        {{else if isReadAttribute}}
          {{#*inline "failureResponse"}}OnFailureCallback_{{index}}{{/inline}}
          {{#*inline "successResponse"}}OnSuccessCallback_{{index}}{{/inline}}
          {{#if async}}ReturnErrorOnFailure({{else}}return {{/if}}cluster.ReadAttribute<chip::app::Clusters::{{asUpperCamelCase cluster}}::Attributes::{{asUpperCamelCase attribute}}::TypeInfo>({{#chip_tests_item_parameters}}{{asLowerCamelCase name}}Argument, {{/chip_tests_item_parameters}}this, {{>successResponse}}, {{>failureResponse}}){{#if async}}){{/if}};
        {{else}}
          {{~#*inline "commandName"}}{{asUpperCamelCase commandName}}{{#if isAttribute}}Attribute{{asUpperCamelCase attribute}}{{/if}}{{/inline}}
          {{#if async}}ReturnErrorOnFailure({{else}}return {{/if}}cluster.{{>commandName}}({{>successCallback}}.Cancel(){{#unless isWaitForReport}}, {{>failureCallback}}.Cancel(){{/unless}}{{#chip_tests_item_parameters}}, {{asLowerCamelCase name}}Argument{{/chip_tests_item_parameters}}){{#if async}}){{/if}};
        {{/if}}

        {{/if}}
        {{#if async}}return WaitForMs(0);{{/if}}
    }

    void {{>failureResponse}}({{>failureArguments}})
    {
        {{#if response.error}}
          VerifyOrReturn(CheckValue("status", status, {{response.error}}));
          {{#unless async}}NextTest();{{/unless}}
        {{else if response.errorWrongValue}}
          VerifyOrReturn(CheckConstraintNotValue("status", status, 0));
          {{#unless async}}NextTest();{{/unless}}
        {{else}}
          {{#if optional}}(status == EMBER_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE) ? NextTest() : {{/if}}ThrowFailureResponse();
        {{/if}}
    }

    void {{>successResponse}}({{>successArguments}})
    {
        {{~#if response.error}}
          ThrowSuccessResponse();
        {{else if response.errorWrongValue}}
          ThrowSuccessResponse();
        {{else}}
          {{! This block can be removed if there is a mechanism to remove the report handler}}
          {{#if isWaitForReport}}
          VerifyOrReturn(mReceivedReport_{{index}} == false, ChipLogError(chipTool, "Not Fatal: on report called more than once."));
          mReceivedReport_{{index}} = true;
          {{/if}}
          {{#if hasWaitForReport}}
          VerifyOrReturn(mReceivedReport_{{waitForReport.index}}, Exit("Initial report not received!"));
          {{/if}}
          {{#chip_tests_item_response_parameters}}
            {{~#*inline "item"}}{{asLowerCamelCase name}}{{#if isOptional}}.Value(){{/if}}{{/inline}}
            {{#if hasExpectedValue}}
              {{>valueEquals actual=(asLowerCamelCase name) label=(asLowerCamelCase name) expected=expectedValue}}
            {{/if}}
            {{#if hasExpectedConstraints}}
              {{#if isOptional}}
                {{~#*inline "item"}}{{asLowerCamelCase name}}{{/inline}}
                VerifyOrReturn(CheckValuePresent("{{> item}}", {{> item}}));
              {{/if}}
              {{#if expectedConstraints.type}}VerifyOrReturn(CheckConstraintType("{{>item}}", "", "{{expectedConstraints.type}}"));{{/if}}
              {{~#if expectedConstraints.format}}VerifyOrReturn(CheckConstraintFormat("{{>item}}", "", "{{expectedConstraints.format}}"));{{/if}}
              {{~#if expectedConstraints.startsWith}}VerifyOrReturn(CheckConstraintStartsWith("{{>item}}", {{>item}}, "{{expectedConstraints.startsWith}}"));{{/if}}
              {{~#if expectedConstraints.endsWith}}VerifyOrReturn(CheckConstraintEndsWith("{{>item}}", {{>item}}, "{{expectedConstraints.endsWith}}"));{{/if}}
              {{~#if expectedConstraints.minLength}}VerifyOrReturn(CheckConstraintMinLength("{{>item}}", {{>item}}.size(), {{expectedConstraints.minLength}}));{{/if}}
              {{~#if expectedConstraints.maxLength}}VerifyOrReturn(CheckConstraintMaxLength("{{>item}}", {{>item}}.size(), {{expectedConstraints.maxLength}}));{{/if}}
              {{~#if expectedConstraints.minValue}}VerifyOrReturn(CheckConstraintMinValue<{{chipType}}>("{{>item}}", {{>item}}, {{expectedConstraints.minValue}}));{{/if}}
              {{~#if expectedConstraints.maxValue}}VerifyOrReturn(CheckConstraintMaxValue<{{chipType}}>("{{>item}}", {{>item}}, {{expectedConstraints.maxValue}}));{{/if}}
              {{~#if expectedConstraints.notValue}}VerifyOrReturn(CheckConstraintNotValue("{{>item}}", {{>item}}, {{asTypedLiteral expectedConstraints.notValue type}}));{{/if}}
            {{/if}}

            {{#if saveAs}}
            {{saveAs}} = {{>item}};
            {{/if}}
          {{/chip_tests_item_response_parameters}}
        {{#unless async}}NextTest();{{/unless}}
        {{/if}}
    }

    {{#if isGroupCommand}}
    void {{>doneResponse}}({{>doneArguments}})
    {
      NextTest();
    }
    {{/if}}

    {{/if}}
    {{/chip_tests_items}}
};

{{/chip_tests}}
