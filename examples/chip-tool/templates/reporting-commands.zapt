{{> header}}

#pragma once

#include <commands/reporting/ReportingCommand.h>
#include "../cluster/Commands.h" // For the LogValue bits and read callbacks

typedef void (*UnsupportedAttributeCallback)(void * context);

class Listen : public ReportingCommand
{
public:
    Listen() : ReportingCommand("listen")
    {
    }

    ~Listen()
    {
{{#chip_client_clusters}}
{{#chip_server_cluster_attributes}}
{{#if isReportableAttribute}}
{{#unless isList}}
{{#unless (isStrEqual chipCallback.name "Unsupported")}}
    delete onReport{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}Callback;
{{/unless}}
{{/unless}}
{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}
    }
    
    void AddReportCallbacks(NodeId remoteId, uint8_t endpointId) override
    {
        chip::app::CHIPDeviceCallbacksMgr & callbacksMgr = chip::app::CHIPDeviceCallbacksMgr::GetInstance();
{{#chip_client_clusters}}
{{#chip_server_cluster_attributes}}
{{#if isReportableAttribute}}
{{#unless isList}}
{{#unless (isStrEqual chipCallback.name "Unsupported")}}
        callbacksMgr.AddReportCallback(remoteId, endpointId, {{asHex parent.code 4}}, {{asHex code 4}}, onReport{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}Callback->Cancel(), BasicAttributeFilter<{{chipCallback.name}}AttributeCallback>);
{{/unless}}
{{/unless}}
{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}
    }

private:
{{#chip_client_clusters}}
{{#chip_server_cluster_attributes}}
{{#if isReportableAttribute}}
{{#unless isList}}
{{#unless (isStrEqual chipCallback.name "Unsupported")}}
    chip::Callback::Callback<decltype(&Read{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}::OnAttributeResponse)> * onReport{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}Callback = new chip::Callback::Callback<decltype(&Read{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}::OnAttributeResponse)>(Read{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}::OnAttributeResponse, this);
    {{/unless}}
{{/unless}}
{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}
};

void registerCommandsReporting(Commands & commands)
{
    const char * clusterName = "Reporting";

    commands_list clusterCommands = {
        make_unique<Listen>(),
    };

    commands.Register(clusterName, clusterCommands);
}
