/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "app/util/util.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

namespace NetworkCommissioning {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_THREAD_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan operationalDataset;
            bool operationalDatasetExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (operationalDatasetExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        operationalDataset   = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        operationalDatasetExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterAddThreadNetworkCallback(operationalDataset, breadcrumb, timeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_ADD_WI_FI_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            bool ssidExists = false;
            chip::ByteSpan credentials;
            bool credentialsExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (ssidExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        ssidExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (credentialsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        credentials          = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        credentialsExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterAddWiFiNetworkCallback(ssid, credentials, breadcrumb, timeoutMs);
            }
            else if (4 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 4,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_DISABLE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            bool networkIDExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (networkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        networkID            = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        networkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterDisableNetworkCallback(networkID, breadcrumb, timeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_ENABLE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            bool networkIDExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (networkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        networkID            = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        networkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterEnableNetworkCallback(networkID, breadcrumb, timeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_GET_LAST_NETWORK_COMMISSIONING_RESULT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterGetLastNetworkCommissioningResultCallback(timeoutMs);
            }
            else if (1 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 1,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_REMOVE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan NetworkID;
            bool NetworkIDExists = false;
            uint64_t Breadcrumb;
            bool BreadcrumbExists = false;
            uint32_t TimeoutMs;
            bool TimeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (NetworkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        NetworkID            = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        NetworkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (BreadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(Breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        BreadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (TimeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(TimeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        TimeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterRemoveNetworkCallback(NetworkID, Breadcrumb, TimeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_SCAN_NETWORKS_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            bool ssidExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (ssidExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        ssidExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterScanNetworksCallback(ssid, breadcrumb, timeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_UPDATE_THREAD_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan operationalDataset;
            bool operationalDatasetExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (operationalDatasetExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        operationalDataset   = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        operationalDatasetExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterUpdateThreadNetworkCallback(operationalDataset, breadcrumb, timeoutMs);
            }
            else if (3 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 3,
                                validArgumentCount);
            }
            break;
        }
        case ZCL_UPDATE_WI_FI_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            bool ssidExists = false;
            chip::ByteSpan credentials;
            bool credentialsExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    if (ssidExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        ssidExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (credentialsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = dataTlv.GetDataPtr(data);
                        credentials          = chip::ByteSpan(data, dataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        credentialsExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(dataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = dataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterUpdateWiFiNetworkCallback(ssid, credentials, breadcrumb, timeoutMs);
            }
            else if (4 != validArgumentCount)
            {
                ChipLogProgress(Zcl, "Missing command arguments in TLV data, command requires %d, given %" PRIu32, 4,
                                validArgumentCount);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_NETWORK_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace NetworkCommissioning

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    switch (aClusterId)
    {
    case ZCL_NETWORK_COMMISSIONING_CLUSTER_ID:
        clusters::NetworkCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        // TODO: Encode response for Cluster not found
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
    Compatibility::ResetEmberAfObjects();
}

} // namespace app
} // namespace chip
