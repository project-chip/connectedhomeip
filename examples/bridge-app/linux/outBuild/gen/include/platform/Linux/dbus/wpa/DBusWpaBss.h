/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUSWPABSS_H__
#define __DBUSWPABSS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.BSS */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS (wpa_fi_w1_wpa_supplicant1_bss_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS, WpaFiW1Wpa_supplicant1BSS))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_BSS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS))
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS, WpaFiW1Wpa_supplicant1BSSIface))

struct _WpaFiW1Wpa_supplicant1BSS;
typedef struct _WpaFiW1Wpa_supplicant1BSS WpaFiW1Wpa_supplicant1BSS;
typedef struct _WpaFiW1Wpa_supplicant1BSSIface WpaFiW1Wpa_supplicant1BSSIface;

struct _WpaFiW1Wpa_supplicant1BSSIface
{
  GTypeInterface parent_iface;


  GVariant * (*get_bssid) (WpaFiW1Wpa_supplicant1BSS *object);

  guint16  (*get_frequency) (WpaFiW1Wpa_supplicant1BSS *object);

  gint16  (*get_signal) (WpaFiW1Wpa_supplicant1BSS *object);

  GVariant * (*get_ssid) (WpaFiW1Wpa_supplicant1BSS *object);

  GVariant * (*get_wpa) (WpaFiW1Wpa_supplicant1BSS *object);

  void (*properties_changed) (
    WpaFiW1Wpa_supplicant1BSS *object,
    GVariant *arg_properties);

};

GType wpa_fi_w1_wpa_supplicant1_bss_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_fi_w1_wpa_supplicant1_bss_interface_info (void);
guint wpa_fi_w1_wpa_supplicant1_bss_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_bss_emit_properties_changed (
    WpaFiW1Wpa_supplicant1BSS *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
GVariant *wpa_fi_w1_wpa_supplicant1_bss_get_ssid (WpaFiW1Wpa_supplicant1BSS *object);
GVariant *wpa_fi_w1_wpa_supplicant1_bss_dup_ssid (WpaFiW1Wpa_supplicant1BSS *object);
void wpa_fi_w1_wpa_supplicant1_bss_set_ssid (WpaFiW1Wpa_supplicant1BSS *object, GVariant *value);

GVariant *wpa_fi_w1_wpa_supplicant1_bss_get_bssid (WpaFiW1Wpa_supplicant1BSS *object);
GVariant *wpa_fi_w1_wpa_supplicant1_bss_dup_bssid (WpaFiW1Wpa_supplicant1BSS *object);
void wpa_fi_w1_wpa_supplicant1_bss_set_bssid (WpaFiW1Wpa_supplicant1BSS *object, GVariant *value);

GVariant *wpa_fi_w1_wpa_supplicant1_bss_get_wpa (WpaFiW1Wpa_supplicant1BSS *object);
GVariant *wpa_fi_w1_wpa_supplicant1_bss_dup_wpa (WpaFiW1Wpa_supplicant1BSS *object);
void wpa_fi_w1_wpa_supplicant1_bss_set_wpa (WpaFiW1Wpa_supplicant1BSS *object, GVariant *value);

gint16 wpa_fi_w1_wpa_supplicant1_bss_get_signal (WpaFiW1Wpa_supplicant1BSS *object);
void wpa_fi_w1_wpa_supplicant1_bss_set_signal (WpaFiW1Wpa_supplicant1BSS *object, gint16 value);

guint16 wpa_fi_w1_wpa_supplicant1_bss_get_frequency (WpaFiW1Wpa_supplicant1BSS *object);
void wpa_fi_w1_wpa_supplicant1_bss_set_frequency (WpaFiW1Wpa_supplicant1BSS *object, guint16 value);


/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY (wpa_fi_w1_wpa_supplicant1_bss_proxy_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY, WpaFiW1Wpa_supplicant1BSSProxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY, WpaFiW1Wpa_supplicant1BSSProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY, WpaFiW1Wpa_supplicant1BSSProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_BSS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_BSS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_PROXY))

typedef struct _WpaFiW1Wpa_supplicant1BSSProxy WpaFiW1Wpa_supplicant1BSSProxy;
typedef struct _WpaFiW1Wpa_supplicant1BSSProxyClass WpaFiW1Wpa_supplicant1BSSProxyClass;
typedef struct _WpaFiW1Wpa_supplicant1BSSProxyPrivate WpaFiW1Wpa_supplicant1BSSProxyPrivate;

struct _WpaFiW1Wpa_supplicant1BSSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WpaFiW1Wpa_supplicant1BSSProxyPrivate *priv;
};

struct _WpaFiW1Wpa_supplicant1BSSProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_bss_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WpaFiW1Wpa_supplicant1BSSProxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_bss_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WpaFiW1Wpa_supplicant1BSS *wpa_fi_w1_wpa_supplicant1_bss_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WpaFiW1Wpa_supplicant1BSS *wpa_fi_w1_wpa_supplicant1_bss_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_fi_w1_wpa_supplicant1_bss_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WpaFiW1Wpa_supplicant1BSS *wpa_fi_w1_wpa_supplicant1_bss_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WpaFiW1Wpa_supplicant1BSS *wpa_fi_w1_wpa_supplicant1_bss_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON (wpa_fi_w1_wpa_supplicant1_bss_skeleton_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON, WpaFiW1Wpa_supplicant1BSSSkeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON, WpaFiW1Wpa_supplicant1BSSSkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON, WpaFiW1Wpa_supplicant1BSSSkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_BSS_SKELETON))

typedef struct _WpaFiW1Wpa_supplicant1BSSSkeleton WpaFiW1Wpa_supplicant1BSSSkeleton;
typedef struct _WpaFiW1Wpa_supplicant1BSSSkeletonClass WpaFiW1Wpa_supplicant1BSSSkeletonClass;
typedef struct _WpaFiW1Wpa_supplicant1BSSSkeletonPrivate WpaFiW1Wpa_supplicant1BSSSkeletonPrivate;

struct _WpaFiW1Wpa_supplicant1BSSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaFiW1Wpa_supplicant1BSSSkeletonPrivate *priv;
};

struct _WpaFiW1Wpa_supplicant1BSSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_bss_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WpaFiW1Wpa_supplicant1BSSSkeleton, g_object_unref)
#endif

WpaFiW1Wpa_supplicant1BSS *wpa_fi_w1_wpa_supplicant1_bss_skeleton_new (void);


G_END_DECLS

#endif /* __DBUSWPABSS_H__ */
