/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __INTROSPECT_H__
#define __INTROSPECT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for io.openthread.BorderRouter */

#define OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER (openthread_io_openthread_border_router_get_type ())
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER, OpenthreadIoOpenthreadBorderRouter))
#define OPENTHREAD_IS_IO_OPENTHREAD_BORDER_ROUTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER))
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER, OpenthreadIoOpenthreadBorderRouterIface))

struct _OpenthreadIoOpenthreadBorderRouter;
typedef struct _OpenthreadIoOpenthreadBorderRouter OpenthreadIoOpenthreadBorderRouter;
typedef struct _OpenthreadIoOpenthreadBorderRouterIface OpenthreadIoOpenthreadBorderRouterIface;

struct _OpenthreadIoOpenthreadBorderRouterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_external_route) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_prefix);

  gboolean (*handle_add_on_mesh_prefix) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_prefix);

  gboolean (*handle_attach) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_factory_reset) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_joiner_start) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_pskd,
    const gchar *arg_provision_url,
    const gchar *arg_vendor_name,
    const gchar *arg_vendor_model,
    const gchar *arg_vendor_sw_version,
    const gchar *arg_vendor_data);

  gboolean (*handle_joiner_stop) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_permit_unsecure_join) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_port,
    guint arg_timeout);

  gboolean (*handle_remove_external_route) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_prefix);

  gboolean (*handle_remove_on_mesh_prefix) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_prefix);

  gboolean (*handle_reset) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_scan) (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

  GVariant * (*get_active_dataset_tlvs) (OpenthreadIoOpenthreadBorderRouter *object);

  guint16  (*get_cca_failure_rate) (OpenthreadIoOpenthreadBorderRouter *object);

  guint16  (*get_channel) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_channel_monitor_channel_quality_map) (OpenthreadIoOpenthreadBorderRouter *object);

  guint  (*get_channel_monitor_sample_count) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_child_table) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_device_role) (OpenthreadIoOpenthreadBorderRouter *object);

  guint64  (*get_ext_pan_id) (OpenthreadIoOpenthreadBorderRouter *object);

  guint64  (*get_extended_address) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_external_routes) (OpenthreadIoOpenthreadBorderRouter *object);

  guchar  (*get_instant_rssi) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_leader_data) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_legacy_ulaprefix) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_link_counters) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_link_mode) (OpenthreadIoOpenthreadBorderRouter *object);

  guint  (*get_link_supported_channel_mask) (OpenthreadIoOpenthreadBorderRouter *object);

  guchar  (*get_local_leader_weight) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_mac_counters) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_mesh_local_prefix) (OpenthreadIoOpenthreadBorderRouter *object);

  GVariant * (*get_neighbor_table) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_network_data) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_network_name) (OpenthreadIoOpenthreadBorderRouter *object);

  guint16  (*get_pan_id) (OpenthreadIoOpenthreadBorderRouter *object);

  guint  (*get_partition_id) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_radio_region) (OpenthreadIoOpenthreadBorderRouter *object);

  guchar  (*get_radio_tx_power) (OpenthreadIoOpenthreadBorderRouter *object);

  guint16  (*get_rloc16) (OpenthreadIoOpenthreadBorderRouter *object);

  guchar  (*get_router_id) (OpenthreadIoOpenthreadBorderRouter *object);

  const gchar * (*get_stable_network_data) (OpenthreadIoOpenthreadBorderRouter *object);

};

GType openthread_io_openthread_border_router_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *openthread_io_openthread_border_router_interface_info (void);
guint openthread_io_openthread_border_router_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void openthread_io_openthread_border_router_complete_scan (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation,
    GVariant *scan_result);

void openthread_io_openthread_border_router_complete_attach (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_permit_unsecure_join (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_joiner_start (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_joiner_stop (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_factory_reset (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_reset (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_add_external_route (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_remove_external_route (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_add_on_mesh_prefix (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);

void openthread_io_openthread_border_router_complete_remove_on_mesh_prefix (
    OpenthreadIoOpenthreadBorderRouter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void openthread_io_openthread_border_router_call_scan (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_scan_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant **out_scan_result,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_scan_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant **out_scan_result,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_attach (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_attach_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_attach_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_permit_unsecure_join (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    guint16 arg_port,
    guint arg_timeout,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_permit_unsecure_join_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_permit_unsecure_join_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    guint16 arg_port,
    guint arg_timeout,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_joiner_start (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    const gchar *arg_pskd,
    const gchar *arg_provision_url,
    const gchar *arg_vendor_name,
    const gchar *arg_vendor_model,
    const gchar *arg_vendor_sw_version,
    const gchar *arg_vendor_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_joiner_start_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_joiner_start_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    const gchar *arg_pskd,
    const gchar *arg_provision_url,
    const gchar *arg_vendor_name,
    const gchar *arg_vendor_model,
    const gchar *arg_vendor_sw_version,
    const gchar *arg_vendor_data,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_joiner_stop (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_joiner_stop_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_joiner_stop_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_factory_reset (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_factory_reset_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_factory_reset_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_reset (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_reset_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_reset_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_add_external_route (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_add_external_route_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_add_external_route_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_remove_external_route (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_remove_external_route_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_remove_external_route_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_add_on_mesh_prefix (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_add_on_mesh_prefix_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_add_on_mesh_prefix_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GError **error);

void openthread_io_openthread_border_router_call_remove_on_mesh_prefix (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_io_openthread_border_router_call_remove_on_mesh_prefix_finish (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_io_openthread_border_router_call_remove_on_mesh_prefix_sync (
    OpenthreadIoOpenthreadBorderRouter *proxy,
    GVariant *arg_prefix,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *openthread_io_openthread_border_router_get_mesh_local_prefix (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_mesh_local_prefix (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_mesh_local_prefix (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

const gchar *openthread_io_openthread_border_router_get_legacy_ulaprefix (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_legacy_ulaprefix (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_legacy_ulaprefix (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

GVariant *openthread_io_openthread_border_router_get_link_mode (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_link_mode (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_link_mode (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

const gchar *openthread_io_openthread_border_router_get_device_role (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_device_role (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_device_role (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

const gchar *openthread_io_openthread_border_router_get_network_name (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_network_name (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_network_name (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

guint16 openthread_io_openthread_border_router_get_pan_id (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_pan_id (OpenthreadIoOpenthreadBorderRouter *object, guint16 value);

guint64 openthread_io_openthread_border_router_get_ext_pan_id (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_ext_pan_id (OpenthreadIoOpenthreadBorderRouter *object, guint64 value);

guint16 openthread_io_openthread_border_router_get_channel (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_channel (OpenthreadIoOpenthreadBorderRouter *object, guint16 value);

guint16 openthread_io_openthread_border_router_get_cca_failure_rate (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_cca_failure_rate (OpenthreadIoOpenthreadBorderRouter *object, guint16 value);

GVariant *openthread_io_openthread_border_router_get_mac_counters (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_mac_counters (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_mac_counters (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

GVariant *openthread_io_openthread_border_router_get_link_counters (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_link_counters (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_link_counters (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

guint openthread_io_openthread_border_router_get_link_supported_channel_mask (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_link_supported_channel_mask (OpenthreadIoOpenthreadBorderRouter *object, guint value);

guint16 openthread_io_openthread_border_router_get_rloc16 (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_rloc16 (OpenthreadIoOpenthreadBorderRouter *object, guint16 value);

guint64 openthread_io_openthread_border_router_get_extended_address (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_extended_address (OpenthreadIoOpenthreadBorderRouter *object, guint64 value);

guchar openthread_io_openthread_border_router_get_router_id (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_router_id (OpenthreadIoOpenthreadBorderRouter *object, guchar value);

GVariant *openthread_io_openthread_border_router_get_leader_data (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_leader_data (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_leader_data (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

const gchar *openthread_io_openthread_border_router_get_network_data (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_network_data (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_network_data (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

const gchar *openthread_io_openthread_border_router_get_stable_network_data (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_stable_network_data (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_stable_network_data (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);

guchar openthread_io_openthread_border_router_get_local_leader_weight (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_local_leader_weight (OpenthreadIoOpenthreadBorderRouter *object, guchar value);

guint openthread_io_openthread_border_router_get_channel_monitor_sample_count (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_channel_monitor_sample_count (OpenthreadIoOpenthreadBorderRouter *object, guint value);

GVariant *openthread_io_openthread_border_router_get_channel_monitor_channel_quality_map (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_channel_monitor_channel_quality_map (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_channel_monitor_channel_quality_map (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

GVariant *openthread_io_openthread_border_router_get_child_table (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_child_table (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_child_table (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

GVariant *openthread_io_openthread_border_router_get_neighbor_table (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_neighbor_table (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_neighbor_table (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

guint openthread_io_openthread_border_router_get_partition_id (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_partition_id (OpenthreadIoOpenthreadBorderRouter *object, guint value);

guchar openthread_io_openthread_border_router_get_instant_rssi (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_instant_rssi (OpenthreadIoOpenthreadBorderRouter *object, guchar value);

guchar openthread_io_openthread_border_router_get_radio_tx_power (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_radio_tx_power (OpenthreadIoOpenthreadBorderRouter *object, guchar value);

GVariant *openthread_io_openthread_border_router_get_external_routes (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_external_routes (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_external_routes (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

GVariant *openthread_io_openthread_border_router_get_active_dataset_tlvs (OpenthreadIoOpenthreadBorderRouter *object);
GVariant *openthread_io_openthread_border_router_dup_active_dataset_tlvs (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_active_dataset_tlvs (OpenthreadIoOpenthreadBorderRouter *object, GVariant *value);

const gchar *openthread_io_openthread_border_router_get_radio_region (OpenthreadIoOpenthreadBorderRouter *object);
gchar *openthread_io_openthread_border_router_dup_radio_region (OpenthreadIoOpenthreadBorderRouter *object);
void openthread_io_openthread_border_router_set_radio_region (OpenthreadIoOpenthreadBorderRouter *object, const gchar *value);


/* ---- */

#define OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY (openthread_io_openthread_border_router_proxy_get_type ())
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY, OpenthreadIoOpenthreadBorderRouterProxy))
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY, OpenthreadIoOpenthreadBorderRouterProxyClass))
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY, OpenthreadIoOpenthreadBorderRouterProxyClass))
#define OPENTHREAD_IS_IO_OPENTHREAD_BORDER_ROUTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY))
#define OPENTHREAD_IS_IO_OPENTHREAD_BORDER_ROUTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_PROXY))

typedef struct _OpenthreadIoOpenthreadBorderRouterProxy OpenthreadIoOpenthreadBorderRouterProxy;
typedef struct _OpenthreadIoOpenthreadBorderRouterProxyClass OpenthreadIoOpenthreadBorderRouterProxyClass;
typedef struct _OpenthreadIoOpenthreadBorderRouterProxyPrivate OpenthreadIoOpenthreadBorderRouterProxyPrivate;

struct _OpenthreadIoOpenthreadBorderRouterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OpenthreadIoOpenthreadBorderRouterProxyPrivate *priv;
};

struct _OpenthreadIoOpenthreadBorderRouterProxyClass
{
  GDBusProxyClass parent_class;
};

GType openthread_io_openthread_border_router_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OpenthreadIoOpenthreadBorderRouterProxy, g_object_unref)
#endif

void openthread_io_openthread_border_router_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OpenthreadIoOpenthreadBorderRouter *openthread_io_openthread_border_router_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OpenthreadIoOpenthreadBorderRouter *openthread_io_openthread_border_router_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void openthread_io_openthread_border_router_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OpenthreadIoOpenthreadBorderRouter *openthread_io_openthread_border_router_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OpenthreadIoOpenthreadBorderRouter *openthread_io_openthread_border_router_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON (openthread_io_openthread_border_router_skeleton_get_type ())
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON, OpenthreadIoOpenthreadBorderRouterSkeleton))
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON, OpenthreadIoOpenthreadBorderRouterSkeletonClass))
#define OPENTHREAD_IO_OPENTHREAD_BORDER_ROUTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON, OpenthreadIoOpenthreadBorderRouterSkeletonClass))
#define OPENTHREAD_IS_IO_OPENTHREAD_BORDER_ROUTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON))
#define OPENTHREAD_IS_IO_OPENTHREAD_BORDER_ROUTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OPENTHREAD_TYPE_IO_OPENTHREAD_BORDER_ROUTER_SKELETON))

typedef struct _OpenthreadIoOpenthreadBorderRouterSkeleton OpenthreadIoOpenthreadBorderRouterSkeleton;
typedef struct _OpenthreadIoOpenthreadBorderRouterSkeletonClass OpenthreadIoOpenthreadBorderRouterSkeletonClass;
typedef struct _OpenthreadIoOpenthreadBorderRouterSkeletonPrivate OpenthreadIoOpenthreadBorderRouterSkeletonPrivate;

struct _OpenthreadIoOpenthreadBorderRouterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OpenthreadIoOpenthreadBorderRouterSkeletonPrivate *priv;
};

struct _OpenthreadIoOpenthreadBorderRouterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType openthread_io_openthread_border_router_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OpenthreadIoOpenthreadBorderRouterSkeleton, g_object_unref)
#endif

OpenthreadIoOpenthreadBorderRouter *openthread_io_openthread_border_router_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (openthread_org_freedesktop_dbus_properties_get_type ())
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OpenthreadOrgFreedesktopDBusProperties))
#define OPENTHREAD_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OpenthreadOrgFreedesktopDBusPropertiesIface))

struct _OpenthreadOrgFreedesktopDBusProperties;
typedef struct _OpenthreadOrgFreedesktopDBusProperties OpenthreadOrgFreedesktopDBusProperties;
typedef struct _OpenthreadOrgFreedesktopDBusPropertiesIface OpenthreadOrgFreedesktopDBusPropertiesIface;

struct _OpenthreadOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_property);

  gboolean (*handle_get_all) (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_property,
    GVariant *arg_value);

  void (*properties_changed) (
    OpenthreadOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType openthread_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *openthread_org_freedesktop_dbus_properties_interface_info (void);
guint openthread_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void openthread_org_freedesktop_dbus_properties_complete_get (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void openthread_org_freedesktop_dbus_properties_complete_get_all (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void openthread_org_freedesktop_dbus_properties_complete_set (
    OpenthreadOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void openthread_org_freedesktop_dbus_properties_emit_properties_changed (
    OpenthreadOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void openthread_org_freedesktop_dbus_properties_call_get (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_org_freedesktop_dbus_properties_call_get_finish (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean openthread_org_freedesktop_dbus_properties_call_get_sync (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void openthread_org_freedesktop_dbus_properties_call_get_all (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_org_freedesktop_dbus_properties_call_get_all_finish (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean openthread_org_freedesktop_dbus_properties_call_get_all_sync (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void openthread_org_freedesktop_dbus_properties_call_set (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean openthread_org_freedesktop_dbus_properties_call_set_finish (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean openthread_org_freedesktop_dbus_properties_call_set_sync (
    OpenthreadOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (openthread_org_freedesktop_dbus_properties_proxy_get_type ())
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OpenthreadOrgFreedesktopDBusPropertiesProxy))
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OpenthreadOrgFreedesktopDBusPropertiesProxyClass))
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OpenthreadOrgFreedesktopDBusPropertiesProxyClass))
#define OPENTHREAD_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define OPENTHREAD_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OpenthreadOrgFreedesktopDBusPropertiesProxy OpenthreadOrgFreedesktopDBusPropertiesProxy;
typedef struct _OpenthreadOrgFreedesktopDBusPropertiesProxyClass OpenthreadOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OpenthreadOrgFreedesktopDBusPropertiesProxyPrivate OpenthreadOrgFreedesktopDBusPropertiesProxyPrivate;

struct _OpenthreadOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OpenthreadOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OpenthreadOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType openthread_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OpenthreadOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void openthread_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OpenthreadOrgFreedesktopDBusProperties *openthread_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OpenthreadOrgFreedesktopDBusProperties *openthread_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void openthread_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OpenthreadOrgFreedesktopDBusProperties *openthread_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OpenthreadOrgFreedesktopDBusProperties *openthread_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (openthread_org_freedesktop_dbus_properties_skeleton_get_type ())
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OpenthreadOrgFreedesktopDBusPropertiesSkeleton))
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OpenthreadOrgFreedesktopDBusPropertiesSkeletonClass))
#define OPENTHREAD_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OpenthreadOrgFreedesktopDBusPropertiesSkeletonClass))
#define OPENTHREAD_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define OPENTHREAD_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OPENTHREAD_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OpenthreadOrgFreedesktopDBusPropertiesSkeleton OpenthreadOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OpenthreadOrgFreedesktopDBusPropertiesSkeletonClass OpenthreadOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OpenthreadOrgFreedesktopDBusPropertiesSkeletonPrivate OpenthreadOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OpenthreadOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OpenthreadOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OpenthreadOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType openthread_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OpenthreadOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OpenthreadOrgFreedesktopDBusProperties *openthread_org_freedesktop_dbus_properties_skeleton_new (void);


G_END_DECLS

#endif /* __INTROSPECT_H__ */
