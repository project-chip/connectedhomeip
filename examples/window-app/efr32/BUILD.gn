# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/efr32_sdk.gni")
import("//build_overrides/pigweed.gni")

import("${build_root}/config/defaults.gni")
import("${efr32_sdk_build_root}/efr32_executable.gni")
import("${efr32_sdk_build_root}/efr32_sdk.gni")

assert(current_os == "freertos")

project_dir = "${chip_root}/examples/window-app"
efr32_project_dir = "${project_dir}/efr32"
examples_plat_dir = "${chip_root}/examples/platform/efr32"

declare_args() {
  # Dump memory usage at link time.
  chip_print_memory_usage = false

  # PIN code for PASE session establishment.
  setupPinCode = 73141520

  # Monitor & log memory usage at runtime.
  enable_heap_monitoring = false
}

show_qr_code = true

# BRD4166A --> ThunderBoard Sense 2 (No LCD)
if (efr32_board == "BRD4166A" || efr32_board == "BRD4180A") {
  show_qr_code = false
}

efr32_sdk("sdk") {
  sources = [
    "${efr32_project_dir}/include/CHIPProjectConfig.h",
    "${efr32_project_dir}/include/FreeRTOSConfig.h",
  ]

  include_dirs = [
    "${chip_root}/src/platform/EFR32",
    "${efr32_project_dir}/include",
    "${examples_plat_dir}",
    "${examples_plat_dir}/${efr32_family}/${efr32_board}",
  ]

  defines = [
    "BOARD_ID=${efr32_board}",
    "CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE=${setupPinCode}",
    "SL_HEAP_SIZE=(16 * 1024)",
  ]
}

efr32_executable("window_app") {
  output_name = "chip-efr32-window-example.out"
  output_dir = root_out_dir

  sources = [
    "${examples_plat_dir}/LEDWidget.cpp",
    "${examples_plat_dir}/init_efrPlatform.cpp",
    "${examples_plat_dir}/uart.c",
    "${project_dir}/common/src/WindowApp.cpp",
    "${project_dir}/common/src/ZclCallbacks.cpp",
    "src/WindowAppImpl.cpp",
    "src/main.cpp",
  ]

  deps = [
    ":sdk",
    "${chip_root}/examples/common/QRCode",
    "${chip_root}/examples/window-app/common:window-common",
    "${chip_root}/src/lib",
    "${chip_root}/src/setup_payload",
    "${chip_root}/third_party/openthread/platforms:libopenthread-platform",
    "${chip_root}/third_party/openthread/platforms:libopenthread-platform-utils",
    "${chip_root}/third_party/openthread/repo:libopenthread-cli-ftd",
    "${chip_root}/third_party/openthread/repo:libopenthread-ftd",
  ]

  include_dirs = [
    "include",
    "${project_dir}/common/include",
  ]

  defines = []

  if (show_qr_code) {
    sources += [
      "${examples_plat_dir}/display/lcd.c",
      "src/LcdPainter.cpp",
    ]

    defines += [ "DISPLAY_ENABLED" ]
  }

  if (enable_heap_monitoring) {
    defines += [ "HEAP_MONITORING" ]

    sources += [ "${examples_plat_dir}/MemMonitoring.cpp" ]
  }

  if (efr32_family == "efr32mg12") {
    ldscript = "${examples_plat_dir}/ldscripts/efr32-MG12P.ld"
  } else if (efr32_family == "efr32mg21") {
    ldscript = "${examples_plat_dir}/ldscripts/efr32-MG21.ld"
  }

  inputs = [ ldscript ]

  ldflags = [ "-T" + rebase_path(ldscript, root_build_dir) ]

  if (chip_print_memory_usage) {
    ldflags += [
      "-Wl,--print-memory-usage",
      "-fstack-usage",
    ]
  }
}

group("efr32") {
  deps = [ ":window_app" ]
}

group("default") {
  deps = [ ":efr32" ]
}
