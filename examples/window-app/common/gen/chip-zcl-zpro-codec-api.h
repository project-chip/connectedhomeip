/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <app/util/basic-types.h>
#include <lib/support/Span.h>
#include <stdint.h>
#include <system/SystemPacketBuffer.h>

/*----------------------------------------------------------------------------*\
| Cluster Name                                                        |   ID   |
|---------------------------------------------------------------------+--------|
| Basic                                                               | 0x0028 |
| EthernetNetworkDiagnostics                                          | 0x0037 |
| GeneralCommissioning                                                | 0x0030 |
| GeneralDiagnostics                                                  | 0x0033 |
| NetworkCommissioning                                                | 0x0031 |
| OperationalCredentials                                              | 0x003E |
| SoftwareDiagnostics                                                 | 0x0034 |
| ThreadNetworkDiagnostics                                            | 0x0035 |
| WiFiNetworkDiagnostics                                              | 0x0036 |
| WindowCovering                                                      | 0x0102 |
| WindowCovering                                                      | 0x0102 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster WindowCovering                                              | 0x0102 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * WindowCoveringDownClose                                           |   0x01 |
| * WindowCoveringGoToLiftPercentage                                  |   0x05 |
| * WindowCoveringGoToLiftValue                                       |   0x04 |
| * WindowCoveringGoToTiltPercentage                                  |   0x08 |
| * WindowCoveringGoToTiltValue                                       |   0x07 |
| * WindowCoveringStop                                                |   0x02 |
| * WindowCoveringUpOpen                                              |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * WindowCoveringType                                                | 0x0000 |
| * CurrentPositionLift                                               | 0x0003 |
| * CurrentPositionTilt                                               | 0x0004 |
| * ConfigStatus                                                      | 0x0007 |
| * InstalledOpenLimitLift                                            | 0x0010 |
| * InstalledClosedLimitLift                                          | 0x0011 |
| * InstalledOpenLimitTilt                                            | 0x0012 |
| * InstalledClosedLimitTilt                                          | 0x0013 |
| * Mode                                                              | 0x0017 |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a Window Covering server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterDiscoverAttributes(uint8_t seqNum,
                                                                               chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the window covering type attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadWindowCoveringTypeAttribute(uint8_t seqNum,
                                                                                            chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the current position - lift attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadCurrentPositionLiftAttribute(uint8_t seqNum,
                                                                                             chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server configure report command for the current position - lift attribute into buffer including the
 * APS frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterConfigureCurrentPositionLiftAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint,
                                                                 uint16_t minInterval, uint16_t maxInterval, uint16_t change);

/**
 * @brief
 *    Encode a Window Covering server read command for the current position - tilt attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadCurrentPositionTiltAttribute(uint8_t seqNum,
                                                                                             chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server configure report command for the current position - tilt attribute into buffer including the
 * APS frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterConfigureCurrentPositionTiltAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint,
                                                                 uint16_t minInterval, uint16_t maxInterval, uint16_t change);

/**
 * @brief
 *    Encode a Window Covering server read command for the config status attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadConfigStatusAttribute(uint8_t seqNum,
                                                                                      chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the installed open limit - lift attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterReadInstalledOpenLimitLiftAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the installed closed limit - lift attribute into buffer including the APS
 * frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterReadInstalledClosedLimitLiftAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the installed open limit - tilt attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterReadInstalledOpenLimitTiltAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the installed closed limit - tilt attribute into buffer including the APS
 * frame
 */
chip::System::PacketBufferHandle
encodeWindowCoveringClusterReadInstalledClosedLimitTiltAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server read command for the mode attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadModeAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Window Covering server write command for the mode attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterWriteModeAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint,
                                                                               uint8_t mode);

/**
 * @brief
 *    Encode a Window Covering server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeWindowCoveringClusterReadClusterRevisionAttribute(uint8_t seqNum,
                                                                                         chip::EndpointId destinationEndpoint);
