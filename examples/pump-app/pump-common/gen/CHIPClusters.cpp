/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include "CHIPClusters.h"

#include <cstdint>

#include "chip-zcl-zpro-codec-api.h"
#include <lib/support/Span.h>

namespace chip {
namespace Controller {

// TODO(#4502): onCompletion is not used by IM for now.
// TODO(#4503): length should be passed to commands when byte string is in argument list.
// TODO(#4503): Commands should take group id as an argument.

// TemperatureMeasurement Cluster Commands
// TemperatureMeasurement Cluster Attributes
CHIP_ERROR TemperatureMeasurementCluster::DiscoverAttributes(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum                            = mDevice->GetNextSequenceNumber();
    System::PacketBufferHandle encodedCommand = encodeTemperatureMeasurementClusterDiscoverAttributes(seqNum, mEndpoint);
    return SendCommand(seqNum, std::move(encodedCommand), onSuccessCallback, onFailureCallback);
}
CHIP_ERROR TemperatureMeasurementCluster::ReadAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    CHIP_ERROR err = CHIP_NO_ERROR;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = 0x0000;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    if (onSuccessCallback != nullptr || onFailureCallback != nullptr)
    {
        mDevice->AddResponseHandler(seqNum, onSuccessCallback, onFailureCallback);
    }
    // The application context is used to identify different requests from client applicaiton the type of it is intptr_t, here we
    // use the seqNum.
    err = chip::app::InteractionModelEngine::GetInstance()->SendReadRequest(
        mDevice->GetDeviceId(), 0, nullptr /*event path params list*/, 0, &attributePath, 1, 0 /* event number */,
        seqNum /* application context */);
    if (err != CHIP_NO_ERROR)
    {
        mDevice->CancelResponseHandler(seqNum);
    }
    return err;
}

CHIP_ERROR TemperatureMeasurementCluster::ConfigureAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint16_t minInterval, uint16_t maxInterval,
                                                                          int16_t change)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    System::PacketBufferHandle encodedCommand =
        encodeTemperatureMeasurementClusterConfigureMeasuredValueAttribute(seqNum, mEndpoint, minInterval, maxInterval, change);
    return SendCommand(seqNum, std::move(encodedCommand), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TemperatureMeasurementCluster::ReportAttributeMeasuredValue(Callback::Cancelable * onReportCallback)
{
    return RequestAttributeReporting(0x0000, onReportCallback);
}

CHIP_ERROR TemperatureMeasurementCluster::ReadAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    CHIP_ERROR err = CHIP_NO_ERROR;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = 0x0001;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    if (onSuccessCallback != nullptr || onFailureCallback != nullptr)
    {
        mDevice->AddResponseHandler(seqNum, onSuccessCallback, onFailureCallback);
    }
    // The application context is used to identify different requests from client applicaiton the type of it is intptr_t, here we
    // use the seqNum.
    err = chip::app::InteractionModelEngine::GetInstance()->SendReadRequest(
        mDevice->GetDeviceId(), 0, nullptr /*event path params list*/, 0, &attributePath, 1, 0 /* event number */,
        seqNum /* application context */);
    if (err != CHIP_NO_ERROR)
    {
        mDevice->CancelResponseHandler(seqNum);
    }
    return err;
}

CHIP_ERROR TemperatureMeasurementCluster::ReadAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    CHIP_ERROR err = CHIP_NO_ERROR;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = 0x0002;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    if (onSuccessCallback != nullptr || onFailureCallback != nullptr)
    {
        mDevice->AddResponseHandler(seqNum, onSuccessCallback, onFailureCallback);
    }
    // The application context is used to identify different requests from client applicaiton the type of it is intptr_t, here we
    // use the seqNum.
    err = chip::app::InteractionModelEngine::GetInstance()->SendReadRequest(
        mDevice->GetDeviceId(), 0, nullptr /*event path params list*/, 0, &attributePath, 1, 0 /* event number */,
        seqNum /* application context */);
    if (err != CHIP_NO_ERROR)
    {
        mDevice->CancelResponseHandler(seqNum);
    }
    return err;
}

CHIP_ERROR TemperatureMeasurementCluster::ReadAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    CHIP_ERROR err = CHIP_NO_ERROR;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = 0xFFFD;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    if (onSuccessCallback != nullptr || onFailureCallback != nullptr)
    {
        mDevice->AddResponseHandler(seqNum, onSuccessCallback, onFailureCallback);
    }
    // The application context is used to identify different requests from client applicaiton the type of it is intptr_t, here we
    // use the seqNum.
    err = chip::app::InteractionModelEngine::GetInstance()->SendReadRequest(
        mDevice->GetDeviceId(), 0, nullptr /*event path params list*/, 0, &attributePath, 1, 0 /* event number */,
        seqNum /* application context */);
    if (err != CHIP_NO_ERROR)
    {
        mDevice->CancelResponseHandler(seqNum);
    }
    return err;
}

} // namespace Controller
} // namespace chip
