/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#ifndef CHIP_CLUSTERS_H
#define CHIP_CLUSTERS_H

#import <Foundation/Foundation.h>

@class CHIPDevice;

typedef void (^ResponseHandler)(NSError * _Nullable error, NSDictionary * _Nullable values);

NS_ASSUME_NONNULL_BEGIN

/**
 * CHIPCluster
 *    This is the base class for clusters.
 */
@interface CHIPCluster : NSObject

- (nullable instancetype)initWithDevice:(CHIPDevice *)device endpoint:(uint8_t)endpoint queue:(dispatch_queue_t)queue NS_DESIGNATED_INITIALIZER;
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)new NS_UNAVAILABLE;

@end



/**
 * Cluster Groups
 *    
 */
@interface CHIPGroups : CHIPCluster

- (void)addGroup:(uint16_t)groupId groupName:(NSString *)groupName completionHandler:(ResponseHandler)completionHandler;
- (void)addGroupIfIdentifying:(uint16_t)groupId groupName:(NSString *)groupName completionHandler:(ResponseHandler)completionHandler;
- (void)getGroupMembership:(uint8_t)groupCount groupList:(uint16_t)groupList completionHandler:(ResponseHandler)completionHandler;
- (void)removeAllGroups:(ResponseHandler)completionHandler;
- (void)removeGroup:(uint16_t)groupId completionHandler:(ResponseHandler)completionHandler;
- (void)viewGroup:(uint16_t)groupId completionHandler:(ResponseHandler)completionHandler;

- (void)readAttributeNameSupport:(ResponseHandler)completionHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end



/**
 * Cluster Identify
 *    
 */
@interface CHIPIdentify : CHIPCluster

- (void)identify:(uint16_t)identifyTime completionHandler:(ResponseHandler)completionHandler;
- (void)identifyQuery:(ResponseHandler)completionHandler;

- (void)readAttributeIdentifyTime:(ResponseHandler)completionHandler;
- (void)writeAttributeIdentifyTime:(uint16_t)value completionHandler:(ResponseHandler)completionHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end



/**
 * Cluster Identify
 *    
 */
@interface CHIPIdentify : CHIPCluster

- (void)identify:(uint16_t)identifyTime completionHandler:(ResponseHandler)completionHandler;
- (void)identifyQuery:(ResponseHandler)completionHandler;

- (void)readAttributeIdentifyTime:(ResponseHandler)completionHandler;
- (void)writeAttributeIdentifyTime:(uint16_t)value completionHandler:(ResponseHandler)completionHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end



/**
 * Cluster On/off
 *    
 */
@interface CHIPOnOff : CHIPCluster

- (void)off:(ResponseHandler)completionHandler;
- (void)on:(ResponseHandler)completionHandler;
- (void)toggle:(ResponseHandler)completionHandler;

- (void)readAttributeOnOff:(ResponseHandler)completionHandler;
- (void) configureAttributeOnOff:(uint16_t)minInterval  maxInterval:(uint16_t)maxInterval completionHandler:(ResponseHandler)completionHandler;
- (void) reportAttributeOnOff:(ResponseHandler)reportHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end



/**
 * Cluster Pump Configuration and Control
 *    
 */
@interface CHIPPumpConfigurationAndControl : CHIPCluster


- (void)readAttributeMaxPressure:(ResponseHandler)completionHandler;
- (void)readAttributeMaxSpeed:(ResponseHandler)completionHandler;
- (void)readAttributeMaxFlow:(ResponseHandler)completionHandler;
- (void)readAttributeEffectiveOperationMode:(ResponseHandler)completionHandler;
- (void)readAttributeEffectiveControlMode:(ResponseHandler)completionHandler;
- (void)readAttributeCapacity:(ResponseHandler)completionHandler;
- (void) configureAttributeCapacity:(uint16_t)minInterval  maxInterval:(uint16_t)maxInterval change:(int16_t)change completionHandler:(ResponseHandler)completionHandler;
- (void) reportAttributeCapacity:(ResponseHandler)reportHandler;
- (void)readAttributeOperationMode:(ResponseHandler)completionHandler;
- (void)writeAttributeOperationMode:(uint8_t)value completionHandler:(ResponseHandler)completionHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end



/**
 * Cluster Scenes
 *    
 */
@interface CHIPScenes : CHIPCluster

- (void)addScene:(uint16_t)groupId sceneId:(uint8_t)sceneId transitionTime:(uint16_t)transitionTime sceneName:(NSString *)sceneName clusterId:(uint16_t)clusterId length:(uint8_t)length value:(uint8_t)value completionHandler:(ResponseHandler)completionHandler;
- (void)getSceneMembership:(uint16_t)groupId completionHandler:(ResponseHandler)completionHandler;
- (void)recallScene:(uint16_t)groupId sceneId:(uint8_t)sceneId transitionTime:(uint16_t)transitionTime completionHandler:(ResponseHandler)completionHandler;
- (void)removeAllScenes:(uint16_t)groupId completionHandler:(ResponseHandler)completionHandler;
- (void)removeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId completionHandler:(ResponseHandler)completionHandler;
- (void)storeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId completionHandler:(ResponseHandler)completionHandler;
- (void)viewScene:(uint16_t)groupId sceneId:(uint8_t)sceneId completionHandler:(ResponseHandler)completionHandler;

- (void)readAttributeSceneCount:(ResponseHandler)completionHandler;
- (void)readAttributeCurrentScene:(ResponseHandler)completionHandler;
- (void)readAttributeCurrentGroup:(ResponseHandler)completionHandler;
- (void)readAttributeSceneValid:(ResponseHandler)completionHandler;
- (void)readAttributeNameSupport:(ResponseHandler)completionHandler;
- (void)readAttributeClusterRevision:(ResponseHandler)completionHandler;

@end


NS_ASSUME_NONNULL_END

#endif /* CHIP_CLUSTERS_H */
