/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "app/util/util.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

namespace Groups {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ADD_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            const uint8_t * groupName;
            bool groupNameExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(groupName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterAddGroupCallback(groupId, const_cast<uint8_t *>(groupName));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            const uint8_t * groupName;
            bool groupNameExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(groupName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId, const_cast<uint8_t *>(groupName));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t groupCount;
            bool groupCountExists = false;
            /* TYPE WARNING: array array defaults to */ uint8_t * groupList;
            bool groupListExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupCountExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupCount);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupCountExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupListExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // Just for compatibility, we will add array type support in IM later.
                    TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>(groupList));
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupListExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterGetGroupMembershipCallback(groupCount, groupList);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterRemoveAllGroupsCallback();
            break;
        }
        case ZCL_REMOVE_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterRemoveGroupCallback(groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_VIEW_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterViewGroupCallback(groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_GROUPS_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Groups

namespace Identify {

void DispatchClientCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_IDENTIFY_QUERY_RESPONSE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t timeout;
            bool timeoutExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (timeoutExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeout);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfIdentifyClusterIdentifyQueryResponseCallback(timeout);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_IDENTIFY_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Identify

namespace Identify {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_IDENTIFY_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t identifyTime;
            bool identifyTimeExists     = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (identifyTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(identifyTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        identifyTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfIdentifyClusterIdentifyCallback(identifyTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_IDENTIFY_QUERY_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfIdentifyClusterIdentifyQueryCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_IDENTIFY_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Identify

namespace OnOff {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_OFF_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOffCallback();
            break;
        }
        case ZCL_ON_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOnCallback();
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterToggleCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_ON_OFF_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace OnOff

namespace Scenes {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ADD_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            const uint8_t * sceneName;
            bool sceneNameExists = false;
            /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
            bool extensionFieldSetsExists = false;
            uint32_t validArgumentCount   = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (sceneNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(sceneName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (extensionFieldSetsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // Just for compatibility, we will add array type support in IM later.
                    TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>(extensionFieldSets));
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        extensionFieldSetsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterAddSceneCallback(groupId, sceneId, transitionTime, const_cast<uint8_t *>(sceneName),
                                                     extensionFieldSets);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterGetSceneMembershipCallback(groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_RECALL_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRecallSceneCallback(groupId, sceneId, transitionTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_ALL_SCENES_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRemoveAllScenesCallback(groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRemoveSceneCallback(groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STORE_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterStoreSceneCallback(groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_VIEW_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterViewSceneCallback(groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_SCENES_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Scenes

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    case ZCL_GROUPS_CLUSTER_ID:
        clusters::Groups::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_IDENTIFY_CLUSTER_ID:
        clusters::Identify::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_ON_OFF_CLUSTER_ID:
        clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_SCENES_CLUSTER_ID:
        clusters::Scenes::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound, Protocols::SecureChannel::Id,
                                    Protocols::SecureChannel::kProtocolCodeGeneralFailure);
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

} // namespace app
} // namespace chip
