// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct LabelStruct {
    CHAR_STRING label = 1;
    CHAR_STRING value = 2;
}

server cluster Basic = 40 {
  critical event StartUp = 0 {
    INT32U softwareVersion = 0;
  }

  critical event ShutDown = 1 {
  }

  info event Leave = 2 {
  }

  info event ReachableChanged = 3 {
    boolean reachableNewValue = 0;
  }

  attribute(readonly) int16u interactionModelVersion = 0;
  attribute(readonly) char_string vendorName = 1;
  attribute(readonly) vendor_id vendorID = 2;
  attribute(readonly) char_string productName = 3;
  attribute(readonly) int16u productID = 4;
  attribute(writable) char_string nodeLabel = 5;
  attribute(writable) char_string location = 6;
  attribute(readonly) int16u hardwareVersion = 7;
  attribute(readonly) char_string hardwareVersionString = 8;
  attribute(readonly) int32u softwareVersion = 9;
  attribute(readonly) char_string softwareVersionString = 10;
  attribute(readonly) int16u clusterRevision = 65533;

  command MfgSpecificPing(): DefaultSuccess = 0;
}

server cluster FixedLabel = 64 {
  attribute(readonly) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfoType {
    INT32U failSafeExpiryLengthMs = 1;
  }

  attribute(writable) int64u breadcrumb = 0;
  attribute(readonly) BasicCommissioningInfoType basicCommissioningInfoList[] = 1;
  attribute(readonly) enum8 regulatoryConfig = 2;
  attribute(readonly) enum8 locationCapability = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds = 0;
    INT64U breadcrumb = 1;
    INT32U timeoutMs = 2;
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location = 0;
    CHAR_STRING countryCode = 1;
    INT64U breadcrumb = 2;
    INT32U timeoutMs = 3;
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster LocalizationConfiguration = 43 {
  attribute(writable) char_string activeLocale = 1;
  attribute(readonly) CHAR_STRING supportedLocales[] = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  struct NetworkInfo {
    OCTET_STRING networkID = 1;
    BOOLEAN connected = 2;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 security = 1;
    OCTET_STRING ssid = 2;
    OCTET_STRING bssid = 3;
    INT16U channel = 4;
    WiFiBand wiFiBand = 5;
    INT8S rssi = 6;
  }

  struct ThreadInterfaceScanResult {
    INT64U panId = 1;
    INT64U extendedPanId = 2;
    CHAR_STRING networkName = 3;
    INT16U channel = 4;
    INT8U version = 5;
    INT64U extendedAddress = 6;
    INT8S rssi = 7;
    INT8U lqi = 8;
  }

  attribute(readonly) int8u maxNetworks = 0;
  attribute(readonly) NetworkInfo networks[] = 1;
  attribute(readonly) int8u scanMaxTimeSeconds = 2;
  attribute(readonly) int8u connectMaxTimeSeconds = 3;
  attribute(writable) boolean interfaceEnabled = 4;
  attribute(readonly) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(readonly) octet_string lastNetworkID = 6;
  attribute(readonly) int32u lastConnectErrorValue = 7;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly) int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING operationalDataset = 0;
    INT64U breadcrumb = 1;
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING ssid = 0;
    OCTET_STRING credentials = 1;
    INT64U breadcrumb = 2;
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING networkID = 0;
    INT64U breadcrumb = 1;
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING networkID = 0;
    INT64U breadcrumb = 1;
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING networkID = 0;
    INT8U networkIndex = 1;
    INT64U breadcrumb = 2;
  }

  request struct ScanNetworksRequest {
    OCTET_STRING ssid = 0;
    INT64U breadcrumb = 1;
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
    INT32S errorValue = 2;
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
    optional WiFiInterfaceScanResult wiFiScanResults[] = 2;
    optional ThreadInterfaceScanResult threadScanResults[] = 3;
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

client cluster OtaSoftwareUpdateProvider = 41 {
  enum OTAApplyUpdateAction : ENUM8 {
    kProceed = 0;
    kAwaitNextAction = 1;
    kDiscontinue = 2;
  }

  enum OTADownloadProtocol : ENUM8 {
    kBDXSynchronous = 0;
    kBDXAsynchronous = 1;
    kHttps = 2;
    kVendorSpecific = 3;
  }

  enum OTAQueryStatus : ENUM8 {
    kUpdateAvailable = 0;
    kBusy = 1;
    kNotAvailable = 2;
    kDownloadProtocolNotSupported = 3;
  }

  attribute(readonly) int16u clusterRevision = 65533;

  request struct ApplyUpdateRequestRequest {
    OCTET_STRING updateToken = 0;
    INT32U newVersion = 1;
  }

  request struct NotifyUpdateAppliedRequest {
    OCTET_STRING updateToken = 0;
    INT32U softwareVersion = 1;
  }

  request struct QueryImageRequest {
    vendor_id vendorId = 0;
    INT16U productId = 1;
    INT32U softwareVersion = 2;
    OTADownloadProtocol protocolsSupported[] = 3;
    optional INT16U hardwareVersion = 4;
    optional CHAR_STRING location = 5;
    optional BOOLEAN requestorCanConsent = 6;
    optional OCTET_STRING metadataForProvider = 7;
  }

  response struct ApplyUpdateResponse {
    OTAApplyUpdateAction action = 0;
    INT32U delayedActionTime = 1;
  }

  response struct QueryImageResponse {
    OTAQueryStatus status = 0;
    optional INT32U delayedActionTime = 1;
    optional CHAR_STRING imageURI = 2;
    optional INT32U softwareVersion = 3;
    optional CHAR_STRING softwareVersionString = 4;
    optional OCTET_STRING updateToken = 5;
    optional BOOLEAN userConsentNeeded = 6;
    optional OCTET_STRING metadataForRequestor = 7;
  }

  command ApplyUpdateRequest(ApplyUpdateRequestRequest): ApplyUpdateResponse = 2;
  command NotifyUpdateApplied(NotifyUpdateAppliedRequest): DefaultSuccess = 4;
  command QueryImage(QueryImageRequest): QueryImageResponse = 0;
}

server cluster OtaSoftwareUpdateRequestor = 42 {
  enum OTAAnnouncementReason : ENUM8 {
    kSimpleAnnouncement = 0;
    kUpdateAvailable = 1;
    kUrgentUpdateAvailable = 2;
  }

  enum OTAChangeReasonEnum : ENUM8 {
    kUnknown = 0;
    kSuccess = 1;
    kFailure = 2;
    kTimeOut = 3;
    kDelayByProvider = 4;
  }

  enum OTAUpdateStateEnum : ENUM8 {
    kUnknown = 0;
    kIdle = 1;
    kQuerying = 2;
    kDelayedOnQuery = 3;
    kDownloading = 4;
    kApplying = 5;
    kDelayedOnApply = 6;
    kRollingBack = 7;
    kDelayedOnUserConsent = 8;
  }

  struct ProviderLocation {
    fabric_idx fabricIndex = 0;
    node_id providerNodeID = 1;
    endpoint_no endpoint = 2;
  }

  info event StateTransition = 0 {
    nullable OTAUpdateStateEnum previousState = 0;
    OTAUpdateStateEnum newState = 1;
    OTAChangeReasonEnum reason = 2;
    nullable INT32U targetSoftwareVersion = 3;
  }

  critical event VersionApplied = 1 {
    INT32U softwareVersion = 0;
    INT16U productID = 1;
  }

  info event DownloadError = 2 {
    INT32U softwareVersion = 0;
    INT64U bytesDownloaded = 1;
    INT8U progressPercent = 2;
    nullable INT64S platformCode = 3;
  }

  attribute(writable) ProviderLocation defaultOtaProviders[] = 0;
  attribute(readonly) boolean updatePossible = 1;
  attribute(readonly) OTAUpdateStateEnum updateState = 2;
  attribute(readonly) int8u updateStateProgress = 3;
  attribute(readonly) int16u clusterRevision = 65533;

  request struct AnnounceOtaProviderRequest {
    node_id providerNodeId = 0;
    vendor_id vendorId = 1;
    OTAAnnouncementReason announcementReason = 2;
    optional OCTET_STRING metadataForNode = 3;
    endpoint_no endpoint = 4;
  }

  command AnnounceOtaProvider(AnnounceOtaProviderRequest): DefaultSuccess = 0;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    INT8U fabricIndex = 1;
    OCTET_STRING rootPublicKey = 2;
    INT16U vendorId = 3;
    FABRIC_ID fabricId = 4;
    NODE_ID nodeId = 5;
    CHAR_STRING label = 6;
  }

  attribute(readonly) FabricDescriptor fabricsList[] = 1;
  attribute(readonly) int8u supportedFabrics = 2;
  attribute(readonly) int8u commissionedFabrics = 3;
  attribute(readonly) OCTET_STRING trustedRootCertificates[] = 4;
  attribute(readonly) fabric_idx currentFabricIndex = 5;
  attribute(readonly) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
    OCTET_STRING IPKValue = 2;
    NODE_ID caseAdminNode = 3;
    INT16U adminVendorId = 4;
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING rootCertificate = 0;
  }

  request struct AttestationRequestRequest {
    OCTET_STRING attestationNonce = 0;
  }

  request struct CertificateChainRequestRequest {
    INT8U certificateType = 0;
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce = 0;
  }

  request struct RemoveFabricRequest {
    INT8U fabricIndex = 0;
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING trustedRootIdentifier = 0;
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING label = 0;
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
  }

  response struct AttestationResponse {
    OCTET_STRING attestationElements = 0;
    OCTET_STRING signature = 1;
  }

  response struct CertificateChainResponse {
    OCTET_STRING certificate = 0;
  }

  response struct NOCResponse {
    INT8U statusCode = 0;
    INT8U fabricIndex = 1;
    CHAR_STRING debugText = 2;
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements = 0;
    OCTET_STRING attestationSignature = 1;
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}

server cluster UserLabel = 65 {
  attribute(writable) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}


endpoint 0 {
  server  cluster Basic;
  server  cluster FixedLabel;
  server  cluster GeneralCommissioning;
  server  cluster LocalizationConfiguration;
  server  cluster NetworkCommissioning;
  binding cluster OtaSoftwareUpdateProvider;
  server  cluster OtaSoftwareUpdateRequestor;
  server  cluster OperationalCredentials;
  server  cluster UserLabel;
}

