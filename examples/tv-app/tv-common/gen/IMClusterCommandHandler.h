/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/Command.h>
#include <core/CHIPTLV.h>

using namespace chip;
using namespace chip::app;
using namespace chip::app::clusters;

namespace chip {
namespace app {
namespace clusters {
namespace BarrierControl {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnBarrierControlGoToPercentCommandCallback(app::Command *, EndpointId, uint8_t percentOpen);
void OnBarrierControlStopCommandCallback(app::Command *, EndpointId);
} // namespace BarrierControl

namespace Basic {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnResetToFactoryDefaultsCommandCallback(app::Command *, EndpointId);
} // namespace Basic

namespace ColorControl {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnMoveColorCommandCallback(app::Command *, EndpointId, int16_t rateX, int16_t rateY, uint8_t optionsMask,
                                uint8_t optionsOverride);
void OnMoveColorTemperatureCommandCallback(app::Command *, EndpointId, uint8_t moveMode, uint16_t rate,
                                           uint16_t colorTemperatureMinimum, uint16_t colorTemperatureMaximum, uint8_t optionsMask,
                                           uint8_t optionsOverride);
void OnMoveHueCommandCallback(app::Command *, EndpointId, uint8_t moveMode, uint8_t rate, uint8_t optionsMask,
                              uint8_t optionsOverride);
void OnMoveSaturationCommandCallback(app::Command *, EndpointId, uint8_t moveMode, uint8_t rate, uint8_t optionsMask,
                                     uint8_t optionsOverride);
void OnMoveToColorCommandCallback(app::Command *, EndpointId, uint16_t colorX, uint16_t colorY, uint16_t transitionTime,
                                  uint8_t optionsMask, uint8_t optionsOverride);
void OnMoveToColorTemperatureCommandCallback(app::Command *, EndpointId, uint16_t colorTemperature, uint16_t transitionTime,
                                             uint8_t optionsMask, uint8_t optionsOverride);
void OnMoveToHueCommandCallback(app::Command *, EndpointId, uint8_t hue, uint8_t direction, uint16_t transitionTime,
                                uint8_t optionsMask, uint8_t optionsOverride);
void OnMoveToHueAndSaturationCommandCallback(app::Command *, EndpointId, uint8_t hue, uint8_t saturation, uint16_t transitionTime,
                                             uint8_t optionsMask, uint8_t optionsOverride);
void OnMoveToSaturationCommandCallback(app::Command *, EndpointId, uint8_t saturation, uint16_t transitionTime, uint8_t optionsMask,
                                       uint8_t optionsOverride);
void OnStepColorCommandCallback(app::Command *, EndpointId, int16_t stepX, int16_t stepY, uint16_t transitionTime,
                                uint8_t optionsMask, uint8_t optionsOverride);
void OnStepColorTemperatureCommandCallback(app::Command *, EndpointId, uint8_t stepMode, uint16_t stepSize, uint16_t transitionTime,
                                           uint16_t colorTemperatureMinimum, uint16_t colorTemperatureMaximum, uint8_t optionsMask,
                                           uint8_t optionsOverride);
void OnStepHueCommandCallback(app::Command *, EndpointId, uint8_t stepMode, uint8_t stepSize, uint8_t transitionTime,
                              uint8_t optionsMask, uint8_t optionsOverride);
void OnStepSaturationCommandCallback(app::Command *, EndpointId, uint8_t stepMode, uint8_t stepSize, uint8_t transitionTime,
                                     uint8_t optionsMask, uint8_t optionsOverride);
void OnStopMoveStepCommandCallback(app::Command *, EndpointId, uint8_t optionsMask, uint8_t optionsOverride);
} // namespace ColorControl

namespace ContentLaunch {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnLaunchContentCommandCallback(app::Command *, EndpointId);
void OnLaunchURLCommandCallback(app::Command *, EndpointId);
} // namespace ContentLaunch

namespace DoorLock {
void DispatchClientCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnLockDoorResponseCommandCallback(app::Command *, EndpointId, uint8_t status);
void OnUnlockDoorResponseCommandCallback(app::Command *, EndpointId, uint8_t status);
} // namespace DoorLock

namespace DoorLock {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnClearAllPinsCommandCallback(app::Command *, EndpointId);
void OnClearAllRfidsCommandCallback(app::Command *, EndpointId);
void OnClearHolidayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId);
void OnClearPinCommandCallback(app::Command *, EndpointId, uint16_t userId);
void OnClearRfidCommandCallback(app::Command *, EndpointId, uint16_t userId);
void OnClearWeekdayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId);
void OnClearYeardayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId);
void OnGetHolidayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId);
void OnGetLogRecordCommandCallback(app::Command *, EndpointId, uint16_t logIndex);
void OnGetPinCommandCallback(app::Command *, EndpointId, uint16_t userId);
void OnGetRfidCommandCallback(app::Command *, EndpointId, uint16_t userId);
void OnGetUserTypeCommandCallback(app::Command *, EndpointId, uint16_t userId);
void OnGetWeekdayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId);
void OnGetYeardayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId);
void OnLockDoorCommandCallback(app::Command *, EndpointId, const uint8_t * PIN);
void OnSetHolidayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint32_t localStartTime,
                                         uint32_t localEndTime, uint8_t operatingModeDuringHoliday);
void OnSetPinCommandCallback(app::Command *, EndpointId, uint16_t userId, uint8_t userStatus, uint8_t userType,
                             const uint8_t * pin);
void OnSetRfidCommandCallback(app::Command *, EndpointId, uint16_t userId, uint8_t userStatus, uint8_t userType,
                              const uint8_t * id);
void OnSetUserTypeCommandCallback(app::Command *, EndpointId, uint16_t userId, uint8_t userType);
void OnSetWeekdayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId, uint8_t daysMask,
                                         uint8_t startHour, uint8_t startMinute, uint8_t endHour, uint8_t endMinute);
void OnSetYeardayScheduleCommandCallback(app::Command *, EndpointId, uint8_t scheduleId, uint16_t userId, uint32_t localStartTime,
                                         uint32_t localEndTime);
void OnUnlockDoorCommandCallback(app::Command *, EndpointId, const uint8_t * PIN);
void OnUnlockWithTimeoutCommandCallback(app::Command *, EndpointId, uint16_t timeoutInSeconds, const uint8_t * pin);
} // namespace DoorLock

namespace Groups {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnAddGroupCommandCallback(app::Command *, EndpointId, uint16_t groupId, const uint8_t * groupName);
void OnAddGroupIfIdentifyingCommandCallback(app::Command *, EndpointId, uint16_t groupId, const uint8_t * groupName);
void OnGetGroupMembershipCommandCallback(app::Command *, EndpointId, uint8_t groupCount,
                                         /* TYPE WARNING: array array defaults to */ uint8_t * groupList);
void OnRemoveAllGroupsCommandCallback(app::Command *, EndpointId);
void OnRemoveGroupCommandCallback(app::Command *, EndpointId, uint16_t groupId);
void OnViewGroupCommandCallback(app::Command *, EndpointId, uint16_t groupId);
} // namespace Groups

namespace IasZone {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnZoneEnrollResponseCommandCallback(app::Command *, EndpointId, uint8_t enrollResponseCode, uint8_t zoneId);
} // namespace IasZone

namespace Identify {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnIdentifyCommandCallback(app::Command *, EndpointId, uint16_t identifyTime);
void OnIdentifyQueryCommandCallback(app::Command *, EndpointId);
} // namespace Identify

namespace LevelControl {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnMoveCommandCallback(app::Command *, EndpointId, uint8_t moveMode, uint8_t rate, uint8_t optionMask, uint8_t optionOverride);
void OnMoveToLevelCommandCallback(app::Command *, EndpointId, uint8_t level, uint16_t transitionTime, uint8_t optionMask,
                                  uint8_t optionOverride);
void OnMoveToLevelWithOnOffCommandCallback(app::Command *, EndpointId, uint8_t level, uint16_t transitionTime);
void OnMoveWithOnOffCommandCallback(app::Command *, EndpointId, uint8_t moveMode, uint8_t rate);
void OnStepCommandCallback(app::Command *, EndpointId, uint8_t stepMode, uint8_t stepSize, uint16_t transitionTime,
                           uint8_t optionMask, uint8_t optionOverride);
void OnStepWithOnOffCommandCallback(app::Command *, EndpointId, uint8_t stepMode, uint8_t stepSize, uint16_t transitionTime);
void OnStopCommandCallback(app::Command *, EndpointId, uint8_t optionMask, uint8_t optionOverride);
void OnStopWithOnOffCommandCallback(app::Command *, EndpointId);
} // namespace LevelControl

namespace MediaPlayback {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnFastForwardRequestCommandCallback(app::Command *, EndpointId);
void OnNextRequestCommandCallback(app::Command *, EndpointId);
void OnPauseRequestCommandCallback(app::Command *, EndpointId);
void OnPlayRequestCommandCallback(app::Command *, EndpointId);
void OnPreviousRequestCommandCallback(app::Command *, EndpointId);
void OnRewindRequestCommandCallback(app::Command *, EndpointId);
void OnSkipBackwardRequestCommandCallback(app::Command *, EndpointId);
void OnSkipForwardRequestCommandCallback(app::Command *, EndpointId);
void OnStartOverRequestCommandCallback(app::Command *, EndpointId);
void OnStopRequestCommandCallback(app::Command *, EndpointId);
} // namespace MediaPlayback

namespace OnOff {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnOffCommandCallback(app::Command *, EndpointId);
void OnOnCommandCallback(app::Command *, EndpointId);
void OnToggleCommandCallback(app::Command *, EndpointId);
} // namespace OnOff

namespace Scenes {
void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
void OnAddSceneCommandCallback(app::Command *, EndpointId, uint16_t groupId, uint8_t sceneId, uint16_t transitionTime,
                               const uint8_t * sceneName, /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets);
void OnGetSceneMembershipCommandCallback(app::Command *, EndpointId, uint16_t groupId);
void OnRecallSceneCommandCallback(app::Command *, EndpointId, uint16_t groupId, uint8_t sceneId, uint16_t transitionTime);
void OnRemoveAllScenesCommandCallback(app::Command *, EndpointId, uint16_t groupId);
void OnRemoveSceneCommandCallback(app::Command *, EndpointId, uint16_t groupId, uint8_t sceneId);
void OnStoreSceneCommandCallback(app::Command *, EndpointId, uint16_t groupId, uint8_t sceneId);
void OnViewSceneCommandCallback(app::Command *, EndpointId, uint16_t groupId, uint8_t sceneId);
} // namespace Scenes

} // namespace clusters
} // namespace app
} // namespace chip
