/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "app/util/util.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

namespace BarrierControl {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_BARRIER_CONTROL_GO_TO_PERCENT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t percentOpen;
            bool percentOpenExists      = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (percentOpenExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(percentOpen);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        percentOpenExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfBarrierControlClusterBarrierControlGoToPercentCallback(apCommandObj, percentOpen);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_BARRIER_CONTROL_STOP_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfBarrierControlClusterBarrierControlStopCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_BARRIER_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace BarrierControl

namespace Basic {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_BASIC_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Basic

namespace Binding {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_BIND_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::NodeId nodeId;
            bool nodeIdExists = false;
            chip::GroupId groupId;
            bool groupIdExists = false;
            chip::EndpointId endpointId;
            bool endpointIdExists = false;
            chip::ClusterId clusterId;
            bool clusterIdExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (nodeIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(nodeId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        nodeIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (endpointIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(endpointId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        endpointIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (clusterIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(clusterId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        clusterIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfBindingClusterBindCallback(apCommandObj, nodeId, groupId, endpointId, clusterId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_UNBIND_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::NodeId nodeId;
            bool nodeIdExists = false;
            chip::GroupId groupId;
            bool groupIdExists = false;
            chip::EndpointId endpointId;
            bool endpointIdExists = false;
            chip::ClusterId clusterId;
            bool clusterIdExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (nodeIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(nodeId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        nodeIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (endpointIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(endpointId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        endpointIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (clusterIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(clusterId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        clusterIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfBindingClusterUnbindCallback(apCommandObj, nodeId, groupId, endpointId, clusterId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_BINDING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Binding

namespace ColorControl {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_MOVE_COLOR_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            int16_t rateX;
            bool rateXExists = false;
            int16_t rateY;
            bool rateYExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (rateXExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rateX);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateXExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateYExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rateY);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateYExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveColorCallback(apCommandObj, rateX, rateY, optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_COLOR_TEMPERATURE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t moveMode;
            bool moveModeExists = false;
            uint16_t rate;
            bool rateExists = false;
            uint16_t colorTemperatureMinimum;
            bool colorTemperatureMinimumExists = false;
            uint16_t colorTemperatureMaximum;
            bool colorTemperatureMaximumExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (moveModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(moveMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        moveModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rate);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (colorTemperatureMinimumExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorTemperatureMinimum);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorTemperatureMinimumExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (colorTemperatureMaximumExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorTemperatureMaximum);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorTemperatureMaximumExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 5:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 6 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveColorTemperatureCallback(apCommandObj, moveMode, rate, colorTemperatureMinimum,
                                                                       colorTemperatureMaximum, optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    6, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_HUE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t moveMode;
            bool moveModeExists = false;
            uint8_t rate;
            bool rateExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (moveModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(moveMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        moveModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rate);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveHueCallback(apCommandObj, moveMode, rate, optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_SATURATION_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t moveMode;
            bool moveModeExists = false;
            uint8_t rate;
            bool rateExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (moveModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(moveMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        moveModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rate);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveSaturationCallback(apCommandObj, moveMode, rate, optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_COLOR_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t colorX;
            bool colorXExists = false;
            uint16_t colorY;
            bool colorYExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (colorXExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorX);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorXExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (colorYExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorY);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorYExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveToColorCallback(apCommandObj, colorX, colorY, transitionTime, optionsMask,
                                                              optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t colorTemperature;
            bool colorTemperatureExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (colorTemperatureExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorTemperature);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorTemperatureExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveToColorTemperatureCallback(apCommandObj, colorTemperature, transitionTime,
                                                                         optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_HUE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t hue;
            bool hueExists = false;
            uint8_t direction;
            bool directionExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (hueExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(hue);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        hueExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (directionExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(direction);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        directionExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveToHueCallback(apCommandObj, hue, direction, transitionTime, optionsMask,
                                                            optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t hue;
            bool hueExists = false;
            uint8_t saturation;
            bool saturationExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (hueExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(hue);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        hueExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (saturationExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(saturation);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        saturationExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveToHueAndSaturationCallback(apCommandObj, hue, saturation, transitionTime, optionsMask,
                                                                         optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_SATURATION_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t saturation;
            bool saturationExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (saturationExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(saturation);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        saturationExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterMoveToSaturationCallback(apCommandObj, saturation, transitionTime, optionsMask,
                                                                   optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_COLOR_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            int16_t stepX;
            bool stepXExists = false;
            int16_t stepY;
            bool stepYExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepXExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepX);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepXExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepYExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepY);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepYExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterStepColorCallback(apCommandObj, stepX, stepY, transitionTime, optionsMask,
                                                            optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_COLOR_TEMPERATURE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t stepMode;
            bool stepModeExists = false;
            uint16_t stepSize;
            bool stepSizeExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint16_t colorTemperatureMinimum;
            bool colorTemperatureMinimumExists = false;
            uint16_t colorTemperatureMaximum;
            bool colorTemperatureMaximumExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepSizeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepSize);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepSizeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (colorTemperatureMinimumExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorTemperatureMinimum);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorTemperatureMinimumExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (colorTemperatureMaximumExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(colorTemperatureMaximum);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        colorTemperatureMaximumExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 5:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 6:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 7 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterStepColorTemperatureCallback(apCommandObj, stepMode, stepSize, transitionTime,
                                                                       colorTemperatureMinimum, colorTemperatureMaximum,
                                                                       optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    7, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_HUE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t stepMode;
            bool stepModeExists = false;
            uint8_t stepSize;
            bool stepSizeExists = false;
            uint8_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepSizeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepSize);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepSizeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterStepHueCallback(apCommandObj, stepMode, stepSize, transitionTime, optionsMask,
                                                          optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_SATURATION_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t stepMode;
            bool stepModeExists = false;
            uint8_t stepSize;
            bool stepSizeExists = false;
            uint8_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepSizeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepSize);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepSizeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterStepSaturationCallback(apCommandObj, stepMode, stepSize, transitionTime, optionsMask,
                                                                 optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STOP_MOVE_STEP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t optionsMask;
            bool optionsMaskExists = false;
            uint8_t optionsOverride;
            bool optionsOverrideExists  = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (optionsMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (optionsOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionsOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionsOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfColorControlClusterStopMoveStepCallback(apCommandObj, optionsMask, optionsOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_COLOR_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace ColorControl

namespace ContentLaunch {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_LAUNCH_CONTENT_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfContentLaunchClusterLaunchContentCallback(apCommandObj);
            break;
        }
        case ZCL_LAUNCH_URL_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfContentLaunchClusterLaunchURLCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_CONTENT_LAUNCH_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace ContentLaunch

namespace DoorLock {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_CLEAR_ALL_PINS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearAllPinsCallback(apCommandObj);
            break;
        }
        case ZCL_CLEAR_ALL_RFIDS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearAllRfidsCallback(apCommandObj);
            break;
        }
        case ZCL_CLEAR_HOLIDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists       = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterClearHolidayScheduleCallback(apCommandObj, scheduleId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_CLEAR_PIN_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterClearPinCallback(apCommandObj, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_CLEAR_RFID_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterClearRfidCallback(apCommandObj, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_CLEAR_WEEKDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterClearWeekdayScheduleCallback(apCommandObj, scheduleId, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_CLEAR_YEARDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterClearYeardayScheduleCallback(apCommandObj, scheduleId, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_HOLIDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists       = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetHolidayScheduleCallback(apCommandObj, scheduleId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_LOG_RECORD_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t logIndex;
            bool logIndexExists         = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (logIndexExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(logIndex);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        logIndexExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetLogRecordCallback(apCommandObj, logIndex);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_PIN_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetPinCallback(apCommandObj, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_RFID_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetRfidCallback(apCommandObj, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_USER_TYPE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetUserTypeCallback(apCommandObj, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_WEEKDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetWeekdayScheduleCallback(apCommandObj, scheduleId, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_YEARDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterGetYeardayScheduleCallback(apCommandObj, scheduleId, userId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_LOCK_DOOR_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * PIN;
            bool PINExists              = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (PINExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(PIN);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        PINExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterLockDoorCallback(apCommandObj, const_cast<uint8_t *>(PIN));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_HOLIDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint32_t localStartTime;
            bool localStartTimeExists = false;
            uint32_t localEndTime;
            bool localEndTimeExists = false;
            uint8_t operatingModeDuringHoliday;
            bool operatingModeDuringHolidayExists = false;
            uint32_t validArgumentCount           = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (localStartTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(localStartTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        localStartTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (localEndTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(localEndTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        localEndTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (operatingModeDuringHolidayExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(operatingModeDuringHoliday);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        operatingModeDuringHolidayExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetHolidayScheduleCallback(apCommandObj, scheduleId, localStartTime, localEndTime,
                                                                 operatingModeDuringHoliday);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_PIN_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists = false;
            uint8_t userStatus;
            bool userStatusExists = false;
            uint8_t userType;
            bool userTypeExists = false;
            const uint8_t * pin;
            bool pinExists              = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userStatusExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userStatus);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userStatusExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (userTypeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userType);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userTypeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (pinExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(pin);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        pinExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetPinCallback(apCommandObj, userId, userStatus, userType, const_cast<uint8_t *>(pin));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_RFID_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists = false;
            uint8_t userStatus;
            bool userStatusExists = false;
            uint8_t userType;
            bool userTypeExists = false;
            const uint8_t * id;
            bool idExists               = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userStatusExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userStatus);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userStatusExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (userTypeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userType);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userTypeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (idExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(id);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        idExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetRfidCallback(apCommandObj, userId, userStatus, userType, const_cast<uint8_t *>(id));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_USER_TYPE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t userId;
            bool userIdExists = false;
            uint8_t userType;
            bool userTypeExists         = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userTypeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userType);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userTypeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetUserTypeCallback(apCommandObj, userId, userType);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_WEEKDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists = false;
            uint8_t daysMask;
            bool daysMaskExists = false;
            uint8_t startHour;
            bool startHourExists = false;
            uint8_t startMinute;
            bool startMinuteExists = false;
            uint8_t endHour;
            bool endHourExists = false;
            uint8_t endMinute;
            bool endMinuteExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (daysMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(daysMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        daysMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (startHourExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(startHour);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        startHourExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (startMinuteExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(startMinute);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        startMinuteExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 5:
                    if (endHourExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(endHour);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        endHourExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 6:
                    if (endMinuteExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(endMinute);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        endMinuteExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 7 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetWeekdayScheduleCallback(apCommandObj, scheduleId, userId, daysMask, startHour, startMinute,
                                                                 endHour, endMinute);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    7, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SET_YEARDAY_SCHEDULE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            bool scheduleIdExists = false;
            uint16_t userId;
            bool userIdExists = false;
            uint32_t localStartTime;
            bool localStartTimeExists = false;
            uint32_t localEndTime;
            bool localEndTimeExists     = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (scheduleIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(scheduleId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        scheduleIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (userIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(userId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        userIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (localStartTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(localStartTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        localStartTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (localEndTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(localEndTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        localEndTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterSetYeardayScheduleCallback(apCommandObj, scheduleId, userId, localStartTime, localEndTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_UNLOCK_DOOR_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * PIN;
            bool PINExists              = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (PINExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(PIN);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        PINExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterUnlockDoorCallback(apCommandObj, const_cast<uint8_t *>(PIN));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_UNLOCK_WITH_TIMEOUT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t timeoutInSeconds;
            bool timeoutInSecondsExists = false;
            const uint8_t * pin;
            bool pinExists              = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (timeoutInSecondsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutInSeconds);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutInSecondsExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (pinExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(pin);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        pinExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfDoorLockClusterUnlockWithTimeoutCallback(apCommandObj, timeoutInSeconds, const_cast<uint8_t *>(pin));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_DOOR_LOCK_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace DoorLock

namespace GeneralCommissioning {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ARM_FAIL_SAFE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t expiryLengthSeconds;
            bool expiryLengthSecondsExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (expiryLengthSecondsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(expiryLengthSeconds);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        expiryLengthSecondsExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGeneralCommissioningClusterArmFailSafeCallback(apCommandObj, expiryLengthSeconds, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_COMMISSIONING_COMPLETE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGeneralCommissioningClusterCommissioningCompleteCallback(apCommandObj);
            break;
        }
        case ZCL_SET_FABRIC_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan fabricId;
            bool fabricIdExists = false;
            chip::ByteSpan fabricSecret;
            bool fabricSecretExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (fabricIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        fabricId             = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        fabricIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (fabricSecretExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        fabricSecret         = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        fabricSecretExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGeneralCommissioningClusterSetFabricCallback(apCommandObj, fabricId, fabricSecret, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_GENERAL_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace GeneralCommissioning

namespace Groups {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ADD_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            const uint8_t * groupName;
            bool groupNameExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(groupName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterAddGroupCallback(apCommandObj, groupId, const_cast<uint8_t *>(groupName));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            const uint8_t * groupName;
            bool groupNameExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(groupName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterAddGroupIfIdentifyingCallback(apCommandObj, groupId, const_cast<uint8_t *>(groupName));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t groupCount;
            bool groupCountExists = false;
            /* TYPE WARNING: array array defaults to */ uint8_t * groupList;
            bool groupListExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupCountExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupCount);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupCountExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (groupListExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // Just for compatibility, we will add array type support in IM later.
                    TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>(groupList));
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupListExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterGetGroupMembershipCallback(apCommandObj, groupCount, groupList);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterRemoveAllGroupsCallback(apCommandObj);
            break;
        }
        case ZCL_REMOVE_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterRemoveGroupCallback(apCommandObj, groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_VIEW_GROUP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGroupsClusterViewGroupCallback(apCommandObj, groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_GROUPS_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Groups

namespace IasZone {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ZONE_ENROLL_RESPONSE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t enrollResponseCode;
            bool enrollResponseCodeExists = false;
            uint8_t zoneId;
            bool zoneIdExists           = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (enrollResponseCodeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(enrollResponseCode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        enrollResponseCodeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (zoneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(zoneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        zoneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfIasZoneClusterZoneEnrollResponseCallback(apCommandObj, enrollResponseCode, zoneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_IAS_ZONE_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace IasZone

namespace Identify {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_IDENTIFY_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t identifyTime;
            bool identifyTimeExists     = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (identifyTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(identifyTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        identifyTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfIdentifyClusterIdentifyCallback(apCommandObj, identifyTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_IDENTIFY_QUERY_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfIdentifyClusterIdentifyQueryCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_IDENTIFY_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Identify

namespace LevelControl {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_MOVE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t moveMode;
            bool moveModeExists = false;
            uint8_t rate;
            bool rateExists = false;
            uint8_t optionMask;
            bool optionMaskExists = false;
            uint8_t optionOverride;
            bool optionOverrideExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (moveModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(moveMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        moveModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rate);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterMoveCallback(apCommandObj, moveMode, rate, optionMask, optionOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_LEVEL_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t level;
            bool levelExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionMask;
            bool optionMaskExists = false;
            uint8_t optionOverride;
            bool optionOverrideExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (levelExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(level);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        levelExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (optionMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterMoveToLevelCallback(apCommandObj, level, transitionTime, optionMask, optionOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t level;
            bool levelExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (levelExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(level);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        levelExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterMoveToLevelWithOnOffCallback(apCommandObj, level, transitionTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t moveMode;
            bool moveModeExists = false;
            uint8_t rate;
            bool rateExists             = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (moveModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(moveMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        moveModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (rateExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(rate);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        rateExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterMoveWithOnOffCallback(apCommandObj, moveMode, rate);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t stepMode;
            bool stepModeExists = false;
            uint8_t stepSize;
            bool stepSizeExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            uint8_t optionMask;
            bool optionMaskExists = false;
            uint8_t optionOverride;
            bool optionOverrideExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepSizeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepSize);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepSizeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (optionMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (optionOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterStepCallback(apCommandObj, stepMode, stepSize, transitionTime, optionMask,
                                                       optionOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STEP_WITH_ON_OFF_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t stepMode;
            bool stepModeExists = false;
            uint8_t stepSize;
            bool stepSizeExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (stepModeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepMode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepModeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (stepSizeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(stepSize);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        stepSizeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterStepWithOnOffCallback(apCommandObj, stepMode, stepSize, transitionTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STOP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t optionMask;
            bool optionMaskExists = false;
            uint8_t optionOverride;
            bool optionOverrideExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (optionMaskExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionMask);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionMaskExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (optionOverrideExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(optionOverride);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        optionOverrideExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfLevelControlClusterStopCallback(apCommandObj, optionMask, optionOverride);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STOP_WITH_ON_OFF_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterStopWithOnOffCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_LEVEL_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace LevelControl

namespace LowPower {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_SLEEP_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLowPowerClusterSleepCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_LOW_POWER_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace LowPower

namespace MediaPlayback {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_FAST_FORWARD_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterFastForwardRequestCallback(apCommandObj);
            break;
        }
        case ZCL_NEXT_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterNextRequestCallback(apCommandObj);
            break;
        }
        case ZCL_PAUSE_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterPauseRequestCallback(apCommandObj);
            break;
        }
        case ZCL_PLAY_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterPlayRequestCallback(apCommandObj);
            break;
        }
        case ZCL_PREVIOUS_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterPreviousRequestCallback(apCommandObj);
            break;
        }
        case ZCL_REWIND_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterRewindRequestCallback(apCommandObj);
            break;
        }
        case ZCL_SKIP_BACKWARD_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterSkipBackwardRequestCallback(apCommandObj);
            break;
        }
        case ZCL_SKIP_FORWARD_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterSkipForwardRequestCallback(apCommandObj);
            break;
        }
        case ZCL_START_OVER_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterStartOverRequestCallback(apCommandObj);
            break;
        }
        case ZCL_STOP_REQUEST_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterStopRequestCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_MEDIA_PLAYBACK_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace MediaPlayback

namespace NetworkCommissioning {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_DISABLE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            bool networkIDExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (networkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        networkID            = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        networkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterDisableNetworkCallback(apCommandObj, networkID, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_ENABLE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            bool networkIDExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (networkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        networkID            = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        networkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterEnableNetworkCallback(apCommandObj, networkID, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_LAST_NETWORK_COMMISSIONING_RESULT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterGetLastNetworkCommissioningResultCallback(apCommandObj, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_NETWORK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan NetworkID;
            bool NetworkIDExists = false;
            uint64_t Breadcrumb;
            bool BreadcrumbExists = false;
            uint32_t TimeoutMs;
            bool TimeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (NetworkIDExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        NetworkID            = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        NetworkIDExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (BreadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(Breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        BreadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (TimeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(TimeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        TimeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterRemoveNetworkCallback(apCommandObj, NetworkID, Breadcrumb, TimeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SCAN_NETWORKS_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            bool ssidExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (ssidExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    {
                        const uint8_t * data = nullptr;
                        TLVUnpackError       = aDataTlv.GetDataPtr(data);
                        ssid                 = chip::ByteSpan(data, aDataTlv.GetLength());
                    }
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        ssidExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfNetworkCommissioningClusterScanNetworksCallback(apCommandObj, ssid, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_NETWORK_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace NetworkCommissioning

namespace OnOff {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_OFF_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOffCallback(apCommandObj);
            break;
        }
        case ZCL_ON_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOnCallback(apCommandObj);
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterToggleCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_ON_OFF_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace OnOff

namespace Scenes {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ADD_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists = false;
            const uint8_t * sceneName;
            bool sceneNameExists = false;
            /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
            bool extensionFieldSetsExists = false;
            uint32_t validArgumentCount   = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (sceneNameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(sceneName);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneNameExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 4:
                    if (extensionFieldSetsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // Just for compatibility, we will add array type support in IM later.
                    TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>(extensionFieldSets));
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        extensionFieldSetsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterAddSceneCallback(apCommandObj, groupId, sceneId, transitionTime,
                                                     const_cast<uint8_t *>(sceneName), extensionFieldSets);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    5, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterGetSceneMembershipCallback(apCommandObj, groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_RECALL_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists = false;
            uint16_t transitionTime;
            bool transitionTimeExists   = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (transitionTimeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(transitionTime);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        transitionTimeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRecallSceneCallback(apCommandObj, groupId, sceneId, transitionTime);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_ALL_SCENES_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRemoveAllScenesCallback(apCommandObj, groupId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_REMOVE_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterRemoveSceneCallback(apCommandObj, groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_STORE_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterStoreSceneCallback(apCommandObj, groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_VIEW_SCENE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t groupId;
            bool groupIdExists = false;
            uint8_t sceneId;
            bool sceneIdExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (groupIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(groupId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        groupIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (sceneIdExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(sceneId);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        sceneIdExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfScenesClusterViewSceneCallback(apCommandObj, groupId, sceneId);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_SCENES_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Scenes

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    case ZCL_BARRIER_CONTROL_CLUSTER_ID:
        clusters::BarrierControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_BASIC_CLUSTER_ID:
        clusters::Basic::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_BINDING_CLUSTER_ID:
        clusters::Binding::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_COLOR_CONTROL_CLUSTER_ID:
        clusters::ColorControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_CONTENT_LAUNCH_CLUSTER_ID:
        clusters::ContentLaunch::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_DOOR_LOCK_CLUSTER_ID:
        clusters::DoorLock::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_GENERAL_COMMISSIONING_CLUSTER_ID:
        clusters::GeneralCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_GROUPS_CLUSTER_ID:
        clusters::Groups::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_IAS_ZONE_CLUSTER_ID:
        clusters::IasZone::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_IDENTIFY_CLUSTER_ID:
        clusters::Identify::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_LEVEL_CONTROL_CLUSTER_ID:
        clusters::LevelControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_LOW_POWER_CLUSTER_ID:
        clusters::LowPower::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_MEDIA_PLAYBACK_CLUSTER_ID:
        clusters::MediaPlayback::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_NETWORK_COMMISSIONING_CLUSTER_ID:
        clusters::NetworkCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_ON_OFF_CLUSTER_ID:
        clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_SCENES_CLUSTER_ID:
        clusters::Scenes::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound, Protocols::SecureChannel::Id,
                                    Protocols::SecureChannel::kProtocolCodeGeneralFailure);
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

} // namespace app
} // namespace chip
