/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "app/util/util.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <app/util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

namespace AccountLogin {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_GET_SETUP_PIN_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * tempAccountIdentifier;
            bool tempAccountIdentifierExists = false;
            uint32_t validArgumentCount      = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (tempAccountIdentifierExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(tempAccountIdentifier);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        tempAccountIdentifierExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfAccountLoginClusterGetSetupPINCallback(apCommandObj, const_cast<uint8_t *>(tempAccountIdentifier));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_LOGIN_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * tempAccountIdentifier;
            bool tempAccountIdentifierExists = false;
            const uint8_t * setupPIN;
            bool setupPINExists         = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (tempAccountIdentifierExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(tempAccountIdentifier);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        tempAccountIdentifierExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (setupPINExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(setupPIN);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        setupPINExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfAccountLoginClusterLoginCallback(apCommandObj, const_cast<uint8_t *>(tempAccountIdentifier),
                                                        const_cast<uint8_t *>(setupPIN));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_ACCOUNT_LOGIN_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace AccountLogin

namespace ApplicationLauncher {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_LAUNCH_APP_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * data;
            bool dataExists = false;
            /* TYPE WARNING: array array defaults to */ uint8_t * application;
            bool applicationExists      = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (dataExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(data);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        dataExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (applicationExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // Just for compatibility, we will add array type support in IM later.
                    TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>(application));
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        applicationExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfApplicationLauncherClusterLaunchAppCallback(apCommandObj, const_cast<uint8_t *>(data), application);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_APPLICATION_LAUNCHER_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace ApplicationLauncher

namespace AudioOutput {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_RENAME_OUTPUT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t index;
            bool indexExists = false;
            const uint8_t * name;
            bool nameExists             = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (indexExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(index);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        indexExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (nameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(name);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        nameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfAudioOutputClusterRenameOutputCallback(apCommandObj, index, const_cast<uint8_t *>(name));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SELECT_OUTPUT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t index;
            bool indexExists            = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (indexExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(index);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        indexExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfAudioOutputClusterSelectOutputCallback(apCommandObj, index);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_AUDIO_OUTPUT_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace AudioOutput

namespace ContentLaunch {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_LAUNCH_CONTENT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t autoPlay;
            bool autoPlayExists = false;
            const uint8_t * data;
            bool dataExists             = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (autoPlayExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(autoPlay);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        autoPlayExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (dataExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(data);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        dataExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfContentLaunchClusterLaunchContentCallback(apCommandObj, autoPlay, const_cast<uint8_t *>(data));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_LAUNCH_URL_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * contentURL;
            bool contentURLExists = false;
            const uint8_t * displayString;
            bool displayStringExists    = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (contentURLExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(contentURL);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        contentURLExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (displayStringExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(displayString);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        displayStringExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfContentLaunchClusterLaunchURLCallback(apCommandObj, const_cast<uint8_t *>(contentURL),
                                                             const_cast<uint8_t *>(displayString));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_CONTENT_LAUNCH_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace ContentLaunch

namespace GeneralCommissioning {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_ARM_FAIL_SAFE_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t expiryLengthSeconds;
            bool expiryLengthSecondsExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (expiryLengthSecondsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(expiryLengthSeconds);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        expiryLengthSecondsExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGeneralCommissioningClusterArmFailSafeCallback(apCommandObj, expiryLengthSeconds, breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    3, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_COMMISSIONING_COMPLETE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGeneralCommissioningClusterCommissioningCompleteCallback(apCommandObj);
            break;
        }
        case ZCL_SET_REGULATORY_CONFIG_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t location;
            bool locationExists = false;
            const uint8_t * countryCode;
            bool countryCodeExists = false;
            uint64_t breadcrumb;
            bool breadcrumbExists = false;
            uint32_t timeoutMs;
            bool timeoutMsExists        = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (locationExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(location);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        locationExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (countryCodeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(countryCode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        countryCodeExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 2:
                    if (breadcrumbExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        breadcrumbExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 3:
                    if (timeoutMsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        timeoutMsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfGeneralCommissioningClusterSetRegulatoryConfigCallback(
                    apCommandObj, location, const_cast<uint8_t *>(countryCode), breadcrumb, timeoutMs);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    4, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_GENERAL_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace GeneralCommissioning

namespace KeypadInput {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_SEND_KEY_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t keyCode;
            bool keyCodeExists          = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (keyCodeExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(keyCode);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        keyCodeExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfKeypadInputClusterSendKeyCallback(apCommandObj, keyCode);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_KEYPAD_INPUT_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace KeypadInput

namespace LowPower {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_SLEEP_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLowPowerClusterSleepCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_LOW_POWER_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace LowPower

namespace MediaInput {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_HIDE_INPUT_STATUS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaInputClusterHideInputStatusCallback(apCommandObj);
            break;
        }
        case ZCL_RENAME_INPUT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t index;
            bool indexExists = false;
            const uint8_t * name;
            bool nameExists             = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (indexExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(index);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        indexExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (nameExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(name);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        nameExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfMediaInputClusterRenameInputCallback(apCommandObj, index, const_cast<uint8_t *>(name));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SELECT_INPUT_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t index;
            bool indexExists            = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (indexExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(index);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        indexExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfMediaInputClusterSelectInputCallback(apCommandObj, index);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SHOW_INPUT_STATUS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaInputClusterShowInputStatusCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_MEDIA_INPUT_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace MediaInput

namespace MediaPlayback {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_MEDIA_FAST_FORWARD_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaFastForwardCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_NEXT_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaNextCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_PAUSE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaPauseCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_PLAY_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaPlayCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_PREVIOUS_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaPreviousCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_REWIND_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaRewindCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_SKIP_BACKWARD_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint64_t deltaPositionMilliseconds;
            bool deltaPositionMillisecondsExists = false;
            uint32_t validArgumentCount          = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (deltaPositionMillisecondsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(deltaPositionMilliseconds);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        deltaPositionMillisecondsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfMediaPlaybackClusterMediaSkipBackwardCallback(apCommandObj, deltaPositionMilliseconds);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MEDIA_SKIP_FORWARD_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint64_t deltaPositionMilliseconds;
            bool deltaPositionMillisecondsExists = false;
            uint32_t validArgumentCount          = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (deltaPositionMillisecondsExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(deltaPositionMilliseconds);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        deltaPositionMillisecondsExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfMediaPlaybackClusterMediaSkipForwardCallback(apCommandObj, deltaPositionMilliseconds);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MEDIA_SKIP_SEEK_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint64_t position;
            bool positionExists         = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (positionExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(position);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        positionExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfMediaPlaybackClusterMediaSkipSeekCallback(apCommandObj, position);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_MEDIA_START_OVER_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaStartOverCallback(apCommandObj);
            break;
        }
        case ZCL_MEDIA_STOP_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfMediaPlaybackClusterMediaStopCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_MEDIA_PLAYBACK_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace MediaPlayback

namespace OnOff {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_OFF_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOffCallback(apCommandObj);
            break;
        }
        case ZCL_ON_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOnCallback(apCommandObj);
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {

            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterToggleCallback(apCommandObj);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_ON_OFF_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace OnOff

namespace TvChannel {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_CHANGE_CHANNEL_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            const uint8_t * match;
            bool matchExists            = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (matchExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(match);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        matchExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfTvChannelClusterChangeChannelCallback(apCommandObj, const_cast<uint8_t *>(match));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_CHANGE_CHANNEL_BY_NUMBER_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t majorNumber;
            bool majorNumberExists = false;
            uint16_t minorNumber;
            bool minorNumberExists      = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (majorNumberExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(majorNumber);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        majorNumberExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (minorNumberExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(minorNumber);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        minorNumberExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfTvChannelClusterChangeChannelByNumberCallback(apCommandObj, majorNumber, minorNumber);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        case ZCL_SKIP_CHANNEL_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint16_t Count;
            bool CountExists            = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (CountExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(Count);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        CountExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfTvChannelClusterSkipChannelCallback(apCommandObj, Count);
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    1, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_TV_CHANNEL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace TvChannel

namespace TargetNavigator {

void DispatchServerCommand(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    {
        switch (aCommandId)
        {
        case ZCL_NAVIGATE_TARGET_COMMAND_ID: {
            // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
            // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
            // Any error value TLVUnpackError means we have received an illegal value.
            CHIP_ERROR TLVError       = CHIP_NO_ERROR;
            CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
            uint8_t target;
            bool targetExists = false;
            const uint8_t * data;
            bool dataExists             = false;
            uint32_t validArgumentCount = 0;

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
                {
                case 0:
                    if (targetExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    TLVUnpackError = aDataTlv.Get(target);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        targetExists = true;
                        validArgumentCount++;
                    }
                    break;
                case 1:
                    if (dataExists)
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(data);
                    if (CHIP_NO_ERROR == TLVUnpackError)
                    {
                        dataExists = true;
                        validArgumentCount++;
                    }
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVUnpackError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }
            else
            {
                ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
            }

            // TODO(#5590) We should encode a response of status code for invalid TLV.
            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
                emberAfTargetNavigatorClusterNavigateTargetCallback(apCommandObj, target, const_cast<uint8_t *>(data));
            }
            else
            {
                apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                            Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
                ChipLogProgress(
                    Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32,
                    2, validArgumentCount, TLVError, TLVUnpackError);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                        Protocols::SecureChannel::Id, Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_TARGET_NAVIGATOR_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace TargetNavigator

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    case ZCL_ACCOUNT_LOGIN_CLUSTER_ID:
        clusters::AccountLogin::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_APPLICATION_LAUNCHER_CLUSTER_ID:
        clusters::ApplicationLauncher::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_AUDIO_OUTPUT_CLUSTER_ID:
        clusters::AudioOutput::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_CONTENT_LAUNCH_CLUSTER_ID:
        clusters::ContentLaunch::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_GENERAL_COMMISSIONING_CLUSTER_ID:
        clusters::GeneralCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_KEYPAD_INPUT_CLUSTER_ID:
        clusters::KeypadInput::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_LOW_POWER_CLUSTER_ID:
        clusters::LowPower::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_MEDIA_INPUT_CLUSTER_ID:
        clusters::MediaInput::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_MEDIA_PLAYBACK_CLUSTER_ID:
        clusters::MediaPlayback::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_ON_OFF_CLUSTER_ID:
        clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_TV_CHANNEL_CLUSTER_ID:
        clusters::TvChannel::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_TARGET_NAVIGATOR_CLUSTER_ID:
        clusters::TargetNavigator::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kNotFound, Protocols::SecureChannel::Id,
                                    Protocols::SecureChannel::kProtocolCodeGeneralFailure);
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

} // namespace app
} // namespace chip
