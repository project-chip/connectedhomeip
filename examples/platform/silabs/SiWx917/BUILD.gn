# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/efr32_sdk.gni")
import("${chip_root}/examples/common/pigweed/pigweed_rpcs.gni")
import("${chip_root}/examples/platform/silabs/args.gni")
import("${chip_root}/src/lib/lib.gni")
import("${chip_root}/src/platform/device.gni")
import("${chip_root}/src/platform/silabs/wifi/args.gni")
import("${chip_root}/third_party/silabs/silabs_board.gni")
import("${silabs_sdk_build_root}/SiWx917_sdk.gni")

declare_args() {
  enable_heap_monitoring = false

  # OTA timeout in seconds
  ota_periodic_query_timeout_sec = 86400

  # The EnableKey in hex string format used by TestEventTrigger command in
  # GeneralDiagnostics cluster. The length of the string should be 16 bytes.
  sl_test_event_trigger_enable_key = "00112233445566778899AABBCCDDEEFF"
}

# Sanity check
assert(chip_enable_wifi)
silabs_plat_dir = "${chip_root}/src/platform/silabs"
silabs_plat_si91x_wifi_dir = "${chip_root}/src/platform/silabs/SiWx917/wifi"

config("chip_examples_project_config") {
  # Link options that provide a replacement for dynamic memory operations in standard
  # library with the sl_memory_manager in platform code.
  ldflags = [
    "-Wl,--wrap=MemoryAlloc",

    # Wrap these in case internal newlib call them (e.g. strdup will)
    # directly call _malloc_r)
    "-Wl,--wrap=_malloc_r",
    "-Wl,--wrap=_realloc_r",
    "-Wl,--wrap=_free_r",
    "-Wl,--wrap=_calloc_r",
  ]
}

config("test-event-trigger-config") {
  defines = [ "SL_MATTER_TEST_EVENT_TRIGGER_ENABLED" ]

  if (is_debug) {
    defines += [ "SL_MATTER_TEST_EVENT_TRIGGER_ENABLE_KEY=\"${sl_test_event_trigger_enable_key}\"" ]
  }
}

source_set("test-event-trigger") {
  sources = [
    "${silabs_common_plat_dir}/SilabsTestEventTriggerDelegate.cpp",
    "${silabs_common_plat_dir}/SilabsTestEventTriggerDelegate.h",
  ]

  deps = [ "${chip_root}/src/platform/silabs/provision:provision-headers" ]
  public_configs = [ ":test-event-trigger-config" ]
  public_deps = [
    "${chip_root}/src/app:test-event-trigger",
    "${chip_root}/src/lib/core",
    "${chip_root}/src/lib/support",
  ]
}

source_set("matter-shell") {
  defines = [ "ENABLE_CHIP_SHELL" ]

  sources = [ "${silabs_common_plat_dir}/MatterShell.cpp" ]
  include_dirs = [
    ".",
    "${silabs_common_plat_dir}",
  ]

  public_deps = [
    "${chip_root}/examples/shell/shell_common:shell_common",
    "${chip_root}/src/lib/shell:shell",
    "${chip_root}/src/lib/shell:shell_core",
  ]
}

config("siwx917-common-config") {
  defines = [ "OTA_PERIODIC_TIMEOUT=${ota_periodic_query_timeout_sec}" ]

  if (!disable_lcd) {
    include_dirs = [ "${silabs_common_plat_dir}/display" ]

    defines += [ "DISPLAY_ENABLED" ]
  }

  if (show_qr_code) {
    defines += [ "QR_CODE_ENABLED" ]
  }

  if (chip_enable_ota_requestor) {
    defines += [ "SILABS_OTA_ENABLED" ]
  }

  if (enable_heap_monitoring) {
    defines += [ "HEAP_MONITORING" ]
  }

  ldflags = [ "-Wl,--no-warn-rwx-segment" ]
}

source_set("siwx917-common") {
  deps = [ "${silabs_common_plat_dir}/provision:storage" ]
  defines = []
  public_deps = []

  public_configs = [
    ":siwx917-common-config",
    "${silabs_sdk_build_root}:silabs_config",
    ":chip_examples_project_config",
  ]

  include_dirs = [
    "${silabs_plat_dir}/wifi",
    "${silabs_common_plat_dir}/wifi",
    "${silabs_plat_si91x_wifi_dir}",
    "${silabs_common_plat_dir}",
  ]

  #TO-DO Cleanup to be done for all the wifi files into common folder
  sources = [
    "${silabs_common_plat_dir}/BaseApplication.cpp",
    "${silabs_common_plat_dir}/LEDWidget.cpp",
    "${silabs_common_plat_dir}/MatterConfig.cpp",
    "${silabs_common_plat_dir}/SoftwareFaultReports.cpp",
    "${silabs_common_plat_dir}/silabs_utils.cpp",
    "${silabs_common_plat_dir}/syscalls_stubs.cpp",
  ]

  if (chip_enable_pw_rpc || chip_build_libshell || sl_uart_log_output) {
    sources += [ "${silabs_common_plat_dir}/uart.cpp" ]
  }

  if (chip_enable_ota_requestor) {
    sources += [ "${silabs_common_plat_dir}/OTAConfig.cpp" ]
  }

  if (!disable_lcd) {
    sources += [
      "${silabs_common_plat_dir}/display/demo-ui.c",
      "${silabs_common_plat_dir}/display/lcd.cpp",
    ]

    include_dirs += [ "${silabs_common_plat_dir}/display" ]
    public_deps += [ "${chip_root}/examples/common/QRCode" ]
  }

  if (enable_heap_monitoring) {
    sources += [ "${silabs_common_plat_dir}/MemMonitoring.cpp" ]
  }

  if (chip_build_libshell) {
    deps += [ ":matter-shell" ]

    if (chip_enable_icd_server) {
      deps += [ "${silabs_common_plat_dir}/shell:icd" ]
    }
  }

  # DIC
  if (enable_dic) {
    public_deps +=
        [ "${silabs_common_plat_dir}/DIC/matter_abs_interface:silabs-dic" ]
  }

  # AWS SDK OTA
  if (aws_sdk_ota) {
    public_deps += [
      "${silabs_common_plat_dir}/DIC/matter_abs_interface:silabs-aws-sdk-ota",
    ]
  }

  public_deps += [
    "${chip_root}/examples/providers:device_info_provider",
    "${chip_root}/src/app/codegen-data-model-provider:instance-header",
    "${chip_root}/src/lib",
    "${chip_root}/src/setup_payload",
  ]

  if (sl_enable_test_event_trigger) {
    public_deps += [ ":test-event-trigger" ]
  }

  if (sl_enable_si70xx_sensor) {
    sources += [
      "${silabs_common_plat_dir}/Si70xxSensor.cpp",
      "${silabs_common_plat_dir}/Si70xxSensor.h",
    ]
  }

  if (app_data_model != "") {
    public_deps += [ app_data_model ]
  }
}
