# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/efr32_sdk.gni")
import("${chip_root}/src/lib/lib.gni")
import("${chip_root}/src/platform/device.gni")
import("${efr32_sdk_build_root}/SiWx917_sdk.gni")

silabs_common_plat_dir = "${chip_root}/examples/platform/silabs"

config("chip_examples_project_config") {
  include_dirs = [ "project_include" ]

  # Link options that provide a replacement for dynamic memory operations in standard
  # library with the FreeRTOS malloc in platform code.
  ldflags = [
    # memory allocation -- these must be re-entrant and do locking
    "-Wl,--wrap=malloc",
    "-Wl,--wrap=free",
    "-Wl,--wrap=realloc",
    "-Wl,--wrap=calloc",
    "-Wl,--wrap=MemoryAlloc",

    # Wrap these in case internal newlib call them (e.g. strdup will)
    # directly call _malloc_r)
    "-Wl,--wrap=_malloc_r",
    "-Wl,--wrap=_realloc_r",
    "-Wl,--wrap=_free_r",
    "-Wl,--wrap=_calloc_r",
  ]
}

if (enable_dic) {
  config("efr32_dic_config") {
    include_dirs = [
      "${chip_root}/third_party/silabs/mqtt/stack",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/include",
      "${chip_root}/examples/platform/silabs/DIC/matter_abs_interface/include",
    ]
  }

  source_set("efr32-dic") {
    sources = [
      "${chip_root}/examples/platform/silabs/DIC/matter_abs_interface/src/dic.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/MQTT_transport.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/altcp.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/altcp_alloc.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/altcp_tcp.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/altcp_tls_mbedtls.c",
      "${chip_root}/examples/platform/silabs/DIC/mqtt_transport_interface/src/altcp_tls_mbedtls_mem.c",
    ]
    public_deps = [
      "${chip_root}/src/inet",
      "${chip_root}/src/lwip",
    ]
    public_configs = [ ":efr32_dic_config" ]
  }
}

source_set("efr-matter-shell") {
  if (chip_build_libshell) {
    defines = [ "ENABLE_CHIP_SHELL" ]

    sources = [ "${silabs_common_plat_dir}/matter_shell.cpp" ]
    include_dirs = [ "." ]

    public_deps = [
      "${chip_root}/examples/shell/shell_common:shell_common",
      "${chip_root}/src/lib/shell:shell",
      "${chip_root}/src/lib/shell:shell_core",
    ]
  }
}

config("attestation-credentials-config") {
  include_dirs = [ "${chip_root}" ]

  defines = [
    # Set to 1 to enable SI917 attestation credentials
    "SI917_ATTESTATION_CREDENTIALS",
  ]
}

source_set("efr32-attestation-credentials") {
  sources = [
    "${silabs_common_plat_dir}/SilabsDeviceAttestationCreds.cpp",
    "${silabs_common_plat_dir}/SilabsDeviceAttestationCreds.h",
  ]

  public_deps = [
    "${chip_root}/src/credentials",
    "${chip_root}/src/platform:platform_base",
  ]

  public_configs = [ ":attestation-credentials-config" ]
}

source_set("efr32-factory-data-provider") {
  sources = [
    "SiWx917DeviceDataProvider.cpp",
    "SiWx917DeviceDataProvider.h",
  ]

  public_deps = [
    "${chip_root}/src/credentials",
    "${chip_root}/src/platform:platform_base",
    "${chip_root}/src/setup_payload",
  ]

  #public_configs = [ "" ]
}
