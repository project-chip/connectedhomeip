/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "IMClusterCommandHandler.h"

#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/InteractionModelEngine.h>

namespace chip {
namespace app {

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(DataManagement, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId,
                  aCommandId, aEndPointId);
    switch (aClusterId)
    {
    case ZCL_LEVEL_CONTROL_CLUSTER_ID:
        clusters::LevelControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        return;
    case ZCL_ON_OFF_CLUSTER_ID:
        clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        return;
    default:
        // Unrecognized cluster ID, error status will apply.
        // TODO: Encode response for Cluster not found
        break;
    }
}

// Cluster specific command parsing

namespace clusters {

namespace LevelControl {

void LevelControl::DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId,
                                         TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_MOVE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnMoveCommandCallback(command, endpointId, moveMode, rate, optionMask, optionOverride);
            break;
        }
        case ZCL_MOVE_TO_LEVEL_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t level;
            uint16_t transitionTime;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(level);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnMoveToLevelCommandCallback(command, endpointId, level, transitionTime, optionMask, optionOverride);
            break;
        }
        case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t level;
            uint16_t transitionTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(level);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnMoveToLevelWithOnOffCommandCallback(command, endpointId, level, transitionTime);
            break;
        }
        case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnMoveWithOnOffCommandCallback(command, endpointId, moveMode, rate);
            break;
        }
        case ZCL_STEP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint16_t transitionTime;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnStepCommandCallback(command, endpointId, stepMode, stepSize, transitionTime, optionMask, optionOverride);
            break;
        }
        case ZCL_STEP_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint16_t transitionTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnStepWithOnOffCommandCallback(command, endpointId, stepMode, stepSize, transitionTime);
            break;
        }
        case ZCL_STOP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 1:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    // TODO: Can be a log for INFO level
                    continue;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnStopCommandCallback(command, endpointId, optionMask, optionOverride);
            break;
        }
        case ZCL_STOP_WITH_ON_OFF_COMMAND_ID: {
            OnStopWithOnOffCommandCallback(command, endpointId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            break;
        }
        }
    }
}

} // namespace LevelControl

namespace OnOff {

void OnOff::DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_OFF_COMMAND_ID: {
            OnOffCommandCallback(command, endpointId);
            break;
        }
        case ZCL_ON_COMMAND_ID: {
            OnOnCommandCallback(command, endpointId);
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {
            OnToggleCommandCallback(command, endpointId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            break;
        }
        }
    }
}

} // namespace OnOff

} // namespace clusters
} // namespace app
} // namespace chip
