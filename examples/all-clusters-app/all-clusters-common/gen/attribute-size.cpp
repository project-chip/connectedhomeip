/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <app/util/af.h>
#include <app/util/basic-types.h>
#include <support/SafeInt.h>
#include <support/logging/CHIPLogging.h>

#include "gen/af-structs.h"

using namespace chip;

// The first 2 bytes specify the number of entries. A value of 0xFFFF means the list in invalid
// and data is undefined.
constexpr uint16_t kSizeLengthInBytes = 2u;

void copyListMember(uint8_t * dest, uint8_t * src, bool write, uint16_t * offset, uint16_t length)
{
    if (write)
    {
        memmove(dest + *offset, src, length);
    }
    else
    {
        memmove(dest, src + *offset, length);
    }
    *offset += length;
}

uint16_t emberAfCopyList(ClusterId clusterId, EmberAfAttributeMetadata * am, bool write, uint8_t * dest, uint8_t * src,
                         int32_t index)
{
    if (index == -1)
    {
        memmove(dest, src, am->size);
        return am->size;
    }

    if (index == 0)
    {
        memmove(dest, src, kSizeLengthInBytes);
        return kSizeLengthInBytes;
    }

    if (!chip::CanCastTo<uint16_t>(index))
    {
        ChipLogError(Zcl, "Index %l is invalid. Should be between 1 and 65534", index);
        return 0;
    }

    uint16_t entryLength = 0;
    switch (clusterId)
    {
    case 0xF003: // Descriptor Cluster
    {
        uint16_t entryOffset = kSizeLengthInBytes;
        switch (am->attributeId)
        {
        case 0x0000: // device
        {
            entryLength = 6;
            entryOffset += ((static_cast<uint16_t>(index) - 1u) * entryLength);
            // Struct _DeviceType
            _DeviceType * entry = reinterpret_cast<_DeviceType *>(write ? src : dest);
            copyListMember(write ? dest : (uint8_t *) &entry->deviceTypeId, write ? (uint8_t *) &entry->deviceTypeId : src, write,
                           &entryOffset, sizeof(entry->deviceTypeId)); // DEVICE_ID
            copyListMember(write ? dest : (uint8_t *) &entry->revision, write ? (uint8_t *) &entry->revision : src, write,
                           &entryOffset, sizeof(entry->revision)); // INT16U
            break;
        }
        case 0x0001: // server
        {
            entryLength = 2;
            entryOffset += ((static_cast<uint16_t>(index) - 1u) * entryLength);
            copyListMember(dest, src, write, &entryOffset, entryLength); // CLUSTER_ID
            break;
        }
        case 0x0002: // client
        {
            entryLength = 2;
            entryOffset += ((static_cast<uint16_t>(index) - 1u) * entryLength);
            copyListMember(dest, src, write, &entryOffset, entryLength); // CLUSTER_ID
            break;
        }
        case 0x0003: // parts
        {
            entryLength = 1;
            entryOffset += ((static_cast<uint16_t>(index) - 1u) * entryLength);
            copyListMember(dest, src, write, &entryOffset, entryLength); // ENDPOINT_ID
            break;
        }
        }
        break;
    }
    }

    return entryLength;
}

// A list is a collection of entries of the same data type. The data type may be any defined data type.
uint16_t emberAfAttributeValueListSize(ClusterId clusterId, AttributeId attributeId, const uint8_t * buffer)
{
    // The first 2 bytes specify the number of entries. A value of 0xFFFF means the list in invalid
    // and data is undefined.
    uint16_t entryCount = emberAfGetInt16u(buffer, 0, kSizeLengthInBytes);
    if (entryCount == 0xFFFF)
    {
        return 0;
    }

    uint16_t entryLength = 0;
    switch (clusterId)
    {
    case 0xF003: // Descriptor Cluster
        switch (attributeId)
        {
        case 0x0000: // device
            // Struct _DeviceType
            entryLength = 6;
            break;
        case 0x0001: // server
            // CLUSTER_ID
            entryLength = 2;
            break;
        case 0x0002: // client
            // CLUSTER_ID
            entryLength = 2;
            break;
        case 0x0003: // parts
            // ENDPOINT_ID
            entryLength = 1;
            break;
        }
        break;
    }

    uint32_t totalSize = kSizeLengthInBytes + (entryCount * entryLength);
    if (!chip::CanCastTo<uint16_t>(totalSize))
    {
        ChipLogError(Zcl, "Cluster 0x%04x: Size of attribute 0x%02x is too large.", clusterId, attributeId);
        return 0;
    }

    return static_cast<uint16_t>(totalSize);
}
