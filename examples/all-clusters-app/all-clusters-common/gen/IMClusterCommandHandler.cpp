/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "app/util/util.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

namespace BarrierControl {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_BARRIER_CONTROL_GO_TO_PERCENT_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t percentOpen;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(percentOpen);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfBarrierControlClusterBarrierControlGoToPercentCallback(percentOpen);
            break;
        }
        case ZCL_BARRIER_CONTROL_STOP_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfBarrierControlClusterBarrierControlStopCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_BARRIER_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace BarrierControl

namespace Basic {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_BASIC_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Basic

namespace Binding {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_BIND_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::NodeId nodeId;
            chip::GroupId groupId;
            chip::EndpointId endpointId;
            chip::ClusterId clusterId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(nodeId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(endpointId);
                    break;
                case 3:
                    TLVError = dataTlv.Get(clusterId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfBindingClusterBindCallback(nodeId, groupId, endpointId, clusterId);
            break;
        }
        case ZCL_UNBIND_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::NodeId nodeId;
            chip::GroupId groupId;
            chip::EndpointId endpointId;
            chip::ClusterId clusterId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(nodeId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(endpointId);
                    break;
                case 3:
                    TLVError = dataTlv.Get(clusterId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfBindingClusterUnbindCallback(nodeId, groupId, endpointId, clusterId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_BINDING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Binding

namespace ColorControl {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_MOVE_COLOR_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            int16_t rateX;
            int16_t rateY;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(rateX);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rateY);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveColorCallback(rateX, rateY, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_COLOR_TEMPERATURE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint16_t rate;
            uint16_t colorTemperatureMinimum;
            uint16_t colorTemperatureMaximum;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                case 2:
                    TLVError = dataTlv.Get(colorTemperatureMinimum);
                    break;
                case 3:
                    TLVError = dataTlv.Get(colorTemperatureMaximum);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 5:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveColorTemperatureCallback(moveMode, rate, colorTemperatureMinimum, colorTemperatureMaximum,
                                                                   optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_HUE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveHueCallback(moveMode, rate, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_SATURATION_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveSaturationCallback(moveMode, rate, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_TO_COLOR_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t colorX;
            uint16_t colorY;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(colorX);
                    break;
                case 1:
                    TLVError = dataTlv.Get(colorY);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveToColorCallback(colorX, colorY, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t colorTemperature;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(colorTemperature);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveToColorTemperatureCallback(colorTemperature, transitionTime, optionsMask,
                                                                     optionsOverride);
            break;
        }
        case ZCL_MOVE_TO_HUE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t hue;
            uint8_t direction;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(hue);
                    break;
                case 1:
                    TLVError = dataTlv.Get(direction);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveToHueCallback(hue, direction, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t hue;
            uint8_t saturation;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(hue);
                    break;
                case 1:
                    TLVError = dataTlv.Get(saturation);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveToHueAndSaturationCallback(hue, saturation, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_MOVE_TO_SATURATION_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t saturation;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(saturation);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterMoveToSaturationCallback(saturation, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_STEP_COLOR_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            int16_t stepX;
            int16_t stepY;
            uint16_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepX);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepY);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterStepColorCallback(stepX, stepY, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_STEP_COLOR_TEMPERATURE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint16_t stepSize;
            uint16_t transitionTime;
            uint16_t colorTemperatureMinimum;
            uint16_t colorTemperatureMaximum;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(colorTemperatureMinimum);
                    break;
                case 4:
                    TLVError = dataTlv.Get(colorTemperatureMaximum);
                    break;
                case 5:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 6:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterStepColorTemperatureCallback(stepMode, stepSize, transitionTime, colorTemperatureMinimum,
                                                                   colorTemperatureMaximum, optionsMask, optionsOverride);
            break;
        }
        case ZCL_STEP_HUE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint8_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterStepHueCallback(stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_STEP_SATURATION_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint8_t transitionTime;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterStepSaturationCallback(stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
            break;
        }
        case ZCL_STOP_MOVE_STEP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t optionsMask;
            uint8_t optionsOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(optionsMask);
                    break;
                case 1:
                    TLVError = dataTlv.Get(optionsOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfColorControlClusterStopMoveStepCallback(optionsMask, optionsOverride);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_COLOR_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace ColorControl

namespace DoorLock {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_CLEAR_ALL_PINS_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearAllPinsCallback();
            break;
        }
        case ZCL_CLEAR_ALL_RFIDS_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearAllRfidsCallback();
            break;
        }
        case ZCL_CLEAR_HOLIDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearHolidayScheduleCallback(scheduleId);
            break;
        }
        case ZCL_CLEAR_PIN_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearPinCallback(userId);
            break;
        }
        case ZCL_CLEAR_RFID_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearRfidCallback(userId);
            break;
        }
        case ZCL_CLEAR_WEEKDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearWeekdayScheduleCallback(scheduleId, userId);
            break;
        }
        case ZCL_CLEAR_YEARDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterClearYeardayScheduleCallback(scheduleId, userId);
            break;
        }
        case ZCL_GET_HOLIDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetHolidayScheduleCallback(scheduleId);
            break;
        }
        case ZCL_GET_LOG_RECORD_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t logIndex;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(logIndex);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetLogRecordCallback(logIndex);
            break;
        }
        case ZCL_GET_PIN_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetPinCallback(userId);
            break;
        }
        case ZCL_GET_RFID_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetRfidCallback(userId);
            break;
        }
        case ZCL_GET_USER_TYPE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetUserTypeCallback(userId);
            break;
        }
        case ZCL_GET_WEEKDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetWeekdayScheduleCallback(scheduleId, userId);
            break;
        }
        case ZCL_GET_YEARDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterGetYeardayScheduleCallback(scheduleId, userId);
            break;
        }
        case ZCL_LOCK_DOOR_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            const uint8_t * PIN;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.GetDataPtr(PIN);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterLockDoorCallback(const_cast<uint8_t *>(PIN));
            break;
        }
        case ZCL_SET_HOLIDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint32_t localStartTime;
            uint32_t localEndTime;
            uint8_t operatingModeDuringHoliday;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(localStartTime);
                    break;
                case 2:
                    TLVError = dataTlv.Get(localEndTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(operatingModeDuringHoliday);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetHolidayScheduleCallback(scheduleId, localStartTime, localEndTime, operatingModeDuringHoliday);
            break;
        }
        case ZCL_SET_PIN_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userStatus;
            uint8_t userType;
            const uint8_t * pin;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userStatus);
                    break;
                case 2:
                    TLVError = dataTlv.Get(userType);
                    break;
                case 3:
                    TLVError = dataTlv.GetDataPtr(pin);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetPinCallback(userId, userStatus, userType, const_cast<uint8_t *>(pin));
            break;
        }
        case ZCL_SET_RFID_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userStatus;
            uint8_t userType;
            const uint8_t * id;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userStatus);
                    break;
                case 2:
                    TLVError = dataTlv.Get(userType);
                    break;
                case 3:
                    TLVError = dataTlv.GetDataPtr(id);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetRfidCallback(userId, userStatus, userType, const_cast<uint8_t *>(id));
            break;
        }
        case ZCL_SET_USER_TYPE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userType;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userType);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetUserTypeCallback(userId, userType);
            break;
        }
        case ZCL_SET_WEEKDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;
            uint8_t daysMask;
            uint8_t startHour;
            uint8_t startMinute;
            uint8_t endHour;
            uint8_t endMinute;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(daysMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(startHour);
                    break;
                case 4:
                    TLVError = dataTlv.Get(startMinute);
                    break;
                case 5:
                    TLVError = dataTlv.Get(endHour);
                    break;
                case 6:
                    TLVError = dataTlv.Get(endMinute);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetWeekdayScheduleCallback(scheduleId, userId, daysMask, startHour, startMinute, endHour,
                                                             endMinute);
            break;
        }
        case ZCL_SET_YEARDAY_SCHEDULE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;
            uint32_t localStartTime;
            uint32_t localEndTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(localStartTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(localEndTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterSetYeardayScheduleCallback(scheduleId, userId, localStartTime, localEndTime);
            break;
        }
        case ZCL_UNLOCK_DOOR_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            const uint8_t * PIN;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.GetDataPtr(PIN);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterUnlockDoorCallback(const_cast<uint8_t *>(PIN));
            break;
        }
        case ZCL_UNLOCK_WITH_TIMEOUT_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t timeoutInSeconds;
            const uint8_t * pin;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(timeoutInSeconds);
                    break;
                case 1:
                    TLVError = dataTlv.GetDataPtr(pin);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfDoorLockClusterUnlockWithTimeoutCallback(timeoutInSeconds, const_cast<uint8_t *>(pin));
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_DOOR_LOCK_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace DoorLock

namespace GeneralCommissioning {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ARM_FAIL_SAFE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t expiryLengthSeconds;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(expiryLengthSeconds);
                    break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGeneralCommissioningClusterArmFailSafeCallback(expiryLengthSeconds, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_COMMISSIONING_COMPLETE_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGeneralCommissioningClusterCommissioningCompleteCallback();
            break;
        }
        case ZCL_SET_FABRIC_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan fabricId;
            chip::ByteSpan fabricSecret;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    fabricId             = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    fabricSecret         = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 2:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGeneralCommissioningClusterSetFabricCallback(fabricId, fabricSecret, breadcrumb, timeoutMs);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_GENERAL_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace GeneralCommissioning

namespace Groups {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_GROUP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            const uint8_t * groupName;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.GetDataPtr(groupName);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterAddGroupCallback(groupId, const_cast<uint8_t *>(groupName));
            break;
        }
        case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            const uint8_t * groupName;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.GetDataPtr(groupName);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId, const_cast<uint8_t *>(groupName));
            break;
        }
        case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t groupCount;
            /* TYPE WARNING: array array defaults to */ uint8_t * groupList;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupCount);
                    break;
                case 1:
                    // Just for compatibility, we will add array type support in IM later.
                    TLVError = dataTlv.GetDataPtr(const_cast<const uint8_t *&>(groupList));
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterGetGroupMembershipCallback(groupCount, groupList);
            break;
        }
        case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterRemoveAllGroupsCallback();
            break;
        }
        case ZCL_REMOVE_GROUP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterRemoveGroupCallback(groupId);
            break;
        }
        case ZCL_VIEW_GROUP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfGroupsClusterViewGroupCallback(groupId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_GROUPS_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Groups

namespace IasZone {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ZONE_ENROLL_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t enrollResponseCode;
            uint8_t zoneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(enrollResponseCode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(zoneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfIasZoneClusterZoneEnrollResponseCallback(enrollResponseCode, zoneId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_IAS_ZONE_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace IasZone

namespace Identify {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_IDENTIFY_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t identifyTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(identifyTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfIdentifyClusterIdentifyCallback(identifyTime);
            break;
        }
        case ZCL_IDENTIFY_QUERY_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfIdentifyClusterIdentifyQueryCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_IDENTIFY_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Identify

namespace LevelControl {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_MOVE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterMoveCallback(moveMode, rate, optionMask, optionOverride);
            break;
        }
        case ZCL_MOVE_TO_LEVEL_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t level;
            uint16_t transitionTime;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(level);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 2:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterMoveToLevelCallback(level, transitionTime, optionMask, optionOverride);
            break;
        }
        case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t level;
            uint16_t transitionTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(level);
                    break;
                case 1:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterMoveToLevelWithOnOffCallback(level, transitionTime);
            break;
        }
        case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t moveMode;
            uint8_t rate;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(moveMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(rate);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterMoveWithOnOffCallback(moveMode, rate);
            break;
        }
        case ZCL_STEP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint16_t transitionTime;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterStepCallback(stepMode, stepSize, transitionTime, optionMask, optionOverride);
            break;
        }
        case ZCL_STEP_WITH_ON_OFF_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t stepMode;
            uint8_t stepSize;
            uint16_t transitionTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(stepMode);
                    break;
                case 1:
                    TLVError = dataTlv.Get(stepSize);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterStepWithOnOffCallback(stepMode, stepSize, transitionTime);
            break;
        }
        case ZCL_STOP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t optionMask;
            uint8_t optionOverride;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(optionMask);
                    break;
                case 1:
                    TLVError = dataTlv.Get(optionOverride);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterStopCallback(optionMask, optionOverride);
            break;
        }
        case ZCL_STOP_WITH_ON_OFF_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLevelControlClusterStopWithOnOffCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_LEVEL_CONTROL_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace LevelControl

namespace LowPower {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_SLEEP_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfLowPowerClusterSleepCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_LOW_POWER_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace LowPower

namespace NetworkCommissioning {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_THREAD_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan operationalDataset;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    operationalDataset   = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterAddThreadNetworkCallback(operationalDataset, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_ADD_WI_FI_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            chip::ByteSpan credentials;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    credentials          = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 2:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterAddWiFiNetworkCallback(ssid, credentials, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_DISABLE_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    networkID            = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterDisableNetworkCallback(networkID, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_ENABLE_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan networkID;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    networkID            = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterEnableNetworkCallback(networkID, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_GET_LAST_NETWORK_COMMISSIONING_RESULT_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterGetLastNetworkCommissioningResultCallback(timeoutMs);
            break;
        }
        case ZCL_REMOVE_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan NetworkID;
            uint64_t Breadcrumb;
            uint32_t TimeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    NetworkID            = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(Breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(TimeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterRemoveNetworkCallback(NetworkID, Breadcrumb, TimeoutMs);
            break;
        }
        case ZCL_SCAN_NETWORKS_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterScanNetworksCallback(ssid, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_UPDATE_THREAD_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan operationalDataset;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    operationalDataset   = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterUpdateThreadNetworkCallback(operationalDataset, breadcrumb, timeoutMs);
            break;
        }
        case ZCL_UPDATE_WI_FI_NETWORK_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            chip::ByteSpan ssid;
            chip::ByteSpan credentials;
            uint64_t breadcrumb;
            uint32_t timeoutMs;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    ssid                 = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 1: {
                    const uint8_t * data = nullptr;
                    TLVError             = dataTlv.GetDataPtr(data);
                    credentials          = chip::ByteSpan(data, dataTlv.GetLength());
                }
                break;
                case 2:
                    TLVError = dataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVError = dataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfNetworkCommissioningClusterUpdateWiFiNetworkCallback(ssid, credentials, breadcrumb, timeoutMs);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_NETWORK_COMMISSIONING_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace NetworkCommissioning

namespace OnOff {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_OFF_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOffCallback();
            break;
        }
        case ZCL_ON_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterOnCallback();
            break;
        }
        case ZCL_TOGGLE_COMMAND_ID: {
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfOnOffClusterToggleCallback();
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_ON_OFF_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace OnOff

namespace Scenes {

void DispatchServerCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_SCENE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            uint8_t sceneId;
            uint16_t transitionTime;
            const uint8_t * sceneName;
            /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 3:
                    TLVError = dataTlv.GetDataPtr(sceneName);
                    break;
                case 4:
                    // Just for compatibility, we will add array type support in IM later.
                    TLVError = dataTlv.GetDataPtr(const_cast<const uint8_t *&>(extensionFieldSets));
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterAddSceneCallback(groupId, sceneId, transitionTime, const_cast<uint8_t *>(sceneName),
                                                 extensionFieldSets);
            break;
        }
        case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterGetSceneMembershipCallback(groupId);
            break;
        }
        case ZCL_RECALL_SCENE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            uint8_t sceneId;
            uint16_t transitionTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterRecallSceneCallback(groupId, sceneId, transitionTime);
            break;
        }
        case ZCL_REMOVE_ALL_SCENES_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterRemoveAllScenesCallback(groupId);
            break;
        }
        case ZCL_REMOVE_SCENE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterRemoveSceneCallback(groupId, sceneId);
            break;
        }
        case ZCL_STORE_SCENE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterStoreSceneCallback(groupId, sceneId);
            break;
        }
        case ZCL_VIEW_SCENE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32,
                                    TLV::TagNumFromTag(dataTlv.GetTag()), TLVError);
                }
            }
            // TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
            emberAfScenesClusterViewSceneCallback(groupId, sceneId);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_SCENES_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Scenes

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    switch (aClusterId)
    {
    case ZCL_BARRIER_CONTROL_CLUSTER_ID:
        clusters::BarrierControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_BASIC_CLUSTER_ID:
        clusters::Basic::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_BINDING_CLUSTER_ID:
        clusters::Binding::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_COLOR_CONTROL_CLUSTER_ID:
        clusters::ColorControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_DOOR_LOCK_CLUSTER_ID:
        clusters::DoorLock::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_GENERAL_COMMISSIONING_CLUSTER_ID:
        clusters::GeneralCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_GROUPS_CLUSTER_ID:
        clusters::Groups::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_IAS_ZONE_CLUSTER_ID:
        clusters::IasZone::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_IDENTIFY_CLUSTER_ID:
        clusters::Identify::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_LEVEL_CONTROL_CLUSTER_ID:
        clusters::LevelControl::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_LOW_POWER_CLUSTER_ID:
        clusters::LowPower::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_NETWORK_COMMISSIONING_CLUSTER_ID:
        clusters::NetworkCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_ON_OFF_CLUSTER_ID:
        clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case ZCL_SCENES_CLUSTER_ID:
        clusters::Scenes::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        // TODO: Encode response for Cluster not found
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
    Compatibility::ResetEmberAfObjects();
}

} // namespace app
} // namespace chip
