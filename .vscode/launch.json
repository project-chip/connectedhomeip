{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Mock Server Tests",
            "type": "debugpy",
            "request": "launch",
            "module": "unittest",
            "args": [
                "${workspaceFolder}/integrations/mock_server/tests/test_mock_server.py"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}/integrations/mock_server/src:${PYTHONPATH}"
            },
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Python Debugger: test_dcl_server",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/integrations/mock_server/src/main.py",
            "args": [
                "--port",
                "8443",
                "--config",
                "${workspaceFolder}/integrations/mock_server/configurations/server_config.json",
                "--routing-config-dir",
                "${workspaceFolder}/integrations/mock_server/configurations/fake_distributed_compliance_ledger",
                "--cert",
                "${workspaceFolder}/server.crt",
                "--key",
                "${workspaceFolder}/server.key"
            ],
            "console": "integratedTerminal"
        },
        {
            "name": "Attach to running process",
            "type": "lldb",
            "request": "attach",
            "pid": "${command:pickProcess}"
        },
        {
            "name": "Run application (Darwin x64)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/chip-tool/out/debug/chip-tool",
            "args": [
                "--storage-directory",
                "./storage",
                "interactive",
                "start"
            ],
            "cwd": "${workspaceFolder}/examples/chip-tool/out/debug"
        },
        {
            "name": "Run mdns-advertiser product-id 1 (Linux x64)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/minimal-mdns/out/debug/mdns-advertiser",
            "args": [
                "-4",
                "-m",
                "commissionable-node",
                "--vendor-id",
                "4381",
                "--product-id",
                "1",
                "--device-type",
                "144",
                "--commissioning-mode",
                "0"
            ],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run TestFabricTable",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/credentials/tests/out/test/tests/TestFabricTable",
            "cwd": "${workspaceFolder}/src/credentials/tests/out/test/tests"
        },
        {
            "name": "Run TestJCMCommissioner",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests/TestJCMCommissioner",
            "cwd": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests"
        },
        {
            "name": "Run TestTrustVerification",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests/TestTrustVerification",
            "cwd": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests"
        },
        {
            "name": "Run TestCommands",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/out/test/tests/TestCommands",
            "cwd": "${workspaceFolder}/src/controller/tests/out/test/tests"
        },
        {
            "name": "Run application (valgrind jfc-app)",
            "type": "lldb",
            "request": "launch",
            "program": "valgrind",
            "args": [
                "${workspaceFolder}/examples/jf-control-app/out/debug/jfc-app",
                "--rpc-server-ip",
                "192.168.1.64",
                "--rpc-server-port",
                "33055",
                "--storage-directory",
                "./jfc_b_storage_directory",
                "--commissioner-vendor-id",
                "0xFFF2"
            ],
            "cwd": "${workspaceFolder}/examples/jf-control-app/out/debug"
        },
        {
            "name": "Run application (Linux x64)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outAppLinux}",
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run test (Linux x64)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outTestLinux}",
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run pw FuzzTest (Linux x64) UnitTest Mode",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outPWFuzzTestLinux}",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run pw FuzzTest (Linux x64) Continuous Fuzzing Mode",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outPWFuzzTestLinux}",
            "args": ["-fuzz=${input:fuzzTestName}"],
            "cwd": "${workspaceFolder}",
            "preLaunchTask": ""
        },
        {
            "name": "QRCode Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/setup_payload/tests/TestQRCode",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build QRCode Payload Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "CHIP crypto Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/crypto/tests/TestCrypto",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build & Run Crypto Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "CHIP openSSL Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/crypto/tests/TestCryptoPAL",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build openSSL crypto Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "LightingApp (Tizen) [remote]",
            "type": "cppdbg",
            "request": "launch",
            "cwd": "${workspaceFolder}/out/tizen-arm-light",
            "program": "${workspaceFolder}/out/tizen-arm-light/chip-lighting-app",
            "miDebuggerPath": "${env:TIZEN_SDK_ROOT}/tools/arm-linux-gnueabi-gcc-9.2/bin/arm-linux-gnueabi-gdb",
            "additionalSOLibSearchPath": "${env:TIZEN_ROOTFS}",
            "preLaunchTask": "Launch LightingApp with gdbserver attached (Tizen)",
            "miDebuggerServerAddress": "localhost:9999",
            "linux": {
                "MIMode": "gdb"
            },
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "text": "set solib-absolute-prefix ${env:TIZEN_ROOTFS}"
                },
                {
                    "text": "set sysroot ${env:TIZEN_SDK_SYSROOT}"
                },
                {
                    "text": "set debug-file-directory {env:TIZEN_SDK_SYSROOT}/usr/lib/debug"
                },
                {
                    "text": "set solib-search-path ${workspaceFolder}/out/tizen-arm-light"
                }
            ]
        },
        {
            "name": "Debug Mbed examples",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/${input:mbedApp}/mbed",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-${input:mbedApp}-example.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "serverpath": "${env:OPENOCD_PATH}/bin/openocd",
            "servertype": "openocd",
            "searchDir": [
                "${workspaceRoot}/config/mbed/scripts",
                "${env:OPENOCD_PATH}/scripts"
            ],
            "configFiles": ["${input:mbedTarget}.tcl"],
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor program {./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-${input:mbedApp}-example.hex}",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "numberOfProcessors": 2,
            "targetProcessor": 1, // Set to 0 for the CM0+, set to 1 for the CM4
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Debug Mbed examples [remote]",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/${input:mbedApp}/mbed",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-${input:mbedApp}-example.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "external",
            "gdbTarget": "host.docker.internal:3334", //port 3333 for the CM0+, 3334 for the CM4
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor reset halt",
                "load ./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-${input:mbedApp}-example.hex",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Flash Mbed examples",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/${input:mbedApp}/mbed",
            "executable": "./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-${input:mbedApp}-example.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "serverpath": "${env:OPENOCD_PATH}/bin/openocd",
            "servertype": "openocd",
            "searchDir": [
                "${workspaceRoot}/config/mbed/scripts",
                "${env:OPENOCD_PATH}/scripts"
            ],
            "configFiles": ["${input:mbedTarget}.tcl"],
            "overrideLaunchCommands": [
                "monitor reset halt",
                "monitor program {./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-${input:mbedApp}-example.hex}",
                "monitor reset run",
                "quit"
            ],
            "numberOfProcessors": 2,
            "targetProcessor": 1, // Set to 0 for the CM0+, set to 1 for the CM4
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Flash Mbed examples [remote]",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/${input:mbedApp}/mbed",
            "executable": "./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-${input:mbedApp}-example.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "external",
            "gdbTarget": "host.docker.internal:3334", //port 3333 for the CM0+, 3334 for the CM4
            "overrideLaunchCommands": [
                "monitor reset halt",
                "load ./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-${input:mbedApp}-example.hex",
                "monitor reset run",
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Debug Mbed unit tests",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/src/test_driver/mbed/unit_tests",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-unit-tests.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "openocd",
            "serverpath": "${env:OPENOCD_PATH}/bin/openocd",
            "searchDir": [
                "${workspaceRoot}/config/mbed/scripts",
                "${env:OPENOCD_PATH}/scripts"
            ],
            "configFiles": ["${input:mbedTarget}.tcl"],
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor program {./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-unit-tests.hex}",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "numberOfProcessors": 2,
            "targetProcessor": 1, // Set to 0 for the CM0+, set to 1 for the CM4
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Debug Mbed unit tests [remote]",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/src/test_driver/mbed/unit_tests",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-unit-tests.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "external",
            "gdbTarget": "host.docker.internal:3334", //port 3333 for the CM0+, 3334 for the CM4
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor reset halt",
                "load ./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-unit-tests.hex",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Flash Mbed unit tests",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/src/test_driver/mbed//unit_tests",
            "executable": "./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-unit-tests.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "openocd",
            "serverpath": "${env:OPENOCD_PATH}/bin/openocd",
            "searchDir": [
                "${workspaceRoot}/config/mbed/scripts",
                "${env:OPENOCD_PATH/scripts}"
            ],
            "configFiles": ["${input:mbedTarget}.tcl"],
            "overrideLaunchCommands": [
                "monitor reset halt",
                "monitor program {./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-unit-tests.hex}",
                "monitor reset run",
                "quit"
            ],
            "numberOfProcessors": 2,
            "targetProcessor": 1, // Set to 0 for the CM0+, set to 1 for the CM4
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Flash Mbed unit tests [remote]",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/src/test_driver/mbed/unit_tests",
            "executable": "./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-unit-tests.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "external",
            "gdbTarget": "host.docker.internal:3334", //port 3333 for the CM0+, 3334 for the CM4
            "overrideLaunchCommands": [
                "monitor reset halt",
                "load ./build-${input:mbedTarget}/${input:mbedFlashProfile}/chip-mbed-unit-tests.hex",
                "monitor reset run",
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Debug Mbed bootloader",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/platform/mbed/bootloader",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-bootloader.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "openocd",
            "serverpath": "${env:OPENOCD_PATH}/bin/openocd",
            "searchDir": [
                "${workspaceRoot}/config/mbed/scripts",
                "${env:OPENOCD_PATH}/scripts"
            ],
            "configFiles": ["${input:mbedTarget}.tcl"],
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor program {./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-bootloader.hex}",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "numberOfProcessors": 2,
            "targetProcessor": 1, // Set to 0 for the CM0+, set to 1 for the CM4
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "Debug Mbed bootloader [remote]",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}/examples/platform/mbed/bootloader",
            "executable": "./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-bootloader.elf",
            "armToolchainPath": "${env:PW_ENVIRONMENT_ROOT}/cipd/packages/arm/bin/", // Pigweed environment bootstraping required
            "servertype": "external",
            "gdbTarget": "host.docker.internal:3334", //port 3333 for the CM0+, 3334 for the CM4
            "overrideLaunchCommands": [
                "-enable-pretty-printing",
                "monitor reset halt",
                "load ./build-${input:mbedTarget}/${input:mbedDebugProfile}/chip-mbed-bootloader.hex",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "overrideRestartCommands": [
                "monitor reset init",
                "monitor reset run",
                "monitor sleep 200",
                "monitor psoc6 reset_halt sysresetreq"
            ],
            "runToMain": true, // if true, program will halt at main. Not used for a restart
            "showDevDebugOutput": false // When set to true, displays output of GDB.
        },
        {
            "name": "CHIP All Clusters App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/chip-all-clusters-app",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Admin (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-admin",
            "args": ["--log-file-path", "/tmp/fabric_admin.log"],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Bridge App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-bridge-app",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Sync (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-sync",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Joint Fabric (JFA-A)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/jf-admin-app/linux/out/debug/jfa-app",
            "args": [
                "--capabilities",
                "0x4",
                "--passcode",
                "11022033",
                "--discriminator",
                "3840",
                "--secured-device-port",
                "5533",
                "--rpc-server-port",
                "33033",
                "--KVS",
                "jfa_a_kvs"
            ],
            "cwd": "${workspaceFolder}/examples/jf-admin-app/linux/out/debug"
        },
        {
            "name": "Joint Fabric (JFC-A)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/jf-control-app/out/debug/jfc-app",
            "args": [
                "--rpc-server-ip",
                "127.0.0.1",
                "--rpc-server-port",
                "33033",
                "--storage-directory",
                "./jfc_a_storage_directory",
                "--commissioner-vendor-id",
                "0xFFF1"
            ],
            "cwd": "${workspaceFolder}/examples/jf-control-app/out/debug"
        },
        {
            "name": "Joint Fabric (JFA-B)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/jf-admin-app/linux/out/debug/jfa-app",
            "args": [
                "--capabilities",
                "0x4",
                "--passcode",
                "11022055",
                "--discriminator",
                "3841",
                "--secured-device-port",
                "5555",
                "--rpc-server-port",
                "33055",
                "--KVS",
                "jfa_b_kvs"
            ],
            "cwd": "${workspaceFolder}/examples/jf-admin-app/linux/out/debug"
        },
        {
            "name": "Joint Fabric (JFC-B)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/examples/jf-control-app/out/debug/jfc-app",
            "args": [
                "--rpc-server-ip",
                "127.0.0.1",
                "--rpc-server-port",
                "33055",
                "--storage-directory",
                "./jfc_b_storage_directory",
                "--commissioner-vendor-id",
                "0xFFF2"
            ],
            "cwd": "${workspaceFolder}/examples/jf-control-app/out/debug"
        },
        {
            "name": "OTA Requestor App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/ota-requestor/chip-ota-requestor-app",
            "args": [
                "--discriminator",
                "18",
                "--secured-device-port",
                "5560",
                "--KVS",
                "/tmp/chip_kvs_requestor"
            ],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "OTA Provider App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/ota-provider/chip-ota-provider-app",
            "args": [
                "--discriminator",
                "22",
                "--KVS",
                "/tmp/chip_kvs_provider",
                "--filepath",
                "/tmp/ota-image.bin"
            ],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Zephyr native tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/nrf-native-sim-tests/nrfconnect/zephyr/zephyr.exe",
            "args": ["-testargs"],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}/out/nrf-native-sim-tests/nrfconnect",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "Run TestFabricTable",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/credentials/tests/out/test/tests/TestFabricTable",
            "cwd": "${workspaceFolder}/src/credentials/tests/out/test/tests"
        },
        {
            "name": "Run TestJCMCommissioner",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests/TestJCMCommissioner",
            "cwd": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests"
        },
        {
            "name": "Run TestTrustVerification",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests/TestTrustVerification",
            "cwd": "${workspaceFolder}/src/controller/tests/jcm/out/test/tests"
        },
        {
            "name": "Run TestCommands",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/src/controller/tests/out/test/tests/TestCommands",
            "cwd": "${workspaceFolder}/src/controller/tests/out/test/tests"
        }
    ],
    "inputs": [
        {
            "type": "command",
            "id": "outAppDarwin",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/darwin-x64-* -maxdepth 2 -perm +111 -name 'chip-*' |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the application to run"
            }
        },
        {
            "type": "command",
            "id": "outAppLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-* -maxdepth 2 -executable -name 'chip-*' |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the application to run"
            }
        },
        {
            "type": "command",
            "id": "outTestLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-*/tests -type f -executable |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the test to run"
            }
        },
        {
            "type": "command",
            "id": "outPWFuzzTestLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-*/chip_pw_fuzztest/tests -type f -executable |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the FuzzTest to run"
            }
        },
        {
            "id": "fuzzTestName",
            "type": "command",
            "command": "shellCommand.execute",
            "args": {
                "command": "./out/${input:outPWFuzzTestLinux} --list_fuzz_tests | grep 'Fuzz test:' | awk -F ': ' '{print $2}'",
                "description": "Select the specific FuzzTest to fuzz continuously"
            }
        },
        {
            "type": "pickString",
            "id": "mbedDebugProfile",
            "description": "What mbed profile do you want to debug?",
            "options": ["debug", "develop"],
            "default": "debug"
        },
        {
            "type": "pickString",
            "id": "mbedFlashProfile",
            "description": "What mbed profile do you want to flash?",
            "options": ["release", "debug", "develop"],
            "default": "release"
        },
        {
            "type": "pickString",
            "id": "mbedApp",
            "description": "What mbed application do you want to use?",
            "options": [
                "lock-app",
                "lighting-app",
                "pigweed-app",
                "all-clusters-app",
                "shell",
                "ota-requestor-app"
            ],
            "default": "lock-app"
        },
        {
            "type": "pickString",
            "id": "mbedTarget",
            "description": "What mbed target do you want to use?",
            "options": ["CY8CPROTO_062_4343W"],
            "default": "CY8CPROTO_062_4343W"
        }
    ]
}
