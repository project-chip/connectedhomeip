{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: Current File with Arguments",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "args": []
        },
        {
            "name": "Python: Mock Server Tests",
            "type": "debugpy",
            "request": "launch",
            "module": "unittest",
            "args": [
                "${workspaceFolder}/integrations/mock_server/tests/test_mock_server.py"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}/integrations/mock_server/src:${PYTHONPATH}"
            },
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Python Debugger: test_dcl_server",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/integrations/mock_server/src/main.py",
            "args": [
                "--port",
                "8443",
                "--config",
                "${workspaceFolder}/integrations/mock_server/configurations/server_config.json",
                "--routing-config-dir",
                "${workspaceFolder}/integrations/mock_server/configurations/fake_distributed_compliance_ledger",
                "--cert",
                "${workspaceFolder}/server.crt",
                "--key",
                "${workspaceFolder}/server.key"
            ],
            "console": "integratedTerminal"
        },
        {
            "name": "Attach to running process",
            "type": "lldb",
            "request": "attach",
            "pid": "${command:pickProcess}"
        },
        {
            "name": "Run application (Darwin x64)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outAppDarwin}",
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run application Energy-Gtw-Sample (Darwin arm64)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/darwin-arm64-energy-gateway/chip-energy-gateway-app",
            "args": ["--enable-key", "00112233445566778899aabbccddeeff"],
            "cwd": "${workspaceFolder}/examples/energy-gateway-app"
        },
        {
            "name": "Run application (Linux x64)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outAppLinux}",
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run test (Linux x64)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outTestLinux}",
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run pw FuzzTest (Linux x64) UnitTest Mode",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outPWFuzzTestLinux}",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Run pw FuzzTest (Linux x64) Continuous Fuzzing Mode",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/${input:outPWFuzzTestLinux}",
            "args": ["-fuzz=${input:fuzzTestName}"],
            "cwd": "${workspaceFolder}",
            "preLaunchTask": ""
        },
        {
            "name": "QRCode Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/setup_payload/tests/TestQRCode",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build QRCode Payload Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "CHIP crypto Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/crypto/tests/TestCrypto",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build & Run Crypto Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "CHIP openSSL Tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/build/default/src/crypto/tests/TestCryptoPAL",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "Build openSSL crypto Tests",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "LightingApp (Tizen) [remote]",
            "type": "cppdbg",
            "request": "launch",
            "cwd": "${workspaceFolder}/out/tizen-arm-light",
            "program": "${workspaceFolder}/out/tizen-arm-light/chip-lighting-app",
            "miDebuggerPath": "${env:TIZEN_SDK_ROOT}/tools/arm-linux-gnueabi-gcc-9.2/bin/arm-linux-gnueabi-gdb",
            "additionalSOLibSearchPath": "${env:TIZEN_ROOTFS}",
            "preLaunchTask": "Launch LightingApp with gdbserver attached (Tizen)",
            "miDebuggerServerAddress": "localhost:9999",
            "linux": {
                "MIMode": "gdb"
            },
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "text": "set solib-absolute-prefix ${env:TIZEN_ROOTFS}"
                },
                {
                    "text": "set sysroot ${env:TIZEN_SDK_SYSROOT}"
                },
                {
                    "text": "set debug-file-directory {env:TIZEN_SDK_SYSROOT}/usr/lib/debug"
                },
                {
                    "text": "set solib-search-path ${workspaceFolder}/out/tizen-arm-light"
                }
            ]
        },
        {
            "name": "CHIP All Clusters App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/chip-all-clusters-app",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Admin (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-admin",
            "args": ["--log-file-path", "/tmp/fabric_admin.log"],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Bridge App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-bridge-app",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Fabric Sync (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/debug/standalone/fabric-sync",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "OTA Requestor App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/ota-requestor/chip-ota-requestor-app",
            "args": [
                "--discriminator",
                "18",
                "--secured-device-port",
                "5560",
                "--KVS",
                "/tmp/chip_kvs_requestor"
            ],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "OTA Provider App (Linux)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/out/ota-provider/chip-ota-provider-app",
            "args": [
                "--discriminator",
                "22",
                "--KVS",
                "/tmp/chip_kvs_provider",
                "--filepath",
                "/tmp/ota-image.bin"
            ],
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Zephyr native tests",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/out/nrf-native-sim-tests/nrfconnect/zephyr/zephyr.exe",
            "args": ["-testargs"],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}/out/nrf-native-sim-tests/nrfconnect",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
    ],
    "inputs": [
        {
            "type": "command",
            "id": "outAppDarwin",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/darwin-x64-* -maxdepth 2 -perm +111 -name 'chip-*' |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the application to run"
            }
        },
        {
            "type": "command",
            "id": "outAppLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-* -maxdepth 2 -executable -name 'chip-*' |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the application to run"
            }
        },
        {
            "type": "command",
            "id": "outTestLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-*/tests -type f -executable |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the test to run"
            }
        },
        {
            "type": "command",
            "id": "outPWFuzzTestLinux",
            "command": "shellCommand.execute",
            "args": {
                "command": "find ${workspaceFolder}/out/linux-x64-*/chip_pw_fuzztest/tests -type f -executable |sort |sed 's$${workspaceFolder}/out/$$'",
                "description": "Select the FuzzTest to run"
            }
        },
        {
            "id": "fuzzTestName",
            "type": "command",
            "command": "shellCommand.execute",
            "args": {
                "command": "./out/${input:outPWFuzzTestLinux} --list_fuzz_tests | grep 'Fuzz test:' | awk -F ': ' '{print $2}'",
                "description": "Select the specific FuzzTest to fuzz continuously"
            }
        }
    ]
}
