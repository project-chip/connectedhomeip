{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Build examples for platform",
            "type": "shell",
            "command": "scripts/run_in_build_env.sh",
            "args": [
                "./scripts/build/build_examples.py --platform ${input:examplePlatform} build"
            ],
            "group": "build",
            "problemMatcher": {
                "base": "$gcc"
            }
        },
        {
            "label": "Build specific example (all compatible platforms)",
            "type": "shell",
            "command": "scripts/run_in_build_env.sh",
            "args": [
                "./scripts/build/build_examples.py --app ${input:exampleApp} build"
            ],
            "group": "build",
            "problemMatcher": {
                "base": "$gcc"
            }
        },
        {
            "label": "Build single example (specific board/example)",
            "type": "shell",
            "command": "scripts/run_in_build_env.sh",
            "args": [
                "./scripts/build/build_examples.py --board ${input:exampleBoard} --app ${input:exampleApp} build"
            ],
            "group": "build",
            "problemMatcher": {
                "base": "$gcc"
            }
        },
        {
            "label": "Main Build",
            "type": "shell",
            "command": "scripts/build/default.sh",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "isBackground": false,
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": ["relative", "${workspaceFolder}/out/default/"]
            }
        },
        {
            "label": "Build & Test (all)",
            "type": "shell",
            "command": "./gn_build.sh",
            "group": "build",
            "isBackground": false,
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": ["relative", "${workspaceFolder}/out/debug/"]
            }
        },
        {
            "label": "Update compilation database",
            "type": "shell",
            "command": "scripts/helpers/update_compile_commands.sh",
            "group": "none",
            "dependsOn": "Build & Test (all)",
            "isBackground": false,
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Run Unit and Functional Tests",
            "type": "shell",
            "command": "scripts/tests/all_tests.sh",
            "group": "test",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": ["relative", "${workspaceFolder}/out/default/"]
            }
        },
        {
            "label": "Bootstrap",
            "type": "shell",
            "command": "bash scripts/bootstrap.sh",
            "group": "none",
            "problemMatcher": ["$gcc"]
        },
        {
            "label": "Clean Output",
            "type": "shell",
            "command": "scripts/helpers/clean.sh",
            "group": "none",
            "problemMatcher": ["$gcc"]
        },
        {
            "label": "Clean Tree",
            "type": "shell",
            "command": "scripts/helpers/clean_tree.sh",
            "group": "none",
            "problemMatcher": ["$gcc"]
        },
        {
            "label": "Build Shell",
            "type": "shell",
            "command": "scripts/examples/gn_build_example.sh examples/shell/standalone out/shell",
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": ["relative", "${workspaceFolder}/out/shell/"]
            }
        },
        {
            "label": "Build Lighting App (Linux)",
            "type": "shell",
            "command": "scripts/examples/gn_build_example.sh examples/lighting-app/linux out/lighting-app",
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/out/lighting-app/"
                ]
            }
        },
        {
            "label": "Build Minimal MDNS Example",
            "type": "shell",
            "command": "scripts/examples/gn_build_example.sh examples/minimal-mdns out/minimal_mdns 'chip_build_tools=false is_debug=false optimize_for_size=true'",
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/out/minimal_mdns/"
                ]
            }
        },
        {
            "label": "QEMU: run esp32-qemu unit tests",
            "type": "shell",
            "command": "scripts/tests/esp32_qemu_tests.sh /tmp/test_logs",
            "problemMatcher": []
        },
        {
            "label": "Build nRF Connect Pigweed Example (nRF52840)",
            "type": "shell",
            "command": "source scripts/activate.sh && scripts/examples/nrfconnect_example.sh pigweed-app nrf52840dk_nrf52840",
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/examples/pigweed-app/nrfconnect/build/nrf52840dk_nrf52840"
                ]
            }
        },
        {
            "label": "Build Telink Lighting Example (TLSR9518ADK80D)",
            "type": "shell",
            "command": "source scripts/activate.sh && scripts/examples/telink_example.sh lighting-app tlsr9518adk80d",
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/examples/lighting-app/telink/build/tlsr9518adk80d"
                ]
            }
        },
        {
            "label": "Run Mbed Application",
            "type": "shell",
            "command": "scripts/examples/mbed_example.sh",
            "args": [
                "-c=${input:mbedCommand}",
                "-a=${input:mbedApp}",
                "-b=${input:mbedTarget}",
                "-p=${input:mbedProfile}"
            ],
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/examples/${input:mbedApp}/mbed/build"
                ]
            }
        },
        {
            "label": "Run Mbed Unit Tests",
            "type": "shell",
            "command": "scripts/tests/mbed_tests.sh",
            "args": [
                "-c=${input:mbedCommand}",
                "-b=${input:mbedTarget}",
                "-p=${input:mbedProfile}"
            ],
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/src/test_driver/mbed/build"
                ]
            }
        }
    ],
    "inputs": [
        {
            "type": "pickString",
            "id": "mbedCommand",
            "description": "What do you want to do?",
            "options": ["build", "flash", "build-flash"],
            "default": "build"
        },
        {
            "type": "pickString",
            "id": "mbedApp",
            "description": "What mbed application do you want to use?",
            "options": ["lock-app", "lighting-app"],
            "default": "shell"
        },
        {
            "type": "pickString",
            "id": "mbedTarget",
            "description": "What mbed target do you want to use?",
            "options": ["CY8CPROTO_062_4343W"],
            "default": "CY8CPROTO_062_4343W"
        },
        {
            "type": "pickString",
            "id": "mbedProfile",
            "description": "What mbed profile do you want to use?",
            "options": ["develop", "release", "debug"],
            "default": "develop"
        },
        {
            "id": "efr32_board",
            "type": "pickString",
            "description": "What's the type of your EFR32 board?",
            "options": [
                "BRD4304A",
                "BRD4161A",
                "BRD4163A",
                "BRD4164A",
                "BRD4166A",
                "BRD4170A",
                "BRD4180A"
            ],
            "default": "BRD4166A"
        },
        {
            "type": "pickString",
            "id": "examplePlatform",
            "description": "Which platform would you like to build",
            "options": [
                "all",
                "android",
                "efr32",
                "esp32",
                "host",
                "nrf",
                "qpg",
                "infineon"
            ],
            "default": "build"
        },
        {
            "type": "pickString",
            "id": "exampleApp",
            "description": "Which example application would you like to build",
            "options": [
                "all-clusters",
                "bridge",
                "chip-tool",
                "light",
                "lock",
                "shell",
                "window-covering"
            ],
            "default": "build"
        },
        {
            "type": "pickString",
            "id": "exampleBoard",
            "description": "Which example board to build for",
            "options": [
                "arm",
                "arm64",
                "brd4161a",
                "c3devkit",
                "devkitc",
                "m5stack",
                "native",
                "nrf52840",
                "nrf5340",
                "qpg6100",
                "x64",
                "p6board"
            ],
            "default": "build"
        }
    ]
}
